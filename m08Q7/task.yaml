author: Ludovic TAFFIN
context: |-
    On vous donne l'interface ``Stat`` suivante :

    .. code-block:: java

      public interface Stat {
          /*
           * @pre -
           * @post retourne le plus grand nombre de l'ensemble
           */
          public double max();

          /*
           * @pre -
           * @post retourne le plus petit nombre de l'ensemble
           */
          public double min();

          /*
           * @pre -
           * @post retourne la moyenne des nombres présents dans l'ensemble
           */
          public double moyenne();
      }

    Ainsi que la classe (à compléter) ``MatriceCarree`` suivante :

    .. code-block:: java

      public class MatriceCarree implements Stat {

          public double[][] m;

          /*
           * @pre n > 0
           * @post a construit une matrice carrée de taille n*n
           */
          public MatriceCarree(int n) {
              m = new double[n][n];
          }

          /*
           * @pre 0 <= i < n, 0 <= j < n
           * @post stocke la valeur d en position i,j de la matrice
           */
          public void set(int i, int j, double d) {
              m[i][j] = d;
          }

          /*
           * @pre 0 <= i < n, 0 <= j < n
           * @post retourne la valeur se trouvant en position i,j de la matrice
           */
          public double get(int i, int j){
              return m[i][j];
          }

          //A COMPLETER
      }
environment: java7mockito
limits:
    time: '30'
    memory: '200'
    output: '1'
name: 'Mission 8 : Q* Matrice Carrée'
network_grading: false
order: 150
problems:
    q1:
        type: code
        header: Ecrivez ici les méthodes qui pourraient manquer
        name: Complétez votre classe
        language: Java
