accessible: true
author: Olivier BONAVENTURE
environment: default
limits:
    memory: '100'
    output: '2'
    time: '30'
name: 'Mission 1: QCM'
context: |
    =========================
    Mission 1 : Mise en Route
    =========================

    Ces questions ont pour objectif de vous permettre de tester vous-même votre compréhension de la matière couverte par cette mission de mise en route.

    Ces questions supposent que vous avez lu les sections suivantes du livre de référence |jn|_ :


     - |jn1|_

       - |jn1.1|_
       - |jn1.2|_
       - |jn1.3|_
       - |jn1.4|_
       - |jn1.5|_
       - |jn1.7|_

     - |jn2|_

       - |jn2.1|_
       - |jn2.2|_
       - |jn2.3|_ (sauf |jn2.3.3|_)
       - |jn2.5|_ (sauf |jn2.5.7|_)
       - |jn2.6|_ (sauf |jn2.6.3|_)

     - |jn3|_

       - |jn3.1|_

    .. _jn: http://math.hws.edu/javanotes/
    .. |jn| replace:: JavaNotes

    .. _jn1: http://math.hws.edu/javanotes/c1/index.html
    .. |jn1| replace:: `1 : Overview: The Mental Landscape`

    .. _jn1.1: http://math.hws.edu/javanotes/c1/s1.html
    .. |jn1.1| replace:: `1.1 : The Fetch and Execute Cycle: Machine Language`

    .. _jn1.2: http://math.hws.edu/javanotes/c1/s2.html
    .. |jn1.2| replace:: `1.2 : Asynchronous Events: Polling Loops and Interrupts`

    .. _jn1.3: http://math.hws.edu/javanotes/c1/s3.html
    .. |jn1.3| replace:: `1.3 : The Java Virtual Machine`

    .. _jn1.4: http://math.hws.edu/javanotes/c1/s4.html
    .. |jn1.4| replace:: `1.4 : Fundamental Building Blocks of Programs`

    .. _jn1.5: http://math.hws.edu/javanotes/c1/s5.html
    .. |jn1.5| replace:: `1.5 : Objects and Object-oriented Programming`

    .. _jn1.7: http://math.hws.edu/javanotes/c1/s7.html
    .. |jn1.7| replace:: `1.7 : The Internet and Beyond`

    .. _jn2 : http://math.hws.edu/javanotes/c2/index.html
    .. |jn2| replace:: `2 : Programming in the Small I: Names and Things`

    .. _jn2.1: http://math.hws.edu/javanotes/c2/s1.html
    .. |jn2.1| replace:: `2.1 : The Basic Java Application`

    .. _jn2.2: http://math.hws.edu/javanotes/c2/s2.html
    .. |jn2.2| replace:: `2.2 : Variables and the Primitive Types`

    .. _jn2.3: http://math.hws.edu/javanotes/c2/s3.html
    .. |jn2.3| replace:: `2.3 : Strings, Objects, Enums, and Subroutines`

    .. _jn2.3.3: http://math.hws.edu/javanotes/c2/s3.html#basics.3.3
    .. |jn2.3.3| replace:: `2.3.3 : Introduction to Enums`

    .. _jn2.5 : http://math.hws.edu/javanotes/c2/s5.html
    .. |jn2.5| replace:: `2.5 : Details of Expressions`

    .. _jn2.5.7: http://math.hws.edu/javanotes/c2/s5.html#basics.5.7
    .. |jn2.5.7| replace:: `2.5.7 : Type Conversion of Strings`

    .. _jn2.6: http://math.hws.edu/javanotes/c2/s6.html
    .. |jn2.6| replace:: `2.6 : Programming Environments`

    .. _jn2.6.3: http://math.hws.edu/javanotes/c2/s6.html#basics.6.3
    .. |jn2.6.3| replace:: `2.6.3 : IDEs and Eclipse`

    .. _jn3 : http://math.hws.edu/javanotes/c3/index.html
    .. |jn3| replace:: `3 : Programming in the Small II: Control`

    .. _jn3.1: http://math.hws.edu/javanotes/c3/s1.html
    .. |jn3.1| replace:: `3.1 : Blocks, Loops, and Branches`
problems:
    q1:
        limit: 3
        name: Initialisation de variables
        type: multiple-choice
        header: |4

            Parmi les fragments de code Java suivants, quels sont ceux qui correspondent à des initialisations correctes de variables entières ?
        choices:
        -   valid: true
            text: |4

                .. code:: java

                   int a=12;
                   int b= 42352;
        -   valid: true
            text: |4

                .. code:: java

                   int var1=-12;
                   int var2=42352;
        -   valid: true
            text: |4

                .. code:: java

                   int var1=-12;
                   int var2=-var1;
            feedback: |4

                En Java, une variable est initialisée en utilisant une constante ou une expression qui s'évalue avec le type de la variable.
        -   valid: true
            text: |4

                .. code:: java

                   int var_1=-12100;
                   int var_2=42352;
        -   text: |4

                .. code:: java

                   int var=1;
                   int ma variable=2;
            feedback: |4

                En Java, un nom de variable ne peut jamais contenir d'espace.
        -   text: |4

                .. code:: java

                   int var=1.2;
                   int d=2;
            feedback: |4

                En Java, l'expression ``1.2`` est un nombre réel et non un nombre entier.
        -   text: |4

                .. code:: java

                   int var1='1';
                   int var2=2;
            feedback: |4

                En Java, l'expression ``\`1\``` correspond au caractère ``1``. Ce n'est donc pas un nombre entier.
        -   text: |4

                .. code:: java

                   int a=123456789123456789123456789;
                   int b=2;
            feedback: |4

                En Java, les entiers ne peuvent représenter que les nombres entre ``-2147483648`` et ``2147483647``. Le nombre ``123456789123456789123456789`` est trop grand. Il ne peut être représenté que sous la forme d'un ``long``.
    q2:
        limit: 3
        name: Initialisation de variables
        type: multiple-choice
        header: |4

            Parmi les fragments de programmes Java ci-dessous, quels sont ceux qui respectent la syntaxe du langage ?
        choices:
        -   valid: true
            text: |4

                .. code:: java

                   int i=1;
                   double d=2.0;
                   char c='3';
                   boolean b=false;
                   long l=-1;
        -   valid: true
            text: |4

                .. code:: java

                   int i=0;
                   double d=3.2e-1;
                   char c='9';
                   boolean b=true;
                   long l=-1;
        -   text: |4

                .. code:: java

                   int i=0.9;
                   double d=3.2e-1;
                   char c='0';
                   boolean b=false;
                   long l=-1234;
            feedback: |4

                Le type ``int`` ne peut être utilisé que pour stocker des nombres entiers.
        -   text: |4

                .. code:: java

                   int i=-12345;
                   double d=3;
                   char c='12';
                   boolean b=true;
                   long l=678;
            feedback: |4

                Le type ``char`` ne peut être utilisé que pour stocker un (et un seul) caractère. ``'12'`` n'est pas un caractère valide. ``char c='2';`` serait une déclaration valide.
        -   text: |4

                .. code:: java

                   int i=-12345;
                   double d=3;
                   char c="9";
                   boolean b=true;
                   long l=678;
            feedback: |4

                Le type ``char`` ne peut être utilisé que pour stocker un (et un seul) caractère. En java, une expression entre guillemets comme ``"9"`` est une *chaîne de caractères* (un ``String``)  et non un caractère. ``char c='9';`` (notez l'utilisation des apostrophes au lieu des guillemets) serait une déclaration valide.
        -   text: |4

                .. code:: java

                   int i=2/3;
                   double d='8';
                   char c='a';
                   boolean b=false;
                   long l=-1;
            feedback: |4

                Le type ``double`` ne peut être utilisé que pour stocker un nombre réel. ``'8'`` est le caractère qui correspond au chiffre huit et non un nombre réel. Cette initialisation n'est donc pas valide. Notez que la ligne ``int i=2/3;`` est tout à fait valide. L'initialisation d'une variable peut être faite en utilisant n'importe quelle expression qui retourne une variable de ce type. Cependant, comme ``i`` est une variable de type ``int``, sa valeur sera ``0`` puisque la division ``2/3`` est une division entière.
        -   text: |4

                .. code:: java

                   int i=7;
                   double d=-2.34;
                   char c='z';
                   boolean b=0;
                   long l=-1;
            feedback: |4

                Le type ``boolean`` ne peut être utilisé que pour stocker une valeur booléenne contrairement à d'autres langages tels que C. Il peut s'agir de ``true``, ``false`` ou n'importe quelle expression qui donne une valeur booléenne. Ainsi, l'expression ``i==9`` est une expression booléenne qui a la valeur ``false``. Cette expression aurait pu aussi être utilisée pour initialiser la variable booléenne ``b``.
    q3:
        limit: 3
        name: Les commentaires
        type: multiple-choice
        header: |4

            Afin de faciliter la compréhension des programmes écrits dans un langage de programmation tel que Java, il est important de bien le documenter en utilisant des commentaires. Parmi les fragments de code Java ci-dessous, lequel est syntaxiquement correct ?
        choices:
        -   valid: true
            text: |4

                .. code:: java

                  /***********************
                   * Mon programme
                   *
                   ***********************/
                   int count=7; // compteur
                   int n=0;
                   // test
                   if(count>3) {
                      n=count;
                   }
        -   valid: true
            text: |4

                .. code:: java

                  /***********************
                   * Mon programme
                   *
                   ***********************/
                   int count=7; // compteur
                   int n=0;
                   // double d;
                   if(count>3) {
                      n=count;
                   }
            feedback: |4

                Un ligne de commentaire est une ligne ignorée par le compilateur Java. Certains programmeurs mettent en commentaire des lignes inutiles comme ci-dessus. Cela peut être utile durant l'écriture de programmes, mais évitez de rendre un programme finalisé avec des lignes de code en commentaires.
        -   valid: true
            text: |4

                .. code:: java

                  //
                  // Mon programme
                  //
                  //
                   int count=7; /* compteur */
                   int n=0;
                   // test
                   if(count>3) {
                      n=count;
                   }
            feedback: |4


                Ce fragment de code est correct, mais en général on préfère utiliser ``//`` et non ``/* ... */``  pour un commentaire sur une ligne. Inversement, on préfère utiliser ``/* ... */`` pour un commentaire qui prend plusieurs lignes et non mettre ``//`` au début de chaque ligne de commentaire.
        -   text: |4

                .. code:: java

                  /***********************
                   * Mon programme
                   *
                   ***********************/
                   int count=7; // compteur
                   int n=0;
                   /* test
                   if(count>3) {
                      n=count;
                   }
            feedback: |4

                Dans ce fragment de code, la ligne ``/* test`` marque le début d'un commentaire sur plusieurs lignes. Ce commentaire doit se terminer avec ``*/``, ce qui n'est pas le cas dans le code ci-dessus.
        -   text: |4

                .. code:: java

                  /***********************
                   * Mon programme
                   *
                   ***********************
                   int count=7; // compteur
                   int n=0;
                   // test
                   if(count>3) {
                      n=count;
                   }
            feedback: |4

                Dans ce fragment de code, la première ligne marque le début d'un commentaire sur plusieurs lignes. Ce commentaire doit normalement se terminer par ``*/``. Ce n'est pas le cas de l'exemple ci-dessus et le compilateur Java va considérer l'entièreté du programme comme étant un commentaire.
        -   text: |4

                .. code:: java

                  /***********************
                   * Mon programme
                   *
                   ***********************
                   int count=7; / compteur
                   int n=0;
                   / / test
                   if(count>3) {
                      n=count;
                   }
            feedback: |4

                Un commentaire doit débuter par ``//`` (deux fois caractère ``/``). Si vous utilisez un seul caractère ``/`` ou deux caractères ``/ /`` séparés par un espace, le compilateur Java ne considère par qu'il s'agit d'un marqueur valide de commentaire.
    q4:
        limit: 3
        name: Syntaxe de Java
        type: multiple-choice
        header: |4


            Un langage de programmation tel que Java utilise une syntaxe bien précise. Il est important que vous sachiez reconnaître rapidement des erreurs de syntaxe dans un programme Java pour éviter de les commettre vous-même. Les programmes ci-dessous ont été écrits par des étudiants pour afficher le message ``Hello, world!`` à l'écran. Chaque programme est stocké dans le fichier ``Hello.java``. Un seul de ces programmes est acceptable par le compilateur Java. Lequel ?
        choices:
        -   valid: true
            text: |4

                .. code:: java

                   public class Hello {

                    public static void main (String[] args) {
                      System.out.println("Hello, world!");
                    }
                   }
        -   valid: true
            text: |4

                .. code:: java

                   public class Hello {

                    public static void main (String[] args) {
                      System.out.print("Hello,");
                      System.out.println(world!");
                    }
                   }
        -   text: |4

                .. code:: java

                   public class Monprog {

                    public static void main (String[] args) {
                      System.out.println("Hello, world!");
                    }
                   }
            feedback: |4

                En Java, le fichier ``Hello.java`` doit toujours contenir une classe dont le nom est ``Hello``.
        -   text: |4

                .. code:: java

                   public class hello {

                    public static void main (String[] args) {
                      System.out.println("Hello, world!");
                    }
                   }
            feedback: |4

                En Java, le fichier ``Hello.java`` doit toujours contenir une classe dont le nom est ``Hello``. Les noms de classe commencent toujours par une majuscule.
        -   text: |4

                .. code:: java

                   public class Hello {

                    public main (String[] args) {
                      System.out.println("Hello, world!");
                    }
                   }
            feedback: |4

                En Java, la méthode qui est exécutée par défaut dans une classe Java a toujours comme signature ``public main (String[] args)``.
        -   text: |4

                .. code:: java

                   public class Hello {

                    public main (String[] args) {
                      System.out.println("Hello, world!")
                    }
                   }
            feedback: |4

                En Java, la ligne ``System.out.println("Hello, world!")`` doit nécessairement se terminer par un ``;``
    q5:
        limit: 3
        name: Echange du contenu de variables
        type: multiple-choice
        header: |4

            Dans un langage de programmation comme Java, il est souvent nécessaire d'échanger le contenu de deux variables. Considérons le programme ci-dessous dans lequel deux variables sont initialisées :

            .. code:: java

               int a=1401;
               int b=1101;

            Parmi les fragments de Java ci-dessous, lequel permet de correctement échanger le contenu de la variable ``a`` avec le contenu de la variable ``b`` ?
        choices:
        -   text: |4

                .. code:: java

                   a=b;
            feedback: |4

                Cette instruction place dans la variable ``a`` le contenu de la variable ``b`` mais pas l'inverse.
        -   text: |4


                .. code:: java

                   b==a;
            feedback: |4

                Ce n'est pas une instruction valide en langage Java. Ne confondez-pas ``==`` et ``=``.
        -   text: |4


                .. code:: java

                   b=a;
            feedback: |4

                Cette instruction place dans la variable ``b`` le contenu de la variable ``a`` mais pas l'inverse.
        -   text: |4

                .. code:: java


                    int c; // variable d'échange
                    c=b;
                    a=c;
                    b=a;
            feedback: |4

                Exécutez pas à pas cette suite d'instructions. Que contiennent les variables ``a`` et ``b`` à la fin de cette exécution ?
        -   valid: true
            text: |4


                .. code:: java

                   int c; // variable d'échange
                   c=a;
                   a=b;
                   b=c;
        -   valid: true
            text: |4


                .. code:: java

                    int c; // variable d'échange
                    c=b;
                    b=a;
                    a=c;
    q6:
        limit: 3
        name: Calcul du minimum
        type: multiple-choice
        header: |4

            Considérons un programme Java qui manipule deux variables : ``a`` et ``b``. Parmi les fragments de code ci-dessous, lequel place correctement dans la variable ``min`` le minimum entre les contenus de ``a`` et ``b`` ?

            .. code:: java

               double a;
               double b;
               double min;
        choices:
        -   valid: true
            text: |4

                .. code:: java

                   if(a>b)
                   {
                     min=b;
                   }
                   else
                   {
                     min=a;
                   }
        -   valid: true
            text: |4

                .. code:: java

                   if(a<b)
                   {
                     min=a;
                   }
                   else
                   {
                     min=b;
                   }
        -   valid: true
            text: |4

                .. code:: java

                   if(a<=b)
                   {
                     min=a;
                   }
                   else
                   {
                     min=b;
                   }
        -   text: |4

                .. code:: java

                   if(a<=b)
                   {
                     double min;
                 min=a;
                   }
                   else
                   {
                     double min;
                     min=b;
                   }
            feedback: |4

                Ce code ne fonctionne pas et le problème est assez subtil. En redéfinissant la variable ``min`` à l'intérieur de chaque bloc, on définit une variable qui est considérée par le compilateur comme étant différente de la variable min qui a été définie avec les variables ``a`` et ``b``. La nouvelle variable ``min`` est mise à jour à l'intérieur du bloc mais n'est pas accessible en dehors de ce bloc.
        -   text: |4

                .. code:: java

                   if(a!=b)
                   {
                 min=a;
                   }
                   else
                   {
                     min=b;
                   }
            feedback: |4

                Ne confondez pas ``!=`` et ``<=``
        -   text: |4

                .. code:: java

                   if(a>b)
                   {
                 min=a;
                   }
                   else
                   {
                     min=b;
                   }
            feedback: |4

                Ce programme place la valeur maximale dans la variable ``min``.
        -   text: |4

                .. code:: java

                   if(a<b)
                   {
                 min=a;
                   }
            feedback: |4

                Lorsque la valeur de la variable ``a`` est supérieure ou égale à la valeur de la variable ``b``, la variable ``min`` n'est pas initialisée.
    q7:
        limit: 3
        name: Valeur absolue
        type: multiple-choice
        header: |4

            Si ``x`` est une variable de type ``double``, lequel de ces fragments de code place dans la variable ``abs`` la valeur absolue de ``x``?
        choices:
        -   valid: true
            text: |4

                .. code:: java

                   double abs;
                   if( x<0 ) {
                     abs=-x;
                   }
                   else {
                     abs=x;
                   }
        -   valid: true
            text: |4

                .. code:: java

                   double abs=x;
                   if( x<=0 ) {
                     abs=-x;
                   }
        -   valid: true
            text: |4

                .. code:: java

                   double abs=x;
                   if( x>=0 ) {
                     abs=x;
                   }
                   else {
                     abs=-x;
                   }
        -   text: |4

                .. code:: java

                   double abs=x;
                   if( x>=0 ) {
                     abs=x;
                   }
            feedback: |4

                Ce fragment de code place toujours la valeur ``x`` dans la variable ``abs``.
        -   text: |4

                .. code:: java

                   double abs;
                   if(x!=0) {
                      abs=x;
                   }
                   else {
                      abs=-x;
                   }
            feedback: |4

                Ne confondez pas ``!=`` et ``>=``.
    q8:
        limit: 3
        name: Intervalles
        type: multiple-choice
        header: |4

            En mathématiques, on définit des intervalles, fermés, ouverts et semi-ouverts. L'intervalle semi-ouvert :math:`[3,7[` comprend l'ensemble des nombres réels qui sont supérieurs ou égaux à `3` et strictement inférieurs à 7. Sachant que ``a``, ``b`` et ``x`` sont des variables de type ``double``, lequel des fragments de code suivants affiche ``vrai`` sur sa sortie standard si et seulement si ``x`` appartient à l'intervalle :math:`[a,b[` ? On supposera pour cette question que la valeur stockée dans la variable ``a`` est strictement inférieure à celle stockée dans la variable ``b``.
        choices:
        -   valid: true
            text: |4

                .. code:: java

                   if(x>=a) {
                     if(x<b) {
                        System.out.println("vrai");
                    }
                   }
        -   valid: true
            text: |4

                .. code:: java

                   if(x<b) {
                     if(x>=a) {
                        System.out.println("vrai");
                    }
                   }
        -   valid: true
            text: |4

                .. code:: java

                   if( (x<b) && (x>=a) ){
                     System.out.println("vrai");
                   }
        -   valid: true
            text: |4

                .. code:: java

                   if( (x>=a) && (x<b) ){
                     System.out.println("vrai");
                   }
        -   text: |4

                .. code:: java

                   if( (a>=x) && (x<b) ) {
                     System.out.println("vrai");
                   }
            feedback: |4

                Dans quels cas l'expression ``( (a>=x) && (x<b) )`` est-elle vraie ?
        -   text: |4

                .. code:: java

                   if( (a<x) && (x<b) ) {
                     System.out.println("vrai");
                   }
            feedback: |4

                L'expression ``( (a<x) && (x<b) )`` est-elle vraie lorsque ``x==a`` ?
        -   text: |4

                .. code:: java

                   if( (a<=x) || (x<b) ) {
                     System.out.println("vrai");
                   }
            feedback: |4

                Ne confondez pas la conjonction (`et`) logique représenté par ``&&`` en Java et la disjonction (`ou`) logique représentée en Java par ``||``.
        -   text: |4

                .. code:: java

                   if(x<a) {
                     if(x<b) {
                        System.out.println("vrai");
                    }
                   }
            feedback: |4

                Affiche-t-elle "vrai" lorsque ``x==a``?
        -   text: |4

                .. code:: java

                   if(x<=b) {
                     if(x>=a) {
                        System.out.println("vrai");
                    }
                   }
            feedback: |4

                Qu'affiche ce fragment de code lorsque ``x==b`` ?
    q9:
        limit: 3
        name: Opérations arithmétiques
        type: multiple-choice
        header: |4

            Un seul des fragments de programmes ci-dessous affiche "ok" à l'écran ? Pouvez-vous trouver lequel ?
        choices:
        -   valid: true
            text: |4

                .. code:: java

                   int i=2;
                   int j=3;
                   int k=i/j;
                   if(k==0) {
                      System.out.println("ok");
                   }
        -   valid: true
            text: |4

                .. code:: java

                   double a=2;
                   double b=3;
                   double c=a/b;
                   if(c!=0.0) {
                      System.out.println("ok");
                   }
        -   text: |4

                .. code:: java

                   int i=6;
                   int j=7;
                   int k=i/j;
                   if(k!=0) {
                      System.out.println("ok");
                   }
            feedback: |4

                Dans ce fragment de code, les variables sont de type ``int``. En arithmétique entière, la division ``6/7`` donne comme résultat ``0`` avec un reste de ``6``.
        -   text: |4

                .. code:: java

                   double a=1;
                   double b=3;
                   double c=a/b;
                   if(c==0.0) {
                      System.out.println("ok");
                   }
            feedback: |4

                Dans ce fragment de code, les variables ``a`` et ``b`` sont de type ``double``. Elles permettent donc de stocker un nombre réel. Le résultat de ``a/b`` est ``0.33333`` qui est différent de ``0.0``.
        -   text: |4

                .. code:: java

                   int i=8;
                   int j=7;
                   int k=i/j;
                   if(k==0) {
                      System.out.println("ok");
                   }
            feedback: |4

                Dans ce fragment de code, les variables sont de type ``int``. En arithmétique entière, la division ``8/7`` donne comme résultat ``1`` avec un reste de ``1``.
        -   text: |4

                .. code:: java

                   double a=6.0;
                   double b=7.0;
                   double c=a/b;
                   if(c==0.0) {
                      System.out.println("ok");
                   }
            feedback: |4

                Dans ce fragment de code, les variables ``a`` et ``b`` sont de type ``double``. Elles permettent donc de stocker un nombre réel. Le résultat de ``a/b`` est différent de ``0.0``.
    q10:
        limit: 3
        name: Boucles while
        type: multiple-choice
        header: |4

            Lequel des fragments de code Java ci-dessous permet de calculer la somme des :math:`n` premiers entiers positifs ?
        choices:
        -   valid: true
            text: |4

                .. code:: java

                   int n=...;  // >0 à initialiser correctement
                   int count=0;
                   int sum=0; // la somme
                   while(count <n) {
                      sum=sum+count;
                      count=count+1;
                   }
                   // la variable sum contient la somme des
                   // n premiers entiers positifs
        -   valid: true
            text: |4

                .. code:: java

                   int n=...;  // >0 à initialiser correctement
                   int count=n;
                   int sum=0; // la somme
                   while(count>0) {
                      sum=sum+count;
                      count=count-1;
                   }
                   // la variable sum contient la somme des
                   // n premiers entiers positifs
        -   text: |4

                .. code:: java

                   int n=...;  // >0 à initialiser correctement
                   int count=0;
                   int sum=0; // la somme
                   while(count <n) {
                      sum=sum+count;
                      count=count-1;
                   }
                   // la variable sum contient la somme des
                   // n premiers entiers positifs
            feedback: |4

                Cette boucle ne se termine pas.
        -   text: |4

                .. code:: java

                   int n=...;  // à initialiser correctement
                   int sum=0; // la somme
                   while( n>1 ) {
                      sum=sum+n;
                      n=n-1;
                   }
            feedback: |4

                Quelle est la somme calculée par cette boucle ``while`` ?
        -   text: |4

                .. code:: java

                   int n=...;  // à initialiser correctement
                   int sum=0; // la somme
                   while( sum=sum+n ) {
                      n=n-1;
                   }
                   // la variable sum contient la somme des
                   // n premiers entiers positifs
            feedback: |4

                L'expression qui sert de garde à une boucle ``while`` doit être une expression booléenne. ``sum=sum+n`` n'est pas une expression booléenne et ce programme n'est pas syntaxiquement valide.
        -   text: |4

                .. code:: java

                   int n=...;  // >0 à initialiser correctement
                   int count=n;
                   int sum=0; // la somme
                   while(count>0)
                      sum=sum+count;
                      count=count-1;
                   // la variable sum contient la somme des
                   // n premiers entiers positifs
            feedback: |4

                Ce programme illustre une subtilité de l'utilisation des blocs avec le langage Java. Sans accolades, la boucle ``while`` porte uniquement sur l'instruction qui la suit. Ce code est donc équivalent au code ci-dessous :

                .. code:: java

                   int n=...;  // >0 à initialiser correctement
                   int count=n;
                   int sum=0; // la somme
                   while(count>0) {
                      sum=sum+count;
                   }
                   count=count-1;

                Dans ce fragment de code, la variable ``count`` n'est pas décrémentée dans le corps de la boucle et celle-ci ne se termine done jamais. Pour éviter ce genre de problèmes, il est préférable de *toujours* utiliser des accolades pour délimiter le bloc d'une boucle ``while``.
        -   text: |4

                .. code:: java

                   int n=...;  // >0 à initialiser correctement
                   int count=0;
                   int sum=0; // la somme
                   while(count<n)
                      sum=sum+count;
                      count=count+1;
                   // la variable sum contient la somme des
                   // n premiers entiers positifs
            feedback: |4

                Ce programme illustre une subtilité de l'utilisation des blocs avec le langage Java. Sans accolades, la boucle ``while`` porte uniquement sur l'instruction qui la suit. Ce code est donc équivalent au code ci-dessous :

                .. code:: java

                   int n=...;  // >0 à initialiser correctement
                   int count=0;
                   int sum=0; // la somme
                   while(count<n) {
                      sum=sum+count;
                   }
                   count=count+1;

                Dans ce fragment de code, la variable ``count`` n'est pas incrémentée dans le corps de la boucle et celle-ci ne se termine done jamais. Pour éviter ce genre de problèmes, il est préférable de *toujours* utiliser des accolades pour délimiter le bloc d'une boucle ``while``.
    q11:
        limit: 3
        name: Boucles while
        type: multiple-choice
        header: |4

            Les boucles ``while`` sont utiles lorsque l'on doit répéter des opérations similaires à de multiples reprises. En arithmétique, la factorielle d'un entier positif (``n``) et supérieur à ``1`` est définie comme étant le produit de tous les entiers inférieurs ou égaux à ``n``. La factorielle de ``n`` se note :math:`n!`. Ainsi :math:`4!=24`. Parmi les boucles ``while`` ci-dessous, laquelle permet de calculer correctement :math:`n!` ?
        choices:
        -   valid: true
            text: |4

                .. code:: java

                   long n=17;
                   long fact=1;  // factorielle
                   int count=n;  // compteur pour la boucle
                   while(count>1) {
                      fact=fact*count;
                      count=count-1;
                   }
        -   valid: true
            text: |4

                .. code:: java

                   long n=17;
                   long fact=1;  // factorielle
                   int count=1;  // compteur pour la boucle
                   while(count<=n) {
                      fact=fact*count;
                      count=count+1;
                   }
        -   text: |4

                .. code:: java

                   long n=17;
                   long fact=0;  // factorielle
                   int count=n;  // compteur pour la boucle
                   while(count>1) {
                      fact=fact*count;
                      count=count-1;
                   }
            feedback: |4

                Quel est le résultat de :math:`0 \times n`?
        -   text: |4

                .. code:: java

                   long n=17;
                   long fact=1;  // factorielle
                   int count=1;  // compteur pour la boucle
                   while(count>1) {
                      fact=fact*count;
                      count=count+1;
                   }
            feedback: |4

                Cette boucle ne s'arrête jamais.
        -   text: |4

                .. code:: java

                   long n=17;
                   long fact=1;  // factorielle
                   int count=n;  // compteur pour la boucle
                   while(count>1) {
                      fact=count;
                      count=count-1;
                   }
            feedback: |4

                Cette boucle ne fait que placer la valeur ``count`` dans ``fact`` à chaque itération.
        -   text: |4

                .. code:: java

                   long n=17;
                   long fact=1;  // factorielle
                   int count=1;  // compteur pour la boucle
                   while(count<=n) {
                      count=count+1;
                      fact=fact*count;
                   }
            feedback: |4

                Cette boucle ne calcule pas la factorielle demandée. Que calcule-t-elle ?
weight: 1.0
order: 42
