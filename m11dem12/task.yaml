author: 'Munyabarenzi Clémentine Zaninka (ressource: syllabus d''exercices SINF1101)'
context: "Suite de la question de démarrage 1.\n\nLa classe sous test:\n\n.. code-block\
  \ :: java\n\n    class DList\n    {\n        List<Double> l;\n\n        /**\n  \
  \       * @pre\n         * @post a construit une liste initialement vide\n     \
  \    */\n        public DList()\n        {\n            l=new LinkedList<Double>();\n\
  \        }\n\n        /**\n         * @pre d!=null\n         * @post a ajout le\
  \ Double d dans la liste\n         */\n        public void add(Double d)\n     \
  \   {\n            assert d!=null;\n            l.add(d);\n        }\n        /**\n\
  \         * @pre d!=null\n         * @post retourne true si d se trouvait dans la\
  \ liste et false sinon\n         *       a retire de la liste toutes les instances\
  \ de Double egales\n         *       a d\n         */\n        public boolean remove(Double\
  \ d)\n        {\n            assert d!=null;\n            int i=l.indexOf(d);\n\
  \            if(i>=0)\n            {\n                Double d1=l.remove(i);\n \
  \               return true;\n            }\n            else\n            {\n \
  \               return false;\n            }\n        }\n\n        /**\n       \
  \  * @pre d!=null\n         * @post retourne true si d se trouve dans la liste et\
  \ false sinon\n         */\n        public boolean contains(Double d)\n        {\n\
  \            return l.contains(d);\n        }\n\n        /**\n         * @pre -\n\
  \         * @post retourne le nombre de Double se trouvant dans la liste\n     \
  \    */\n        public int size()\n        {\n            return l.size();\n  \
  \      }\n    }\n\nLa partie de la classe test à compléter:\n\n.. Code-block ::\
  \ java\n\n        /**\n         * @pre\n         * @post verification du bon fonctionnement\
  \ de la methode remove:\n         *          cette méthode vérifie que la méthode\
  \ remove échoue quand\n         *       il le faut.\n         */\n        public\
  \ void testReussiteRemove()\n        {\n            // Creation de la liste\n  \
  \          DList l=new DList();\n\n\n            // ajout de trois elements a la\
  \ liste\n            l.add(new Double(2.3));\n            l.add(new Double(2.4));\n\
  \            l.add(new Double(2.4));\n\n\n            // retrait de ces trois elements\n\
  \            assertEquals(\"Le retrait d'un element se trouvant dans la liste\"\n\
  \                    + \" devrait renvoyer true\",/*(1)???*/,/*(2)???*/);\n    \
  \        assertEquals(\"Le retrait d'un element se trouvant deux fois dans\"\n \
  \                   + \" la liste devrait renvoyer true\",/*(3)???*/,/*(4)???*/);\n\
  \        }\n\n        /**\n         * @pre\n         * @post verification du bon\
  \ fonctionnement de la methode remove:\n         *          cette méthode vérifie\n\
  \         *       que la méthode remove échoue quand il le faut.\n         */\n\
  \        public void testEchecRemove(){\n\n            // Creation de la liste\n\
  \            DList l=new DList();\n\n            // Retrait d'un element d'une liste\
  \ vide\n            assertEquals(\"Le retrait d'un element ne se trouvant pas dans\"\
  \n                    + \" la liste devriat renvoyer false\",/*(5)???*/,/*(6)???*/);\n\
  \n            // Ajout de trois elements a la liste\n            l.add(new Double(2.3));\n\
  \            /*(7)???*/\n            l.add(new Double(2.4));\n\n            // Retrait\
  \ de ces trois elements\n            l.remove(new Double(2.3));\n            assertEquals(\"\
  Le retrait d'un element ne se trouvant plus dans\"\n                    + \" la\
  \ liste devrait renvoyer false\",/*(8)???*/,/*(9)???*/);\n            assertEquals(\"\
  Le retrait d'un element ne se trouvant pas dans \"\n                    + \"la liste\
  \ devriat renvoyer false\",/*(10)???*/,/*(11)???*/);\n            l.remove(new Double(2.4));\n\
  \            assertEquals(\"Le retrait d'un element dont les deux exemplaires\"\n\
  \                    + \" ne sont plus dans la liste devrait renvoyer false\",/*(12)???*/,/*(13)???*/);\n\
  \        }\n\n    }\n"
environment: java7
limits: {memory: '100', output: '2', time: '30'}
name: 'Mission 11: Question de Démarrage 2 : JUnit (partie 2)'
network_grading: false
order: 177
problems:
  q01: {header: '', language: java, name: '', type: code-single-line}
  q02: {header: '', language: java, name: '', type: code-single-line}
  q03: {header: '', language: java, name: '', type: code-single-line}
  q04: {header: '', language: java, name: '', type: code-single-line}
  q05: {header: '', language: java, name: '', type: code-single-line}
  q06: {header: '', language: java, name: '', type: code-single-line}
  q07: {header: '', language: java, name: '', type: code-single-line}
  q08: {header: '', language: java, name: '', type: code-single-line}
  q09: {header: '', language: java, name: '', type: code-single-line}
  q10: {header: '', language: java, name: '', type: code-single-line}
  q11: {header: '', language: java, name: '', type: code-single-line}
  q12: {header: '', language: java, name: '', type: code-single-line}
  q13: {header: '', language: java, name: '', type: code-single-line}
stored_submissions: 0
submission_limit: {amount: -1, period: -1}
weight: 1.0
