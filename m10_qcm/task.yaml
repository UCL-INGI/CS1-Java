author: Olivier BONAVENTURE
context: "=====================\nMission 10. ArrayList\n=====================\n\n\n\
  Ces questions supposent que vous avez lu les sections suivantes du livre de référence\
  \ |jn|_\n\n    - |jn8.3|_\n        - |jn8.3.3|_\n        - |jn8.3.4|_\n        -\
  \ |jn8.3.5|_\n    - |jn10.1|_\n        - |jn10.1.3|_\n        - |jn10.1.4|_\n  \
  \      - |jn10.1.5|_\n        - |jn10.1.6|_\n        - |jn10.1.7|_\n    - |jn10.2|_\n\
  \        - |jn10.2.1|_\n        - |jn10.2.2|_\n    - |jn11.4|_\n        - |jn11.4.1|_\n\
  \n.. _jn: http://math.hws.edu/javanotes/\n.. |jn| replace:: JavaNotes\n\n.. _jn8.3\
  \ : http://math.hws.edu/javanotes/c8/s3.html\n.. |jn8.3| replace:: `8.3 : Exceptions\
  \ and try..catch`\n\n.. _jn8.3.3 : http://math.hws.edu/javanotes/c8/s3.html#robustness.3.3\n\
  .. |jn8.3.3| replace:: `8.3.3 : Throwing Exceptions`\n\n.. _jn8.3.4 : http://math.hws.edu/javanotes/c8/s3.html#robustness.3.4\n\
  .. |jn8.3.4| replace:: `8.3.4 : Mandatory Exception Handling`\n\n.. _jn8.3.5 : http://math.hws.edu/javanotes/c8/s3.html#robustness.3.5\n\
  .. |jn8.3.5| replace:: `8.3.5 : Programming with Exceptions`\n\n.. _jn10.1 : http://math.hws.edu/javanotes/c10/s1.html\n\
  .. |jn10.1| replace:: `10.1 : Generic Programming`\n\n.. _jn10.1.3 : http://math.hws.edu/javanotes/c10/s1.html#generics.1.3\n\
  .. |jn10.1.3| replace:: `10.1.3 : Generic Programming in Java`\n\n.. _jn10.1.4 :\
  \ http://math.hws.edu/javanotes/c10/s1.html#generics.1.4\n.. |jn10.1.4| replace::\
  \ `10.1.4 : The Java Collection Framework`\n\n.. _jn10.1.5 : http://math.hws.edu/javanotes/c10/s1.html#generics.1.5\n\
  .. |jn10.1.5| replace:: `10.1.5 : Iterators and for-each Loops`\n\n.. _jn10.1.6\
  \ : http://math.hws.edu/javanotes/c10/s1.html#generics.1.6\n.. |jn10.1.6| replace::\
  \ `10.1.6 : Equality and Comparison`\n\n.. _jn10.1.7 : http://math.hws.edu/javanotes/c10/s1.html#generics.1.7\n\
  .. |jn10.1.7| replace:: `10.1.7 : Generics and Wrapper Classes`\n\n.. _jn10.2 :\
  \ http://math.hws.edu/javanotes/c10/s2.html\n.. |jn10.2| replace:: `10.2 : Lists\
  \ and Sets`\n\n.. _jn10.2.1 : http://math.hws.edu/javanotes/c10/s2.html#generics.2.1\n\
  .. |jn10.2.1| replace:: `10.2.1 : ArrayList and LinkedList`\n\n.. _jn10.2.2 : http://math.hws.edu/javanotes/c10/s2.html#generics.2.2\n\
  .. |jn10.2.2| replace:: `10.2.2 : Sorting`\n\n.. _jn11.4 : http://math.hws.edu/javanotes/c11/s4.html\n\
  .. |jn11.4| replace:: `11.4 : Networking`\n\n.. _jn11.4.1 : http://math.hws.edu/javanotes/c11/s4.html#IO.4.1\n\
  .. |jn11.4.1| replace:: `11.4.1 : URLs and URLConnections`\n"
environment: mcq
limits: {memory: '100', output: '2', time: '30'}
name: 'Mission 10: QCM'
network_grading: false
order: 165
problems:
  q1:
    choices:
    - {text: ".. code-block:: java\n\n   throw new IllegalArgumentException(\"nombre\
        \ negatif\");\n", valid: true}
    - {feedback: '

        L''exception ne doit pas nécessairement être créée dans l''instruction ``throw``.

        ', text: ".. code-block:: java\n\n   Exception e = new IllegalArgumentException(\"\
        nombre negatif\");\n   throw e;\n", valid: true}
    - {feedback: '

        ``IllegalArgumentException`` est un constructeur.

        ', text: ".. code-block:: java\n\n   throw IllegalArgumentException(\"nombre\
        \ negatif\");\n"}
    - {feedback: '

        Il ne s''agit pas de retourner un résultat mais de lancer une exception.

        ', text: ".. code-block:: java\n\n   return new IllegalArgumentException(\"\
        nombre negatif\");\n"}
    - {feedback: '

        Il s''agit de lancer une exception, pas de l''intercepter.

        ', text: ".. code-block:: java\n\n   try {\n       ...\n   } catch (IllegalArgumentException\
        \ e) {\n       e.setMessage(\"nombre negatif\");\n   }\n"}
    - {feedback: '

        Il s''agit de lancer une exception, pas de l''intercepter.

        ', text: ".. code-block:: java\n\n   try {\n       ...\n   } catch (new IllegalArgumentException(\"\
        nombre negatif\")) {\n       System.out.println(e.getMessage());\n   }\n"}
    - {feedback: '

        ``throws`` intervient dans les signatures, ce n''est pas la bonne instruction.

        ', text: ".. code-block:: java\n\n   throws new IllegalArgumentException(\"\
        nombre negatif\");\n"}
    header: '

      Quelle est la manière correcte de lancer une exception de type ``IllegalArgumentException``
      signalant un nombre négatif ?

      '
    limit: 3
    name: Instruction throw
    type: multiple_choice
  q2:
    choices:
    - {text: ".. code-block:: java\n\n   Debut de main\n   Debut de task1\n   Debut\
        \ de task3\n   Debut de task4\n   task1 intercepte boum\n   Fin de task1\n\
        \   Debut de task2\n   Debut de task3\n   Debut de task4\n   java.lang.Exception:\
        \ boum\n", valid: true}
    - {feedback: '

        L''exécution de ``main``, ``task2``, ``task3`` et ``task4`` ne parvient pas
        à la fin à cause de l''exception lancée dans ``task4``.

        ', text: ".. code-block:: java\n\n   Debut de main\n   Debut de task1\n  \
        \ Debut de task3\n   Debut de task4\n   Fin de task4\n   Fin de task3\n  \
        \ task1 intercepte boum\n   Fin de task1\n   Debut de task2\n   Debut de task3\n\
        \   Debut de task4\n   Fin de task4\n   Fin de task3\n   Fin de task2\n  \
        \ Fin de main\n   java.lang.Exception: boum\n"}
    - {feedback: '

        L''exécution de ``task3`` ne parvient pas à la fin, ``task3`` propage l''exception
        de ``task4``.

        ', text: ".. code-block:: java\n\n   Debut de main\n   Debut de task1\n  \
        \ Debut de task3\n   Debut de task4\n   Fin de task3\n   task1 intercepte\
        \ boum\n   Fin de task1\n   Debut de task2\n   Debut de task3\n   Debut de\
        \ task4\n   Fin de task3\n   java.lang.Exception: boum\n"}
    - {feedback: '

        L''exécution de ``task1`` parvient à la fin, l''exception de ``task3`` est
        interceptée et traitée.

        ', text: ".. code-block:: java\n\n   Debut de main\n   Debut de task1\n  \
        \ Debut de task3\n   Debut de task4\n   task1 intercepte boum\n   Debut de\
        \ task2\n   Debut de task3\n   Debut de task4\n   java.lang.Exception: boum\n"}
    - {feedback: '

        La première exception lancée dans ``task4`` est interceptée dans ``task1``,
        elle ne s''affiche pas.

        ', text: ".. code-block:: java\n\n   Debut de main\n   Debut de task1\n  \
        \ Debut de task3\n   Debut de task4\n   java.lang.Exception: boum\n   task1\
        \ intercepte boum\n   Fin de task1\n   Debut de task2\n   Debut de task3\n\
        \   Debut de task4\n   java.lang.Exception: boum\n"}
    - {feedback: '

        L''exécution de ``main``, ``task2``, ``task3`` et ``task4`` ne parvient pas
        à la fin à cause de l''exception lancée dans ``task4``.

        ', text: ".. code-block:: java\n\n   Debut de main\n   Debut de task1\n  \
        \ Debut de task3\n   Debut de task4\n   task1 intercepte boum\n   Fin de task4\n\
        \   Fin de task3\n   Fin de task1\n   Debut de task2\n   Debut de task3\n\
        \   Debut de task4\n   java.lang.Exception: boum\n   Fin de task4\n   Fin\
        \ de task3\n   Fin de task2\n   Fin de main\n"}
    header: "\nQu'imprime le programme suivant\n\n.. code-block:: java\n\n    public\
      \ static void main(String[] args) {\n        System.out.println(\"Debut de main\"\
      );\n        task1();\n        task2();\n        System.out.println(\"Fin de\
      \ main\");\n    }\n\n    public static void task1() {\n        System.out.println(\"\
      Debut de task1\");\n        try {\n            task3();\n        } catch (Exception\
      \ e) {\n            System.out.println(\"task1 intercepte \" + e.getMessage());\n\
      \        }\n        System.out.println(\"Fin de task1\");\n    }\n\n    public\
      \ static void task2() {\n        System.out.println(\"Debut de task2\");\n \
      \       task3();\n        System.out.println(\"Fin de task2\");\n    }\n\n \
      \   public static void task3() {\n        System.out.println(\"Debut de task3\"\
      );\n        task4();\n        System.out.println(\"Fin de task3\");\n    }\n\
      \n    public static void task4() {\n        System.out.println(\"Debut de task4\"\
      );\n        throw new RuntimeException(\"boum\");\n        System.out.println(\"\
      Fin de task4\");\n    }\n\n"
    limit: 3
    name: Propagation d'exceptions
    type: multiple_choice
  q3:
    choices:
    - {text: ".. code-block:: java\n\n   import java.io.*;\n   ...\n   public String\
        \ readName(Reader r) throws IOException {\n       ...\n   }\n", valid: true}
    - {feedback: '

        ``throws`` est suivi d''un nom de classe, pas d''une expression.

        ', text: ".. code-block:: java\n\n   import java.io.*;\n   ...\n   public\
        \ String readName(Reader r) throws new IOException() {\n       ...\n   }\n"}
    - {feedback: '

        Il faut déclarer l''exception dans la signature et non la lancer dans le corps
        de la méthode.

        ', text: ".. code-block:: java\n\n   import java.io.*;\n   ...\n   public\
        \ String readName(Reader r) {\n       throws new IOException();\n       ...\n\
        \   }\n"}
    - {feedback: '

        ``throw`` est une instruction, ce n''est pas ce qu''il faut ici.

        ', text: ".. code-block:: java\n\n   import java.io.*;\n   ...\n   public\
        \ String readName(Reader r) throw IOException {\n       ...\n   }\n"}
    - {feedback: '

        ``throws`` doit intervenir dans la signature, pas juste en commentaire.

        ', text: ".. code-block:: java\n\n   import java.io.*;\n   ...\n   // throws\
        \ IOException\n   public String readName(Reader r) {\n       ...\n   }\n"}
    - {feedback: '

        ``readName`` peut lancer une ``IOException`` et non la retourner comme résultat.

        ', text: ".. code-block:: java\n\n   import java.io.*;\n   ...\n   public\
        \ IOException readName(Reader r) {\n       ...\n   }\n"}
    header: '

      Quelle est la manière correcte de déclarer que la méthode ``readName`` peut
      causer une ``IOException`` ?

      '
    limit: 3
    name: Déclaration throws
    type: multiple_choice
  q4:
    choices:
    - {text: ".. code-block:: java\n\n   public static void main(String[] args)\n\
        \   public static void processFile(String filename)\n   public static String[]\
        \ readFile(String filename) throws IOException\n", valid: true}
    - {feedback: '

        ``processFile`` intercepte ``IOException``, il ne la propage pas.

        ', text: ".. code-block:: java\n\n   public static void main(String[] args)\n\
        \   public static void processFile(String filename) throws IOException\n \
        \  public static String[] readFile(String filename) throws IOException\n"}
    - {feedback: '

        ``processFile`` intercepte ``IOException``, il ne la propage pas et ``main``
        non plus.

        ', text: ".. code-block:: java\n\n   public static void main(String[] args)\
        \ throws IOException\n   public static void processFile(String filename) throws\
        \ IOException\n   public static String[] readFile(String filename) throws\
        \ IOException\n"}
    - {feedback: '

        C''est ``readFile`` et non ``processFile`` qui peut causer une ``IOException``,
        à cause de l''utilisation du ``BufferedReader``.

        ', text: ".. code-block:: java\n\n   public static void main(String[] args)\n\
        \   public static void processFile(String filename) throws IOException\n \
        \  public static String[] readFile(String filename)\n"}
    - {feedback: '

        Puisque ``processFile`` intercepte ``IOException``, il ne la propage pas à
        ``main``.

        ', text: ".. code-block:: java\n\n   public static void main(String[] args)\
        \ throws IOException\n   public static void processFile(String filename)\n\
        \   public static String[] readFile(String filename) throws IOException\n"}
    header: "\nConsidérons le programme suivant\n\n.. code-block:: java\n\n    import\
      \ java.io.*;\n    ...\n\n    public static void main(String[] args) {\n    \
      \    processFile(args[0]);\n    }\n\n    public static void processFile(String\
      \ filename) {\n        try {\n            String[] lines = readFile(filename);\n\
      \            ...\n        } catch (IOException e) {\n            System.out.println(\"\
      cannot read: \" + e.getMessage());\n        }\n    }\n\n    public static String[]\
      \ readFile(String filename) {\n        BufferedReader r = new BufferedReader(new\
      \ FileReader(filename));\n        ...\n        for (String s = r.readLine();\
      \ s != null; s = r.readLine()) {\n            ...\n        }\n        r.close();\n\
      \        return ...;\n    }\n\nComment doit-on compléter les signatures des\
      \ trois méthodes pour avoir toutes les déclarations ``throws`` nécessaires,\
      \ sans déclarations inutiles ?\n"
    limit: 3
    name: Exceptions sous contrôle
    type: multiple_choice
  q5:
    choices:
    - {text: ".. code-block:: java\n\n   public class GraveException extends RuntimeException\
        \ {\n       public GraveException(String msg) {\n           super(msg);\n\
        \       }\n   }\n", valid: true}
    - {feedback: '

        C''est syntaxiquement correct mais inadéquat; ``RuntimeException`` contient
        déjà un message.

        ', text: ".. code-block:: java\n\n   public class GraveException extends RuntimeException\
        \ {\n       private String message;\n       public GraveException(String msg)\
        \ {\n           this.message = msg;\n       }\n   }\n"}
    - {feedback: '

        Cette exception n''est pas hors contrôle.

        ', text: ".. code-block:: java\n\n   public class GraveException extends Exception\
        \ {\n       public GraveException(String msg) {\n           super(msg);\n\
        \       }\n   }\n"}
    - {feedback: '

        Pour que ce soit une exception il faut définir une sous-classe de ``Throwable``.

        ', text: ".. code-block:: java\n\n   public class GraveException {\n     \
        \  public GraveException(String msg) {\n           super(msg);\n       }\n\
        \   }\n"}
    - {feedback: '

        L''utilisation de ``throw`` n''a pas de sens ici.

        ', text: ".. code-block:: java\n\n   public class GraveException extends RuntimeException\
        \ {\n       public GraveException(String msg) {\n           throw new GraveException(msg);\n\
        \       }\n   }\n"}
    header: '

      Parmi les définitions suivantes, laquelle définit correctement une exception
      hors contrôle (unchecked) ?

      '
    limit: 3
    name: Définition d'exceptions
    type: multiple_choice
  q6:
    choices:
    - {text: '``List<T>`` est une interface qui représente une séquence ordonnée d''éléments
        de type ``T``.  ``ArrayList<T>`` et ``LinkedList<T>`` sont des implémentations
        de ``List<T>``, basées respectivement sur des tableaux et sur des structures
        chaînées.

        ', valid: true}
    - {feedback: '

        ``List<T>`` est une interface.

        ', text: '``List<T>`` est une classe qui représente une séquence ordonnée
        d''éléments de type ``T``.  ``ArrayList<T>`` et ``LinkedList<T>`` sont des
        extensions de ``List<T>``, basées respectivement sur des tableaux et sur des
        structures chaînées.

        '}
    - {feedback: '

        ``List<T>`` ne représente pas un ensemble mais une séquence ordonnée.

        ', text: '``List<T>`` est une interface qui représente un ensemble d''éléments
        de type ``T``.  ``HashList<T>`` et ``LinkedList<T>`` sont des implémentations
        de ``List<T>``, basées respectivement sur des tables de hachage et sur des
        liens hypertexte.

        '}
    - {feedback: '

        ``T`` est le type des éléments et non la taille de la séquence.

        ', text: '``List<T>`` est une classe qui représente une séquence ordonnée
        d''``Object`` de taille ``T``.  ``ArrayList<T>`` et ``LinkedList<T>`` sont
        des extensions de ``List<T>``, basées respectivement sur des tableaux et sur
        des structures chaînées.

        '}
    - {feedback: '

        ``HashList<T>`` n''existe pas dans les collections Java.

        ', text: '``List<T>`` est une interface qui représente un ensemble d''éléments
        de type ``T``.  ``HashList<T>`` et ``LinkedList<T>`` sont des implémentations
        de ``List<T>``, basées respectivement sur des tables de hachage et sur des
        structures chaînées.

        '}
    header: '

      Quel groupe d''affirmations est correct ?

      '
    limit: 3
    name: Les collections Java
    type: multiple_choice
  q7:
    choices:
    - {text: ".. code-block:: java\n\n   import java.util.*;\n   ...\n   List<String>\
        \ list = new ArrayList<String>();\n   list.add(\"Hello\");\n   String s1 =\
        \ \"World\";\n   list.add(s1);\n   int i = list.indexOf(\"Hello\");\n   String\
        \ s2 = list.get(i);\n", valid: true}
    - {feedback: '

        ``list.add(s1)`` provoque une erreur de type et le type-cast à la dernière
        ligne est incorrect.

        ', text: ".. code-block:: java\n\n   import java.util.*;\n   ...\n   List<String>\
        \ list = new ArrayList<String>[10];\n   list.add(\"Hello\");\n   Object s1\
        \ = \"World\";\n   list.add(s1);\n   int i = list.indexOf(\"Hello\");\n  \
        \ String s2 = (String) list.get(i);\n"}
    - {feedback: '

        ``ArrayLsit`` n''est pas un tableau ; ``list[i]`` est syntaxiquement incorrect.

        ', text: ".. code-block:: java\n\n   import java.util.*;\n   ...\n   List<String>\
        \ list = new ArrayList<String>[10];\n   list[0] = \"Hello\";\n   String s1\
        \ = \"World\";\n   list[1] = s1;\n   int i = list.indexOf(\"Hello\");\n  \
        \ String s2 = list[i];\n"}
    - {feedback: '

        Le paramètre de type ``<T>`` doit être un type particulier existant, ici ``<String>``.

        ', text: ".. code-block:: java\n\n   import java.util.*;\n   ...\n   List<T>\
        \ list = new ArrayList();\n   list.add(\"Hello\");\n   String s1 = \"World\"\
        ;\n   list.add(s1);\n   int i = list.indexOf(\"Hello\");\n   String s2 = list.get(i);\n"}
    - {feedback: '

        ``add`` est une méthode de ``list``.

        ', text: ".. code-block:: java\n\n   import java.util.*;\n   ...\n   List<String>\
        \ list = new ArrayList<String>[10];\n   add(list, \"Hello\");\n   String s1\
        \ = \"World\";\n   add(list, s1);\n   int i = list.indexOf(\"Hello\");\n \
        \  String s2 = list.get(i);\n"}
    header: '

      Parmi les fragments de progamme suivants, lequel utilise correctement la classe
      ``ArrayList<T>`` ?

      '
    limit: 3
    name: ArrayList<T>
    type: multiple_choice
  q8:
    choices:
    - {text: ".. code-block:: java\n\n   List<Integer> list = makeList();  // crée\
        \ la liste\n   Iterator<Integer> iter = list.iterator();\n   while (iter.hasNext())\
        \ {\n       Integer i = iter.next();\n       System.out.println(i);\n   }\n",
      valid: true}
    - {feedback: '

        ``list`` n''est pas un itérateur.

        ', text: ".. code-block:: java\n\n   List<Integer> list = makeList();  //\
        \ crée la liste\n   while (list.hasNext()) {\n       Integer i = list.next();\n\
        \       System.out.println(i);\n   }\n"}
    - {feedback: '

        Erreur de typage, utiliser un type générique pour ``iter``.

        ', text: ".. code-block:: java\n\n   List<Integer> list = makeList();  //\
        \ crée la liste\n   Iterator iter = list.iterator();\n   while (iter.hasNext())\
        \ {\n       Integer i = iter.next();\n       System.out.println(i);\n   }\n"}
    - {feedback: '

        ``hasNext`` et ``next`` sont des méthodes de ``iter``.

        ', text: ".. code-block:: java\n\n   List<Integer> list = makeList();  //\
        \ crée la liste\n   Iterator<Integer> iter = list.iterator();\n   while (hasNext(iter))\
        \ {\n       Integer i = next(iter);\n       System.out.println(i);\n   }\n"}
    - {feedback: '

        Le type-cast est inutile, ``iter.next`` retourne un ``Integer``.

        ', text: ".. code-block:: java\n\n   List<Integer> list = makeList();  //\
        \ crée la liste\n   Iterator<Integer> iter = list.iterator();\n   while (iter.hasNext())\
        \ {\n       Integer i = (Integer) iter.next();\n       System.out.println(i);\n\
        \   }\n"}
    - {feedback: '

        Le test de boucle est incorrect.

        ', text: ".. code-block:: java\n\n   List<Integer> list = makeList();  //\
        \ crée la liste\n   Iterator<Integer> iter = list.iterator();\n   while (iter.next()\
        \ != null) {\n       Integer i = iter.next();\n       System.out.println(i);\n\
        \   }\n"}
    header: '

      Parmi les fragments suivants, lequel utilise correctement un itérateur ?

      '
    limit: 3
    name: Itérateurs
    type: multiple_choice
