#!/usr/bin/python2
# -*- coding: utf-8 -*-
from os import listdir, system
import zipfile 
import inginiousUtils
import time
import os
import subprocess

# changer : le truc rajouté par les écrivains du script
#			hidden until
#			ajouter subprocess
#			modifier run.sh
#			enlever l'heure dans la deadline

os.environ['TZ'] = 'Europe/Brussels'

# Variable to modify. Contains the deadline after which the script has to deliver the results of the complete test of the mission.
# Before the deadline, the script will only verify if the right files are in the ZIP archive.

# Variable à modifier. Contient la deadline après laquelle le script doit fournir les résultats du test complet de la mission.
# Avant cette deadline, le script affichera uniquement si les bons fichiers sont présents dans l'archive ZIP.

#           jj/mm/aaaa
deadline = "10/10/2015"

temps_deadline = time.strptime(deadline, "%d/%m/%Y")

# Verify the file content
system('getinput "q1" > basicSubmission.zip')

#totalPoints = 0
#maxPoints = 5

output = ""#".. role:: bash(code)\n\t:language: bash\n\n"

title1 = "Testing content of archive"
output += inginiousUtils.get_rst_title(title1) + "\n\n"

expectedFiles = ['LibMath.java', 'README.TXT']

unzipOutput = inginiousUtils.extract_zip_content('basicSubmission.zip', expectedFiles)

if (unzipOutput):
    output += unzipOutput
    output += "\n**Archive Content: 0/1**"
    system('archive -a build.manifest')
    system('feedback --result failed --feedback "' + output + '"')
    exit(0)
else:
    system('sh custom.sh')
    try:
    	subprocess.check_output("javac -cp .:/usr/share/java/junit.jar:/usr/share/java/hamcrest-core.jar student/*.java", stderr = subprocess.STDOUT, shell = True)
    	output += "Your archive has the correct content.\n"
    	output += "\n**Archive content: 1/1**"
    	system('feedback --result success --feedback "' + output + '"')
    except subprocess.CalledProcessError, e:
        output += "There are some compilation errors with your program :\n::\n\n"
        #system("echo \""+e.output+"\" > outjavac.log")
        sp = subprocess.Popen(["sed", "-e", "s/^/\\t/"], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    	output += sp.communicate(e.output)[0]
    	sp = subprocess.Popen(["feedback", "--result", "failed", "--feedback", output])
    	exit(1)
    # On lance le feedback complet
    system('sh run.sh')
    if (os.stat("feedback.out").st_size != 0):
    	output += "\n\n.. hidden-until:: \"" + deadline + "\"\n\n"
    	system('echo "' + output + '" > feed1')
    	system('sed -e \'s/^/\\t/\' < feedback.out > feedback2.out')
    	output2 = subprocess.check_output("cat feed1 feedback2.out", shell = True)
    	system("feedback -i q1 --result success --feedback \"" + output2 + "\"")
    	system("feedback --result success --feedback \" \" ")
    else:
        output += "\n\n.. hidden-until:: \"" + deadline + "\"\n\n"
    	system('echo "' + output + '" > feed1')
        system('echo "Bravo, les tests se sont bien passés !" > feedback.out')
    	system('sed -e \'s/^/\\t/\' < feedback.out > feedback2.out')
    	output2 = subprocess.check_output("cat feed1 feedback2.out", shell = True)
        system("feedback -i q1 --result success --feedback \"" + output2 + "\"")
    	system("feedback --result success --feedback \" \" ")
