accessible: 2016-12-14 08:00:00/2017-09-20 16:00:00
author: 'Munyabarenzi Clémentine Zaninka (ressource : syllabus d''exercices SINF1101)'
context: 'A la suite de l''écriture de la classe ``DListTest`` faite aux questions
  précédentes, vous avez réussi à découvrir à l''aide de JUnit l''erreur contenue
  dans la classe testée. Soumettez pour finir une version corrigée de cette classe
  ``DList``.


  **Attention, vous devez soumettre la classe DList entière avec exactement les mêmes
  attributs et les mêmes méthodes. Seul le corps des méthodes et les valeurs des attributs
  peuvent être différents.**'
environment: java7
groups: false
limits: {memory: '100', output: '2', time: '30'}
name: 'Mission 11 : Question de Démarrage 3 : JUnit (partie3) une DList correcte'
network_grading: false
order: 178
problems:
  q1: {header: "Rappel de la classe ``DList`` à corriger:\n\n.. code-block :: java\n\
      \n    class DList\n    {\n        List<Double> l;\n\n        /**\n         *\
      \ @pre\n         * @post a construit une liste initialement vide\n         */\n\
      \        public DList()\n        {\n            l=new LinkedList<Double>();\n\
      \        }\n\n        /**\n         * @pre d!=null\n         * @post a ajout\
      \ le Double d dans la liste\n         */\n        public void add(Double d)\n\
      \        {\n            assert d!=null;\n            l.add(d);\n        }\n\
      \        /**\n         * @pre d!=null\n         * @post retourne true si d se\
      \ trouvait dans la liste et false sinon\n         *       a retire de la liste\
      \ toutes les instances de Double egales\n         *       a d\n         */\n\
      \        public boolean remove(Double d)\n        {\n            assert d!=null;\n\
      \            int i=l.indexOf(d);\n            if(i>=0)\n            {\n    \
      \            Double d1=l.remove(i);\n                return true;\n        \
      \    }\n            else\n            {\n                return false;\n   \
      \         }\n        }\n\n        /**\n         * @pre d!=null\n         * @post\
      \ retourne true si d se trouve dans la liste et false sinon\n         */\n \
      \       public boolean contains(Double d)\n        {\n            return l.contains(d);\n\
      \        }\n\n        /**\n         * @pre -\n         * @post retourne le nombre\
      \ de Double se trouvant dans la liste\n         */\n        public int size()\n\
      \        {\n            return l.size();\n        }\n    }\n", language: java,
    name: '', type: code}
weight: 1.0
