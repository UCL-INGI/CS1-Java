accessible: true
author: Olivier BONAVENTURE
environment: default
limits:
    memory: '100'
    output: '2'
    time: '30'
name: 'Mission 6: QCM'
context: |
    ============================
    Mission 6. Classes et Objets
    ============================


    Ces questions supposent que vous avez lu les sections suivantes du livre de référence |jn|_

      - |jn5.1|_

        - |jn5.1.1|_
        - |jn5.1.2|_
        - |jn5.1.3|_

      - |jn5.2|_

        - |jn5.2.1|_
        - |jn5.2.2|_
        - |jn5.2.3|_

      - |jn5.4|_

        - |jn5.4.1|_
        - |jn5.4.2|_
        - |jn5.4.3|_

    ainsi que l'API de la classe |TextIO|_.  Les sections vues précédemment restent bien entendu d'actualité.

    .. _jn: http://math.hws.edu/javanotes/
    .. |jn| replace:: JavaNotes

    .. _jn5.1 : http://math.hws.edu/javanotes/c5/s1.html
    .. |jn5.1| replace:: `5.1 : Objects, Instance Methods, and Instance Variables`

    .. _jn5.1.1 : http://math.hws.edu/javanotes/c5/s1.html#OOP.1.1
    .. |jn5.1.1| replace:: `5.1.1 : Objects, Classes, and Instances`

    .. _jn5.1.2 : http://math.hws.edu/javanotes/c5/s1.html#OOP.1.2
    .. |jn5.1.2| replace:: `5.1.2 : Fundamentals of Objects`

    .. _jn5.1.3 : http://math.hws.edu/javanotes/c5/s1.html#OOP.1.3
    .. |jn5.1.3| replace:: `5.1.3 : Getters and Setters`

    .. _jn5.2 : http://math.hws.edu/javanotes/c5/s2.html
    .. |jn5.2| replace:: `5.2 : Constructors and Object Initialization`

    .. _jn5.2.1 : http://math.hws.edu/javanotes/c5/s2.html#OOP.2.1
    .. |jn5.2.1| replace:: `5.2.1 : Initializing Instance Variables`

    .. _jn5.2.2 : http://math.hws.edu/javanotes/c5/s2.html#OOP.2.2
    .. |jn5.2.2| replace:: `5.2.2 : Constructors`

    .. _jn5.2.3 : http://math.hws.edu/javanotes/c5/s2.html#OOP.2.3
    .. |jn5.2.3| replace:: `5.2.3 : Garbage Collection`

    .. _jn5.4 : http://math.hws.edu/javanotes/c5/s4.html
    .. |jn5.4| replace:: `5.4 : Programming Example: Card, Hand, Deck`

    .. _jn5.4.1 : http://math.hws.edu/javanotes/c5/s4.html#OOP.4.1
    .. |jn5.4.1| replace:: `5.4.1 : Designing the classes`

    .. _jn5.4.2 : http://math.hws.edu/javanotes/c5/s4.html#OOP.4.2
    .. |jn5.4.2| replace:: `5.4.2 : The Card Class`

    .. _jn5.4.3 : http://math.hws.edu/javanotes/c5/s4.html#OOP.4.3
    .. |jn5.4.3| replace:: `5.4.3 : Example: A Simple Card Game`

    .. _TextIO : http://math.hws.edu/eck/cs124/javanotes6/source/TextIO.java
    .. |TextIO| replace:: ``TextIO``
problems:
    q1:
        limit: 3
        name: Classe, objets et instances
        type: multiple-choice
        header: |4

            Soit le code Java suivant

            .. code-block:: java

                public class PairOfDice {

                    public int die1;   // Number showing on the first die.
                    public int die2;   // Number showing on the second die.

                    /**
                     * @pre val1, val2 are valid die values
                     * @post creates a pair of dice that are initially
                     *       showing the values val1 and val2.
                     */
                    public PairOfDice(int val1, int val2) {
                         die1 = val1;
                         die2 = val2;
                    }

                    /**
                     * @pre -
                     * @post rolled the dice by setting each of the dice
                     *       to be a random number between 1 and 6.
                     */
                    public void roll() {
                         die1 = (int)(Math.random()*6) + 1;
                         die2 = (int)(Math.random()*6) + 1;
                    }

                } // end class PairOfDice

            Laquelle des propositions ci-dessous est correcte ?
        choices:
        -   valid: true
            text: |4

                * Ce code définit une classe ``PairOfDice``.
                * Chaque instance de ``PairOfDice`` a sa propre copie de ``die1``.
                * ``roll()`` est une méthode d'instance de la classe ``PairOfDice``.
        -   valid: true
            text: |4

                * Une instance de ``PairOfDice`` est un objet.
                * ``die1`` est une variable d'instance de la classe ``PairOfDice``.
                * L'effet de l'exécution de la méthode ``roll()`` dépend de l'instance à laquelle elle s'applique.
        -   text: |4

                * Ce code définit un objet ``PairOfDice``.
                * ``die1`` est une variable d'instance de la classe ``PairOfDice``.
                * ``roll()`` est une méthode d'instance de la classe ``PairOfDice``.
            feedback: |4

                Ce code définit une *classe*, pas un objet.
        -   text: |4

                * Une instance de ``PairOfDice`` est un objet.
                * ``die1`` est une variable partagée entre les instances de ``PairOfDice``.
                * ``roll()`` est une méthode d'instance de la classe ``PairOfDice``.
            feedback: |4

                ``die1`` est une variable d'instance, elle n'est pas partagée.
        -   text: |4

                * Une instance de ``PairOfDice`` est un objet.
                * Chaque instance de ``PairOfDice`` a sa propre copie de ``die1``.
                * ``roll()`` est une méthode de classe de la classe ``PairOfDice``.
            feedback: |4

                ``roll()`` est une méthode d'instance.
        -   text: |4

                * Une instance de ``die1`` est un entier.
                * Chaque instance de ``PairOfDice`` a sa propre copie de ``die1``.
                * L'effet de l'exécution de la méthode ``roll()`` dépend de l'instance à laquelle elle s'applique.
            feedback: |4

                La notion d'instance s'applique aux classes et aux objets, pas aux variables.
        -   text: |4

                * Ce code définit une classe ``PairOfDice``.
                * ``die1`` est une variable locale de la classe ``PairOfDice``.
                * L'effet de l'exécution de la méthode ``roll()`` dépend de l'instance à laquelle elle s'applique.
            feedback: |4

                Une variable locale est définie à l'intérieur du corps d'une méthode.
        -   text: |4

                * Une instance de ``PairOfDice`` est un objet.
                * ``die1`` est une variable d'instance de la classe ``PairOfDice``.
                * L'effet de l'exécution de la méthode ``roll()`` est indépendant de l'instance à laquelle elle s'applique.
            feedback: |4

                ``roll()`` est une méthode d'instance et utilise les variables d'instance de la classe.
    q2:
        limit: 3
        name: Définition de classe
        type: multiple-choice
        header: |4

            Laquelle des définitions suivantes définit correctement une classe dont les instances représentent des fractions (num / den), telle que les instructions

            .. code-block:: java

              Fraction f = new Fraction(3,4);
              System.out.println(f.valeur());

            imprime le résultat ``0.75``  ?
        choices:
        -   valid: true
            text: |
                .. code-block:: java

                   public class Fraction {
                       private int num;  // numérateur
                       private int den;  // dénominateur

                       public Fraction(int n, int d) {
                           num = n;
                           den = d;
                       }

                       public double valeur() {
                           return ((double) num) / ((double) den);
                       }
                   }
        -   text: |
                .. code-block:: java

                   public class Fraction {
                       private int num;  // numérateur
                       private int den;  // dénominateur

                       public Fraction(int n, int d) {
                           num = n;
                           den = d;
                       }

                       public static double valeur() {
                           return ((double) num) / ((double) den);
                       }
                   }
            feedback: |4

                La méthode ``valeur`` doit être une méthode d'instance, pour avoir accès aux variables d'instance de chaque instance de ``Fraction``.
        -   text: |
                .. code-block:: java

                   public class Fraction {
                       private int num;  // numérateur
                       private int den;  // dénominateur

                       public void Fraction(int n, int d) {
                           num = n;
                           den = d;
                       }

                       public double valeur() {
                           return ((double) num) / ((double) den);
                       }
                   }
            feedback: |4

                La signature du constructeur est incorrecte.
        -   text: |
                .. code-block:: java

                   public class Fraction {
                       private int num;  // numérateur
                       private int den;  // dénominateur

                       public Fraction(int n, int d) {
                           new Fraction(n,d);
                           num = n;
                           den = d;
                       }

                       public double valeur() {
                           return ((double) num) / ((double) den);
                       }
                   }
            feedback: |4

                La construction 'new Fraction(n,d)' fait appel au constructeur, elle ne doit pas se trouver dans la définition de ce constructeur.
        -   text: |
                .. code-block:: java

                   public class Fraction {
                       private int num = 0;  // numérateur
                       private int den = 1;  // dénominateur

                       public Fraction(int n, int d) {
                           num = n;
                           den = d;
                       }

                       public double valeur(Fraction f) {
                           return ((double) num) / ((double) den);
                       }
                   }
            feedback: |4

                Dans ``valeur``, il n'est pas nécessaire de passer la fraction comme paramètre.
    q3:
        limit: 3
        name: Initialisation d'objets
        type: multiple-choice
        header: |4+

            Sur base de la définition de la question précédente, que se passe-t-il si on tente de compiler et d'exécuter (séparément) les trois suites d'instructions suivantes ?

            1.

            .. code-block:: java

                Fraction f;
                System.out.println(f.valeur());

            2.

            .. code-block:: java

                Fraction f = new Fraction(3, 4);
                System.out.println(f.valeur());

            3.

            .. code-block:: java

                Fraction f = null;
                System.out.println(f.valeur());

        choices:
        -   valid: true
            text: |4

                1. Erreur à l'exécution: ``f`` est une référence nulle
                2. Imprime "0.75"
                3. Erreur à l'exécution: ``f`` est une référence nulle
        -   text: |4

                1. Imprime "0.0"
                2. Imprime "0.75"
                3. Erreur à l'exécution: ``f`` est une référence nulle
            feedback: |4

                Dans le cas 1, ``f`` n'est pas initialisé donc ne référencie aucun objet.
        -   text: |4

                1. Erreur à l'exécution: ``f`` est une référence nulle
                2. Imprime "0.75"
                3. Imprime "0.0"
            feedback: |4

                La référence ``null`` ne référencie aucun objet, le cas 3 est identique au cas 1.
        -   text: |4

                1. Erreur de compilation
                2. Imprime "0.75"
                3. Erreur de compilation
            feedback: |4

                Les trois sont corrects par rapport à la syntaxe et aux types, la compilation ne pose pas de problème.
        -   text: |4

                1. Imprime "0.0"
                2. Imprime "0.75"
                3. Imprime "0.0"
            feedback: |4

                Dans les cas 1 et 3, ``f`` ne référencie aucun objet.
    q4:
        limit: 3
        name: Accesseurs et mutateurs
        type: multiple-choice
        header: |4

            Comment définirait-on un accesseur (getter) et un mutateur (setter) pour la variable d'instance ``num`` de la classe ``Fraction`` à la question 2, tels qu'utilisés dans l'exemple suivant

            .. code-block:: java

              Fraction f = new Fraction(3, 4);
              System.out.println(f.getNum());  // imprime "3"
              f.setNum(5);
              System.out.println(f.getNum());  // imprime "5"
        choices:
        -   valid: true
            text: |
                .. code-block:: java

                   public int getNum() {
                       return num;
                   }
                   public void setNum(int n) {
                       num = n;
                   }
        -   text: |
                .. code-block:: java

                   public int getNum() {
                       System.out.println(num);
                   }
                   public void setNum() {
                       num = TextIO.getInt();
                   }
            feedback: |4

                Il s'agit de permettre au reste du programme de lire et modifier la variable, pas à l'utilisateur.
        -   text: |
                .. code-block:: java

                   public void getNum(int n) {
                       n = num;
                   }
                   public void setNum(int n) {
                       num = n;
                   }
            feedback: |4

                La méthode ``getNum()`` ne sert à rien tel que définie ici.
        -   text: |
                .. code-block:: java

                   public int getNum() {
                       return num;
                   }
                   public int setNum(int n) {
                       num = n;
                       return num;
                   }
            feedback: |4

                Dans ``setNum()``, pourquoi retourner la valeur modifiée?
        -   text: |
                .. code-block:: java

                   public int f1() {
                       return num;
                   }
                   public void f2(int n) {
                       num = n;
                   }
            feedback: |4

                Ceci peut fonctionner, mais pourquoi prendre des noms de méthode qui ne signifient rien et violent les conventions usuelles ?  La lisibilité du code est un facteur de qualité important.
    q5:
        limit: 3
        name: Constructeurs
        type: multiple-choice
        header: |4

            Soit la classe suivante

            .. code-block:: java

                public class Etudiant {
                    String nom;
                    String matricule;
                    boolean bisseur = false;

                    // ... méthodes
                }

            Parmi les définitions de constructeurs suivantes, laquelle est correcte ?
        choices:
        -   valid: true
            text: |
                .. code-block:: java

                   // un étudiant non-bisseur
                   public Etudiant(String n, String m) {
                       nom = n;
                       matricule = m;
                   }
        -   valid: true
            text: |
                .. code-block:: java

                   // un étudiant anonyme
                   public Etudiant(String m, boolean b) {
                       nom = "[anonyme]";
                       matricule = m;
                       bisseur = b;
                   }
        -   text: |
                .. code-block:: java

                   // un étudiant bisseur
                   public Bisseur(String n, String m) {
                       nom = n;
                       matricule = m;
                       bisseur = true;
                   }
            feedback: |4

                Le constructeur doit avoir le nom de la classe.
        -   text: |
                .. code-block:: java

                   // un étudiant sans matricule
                   public static Etudiant(String n, boolean b) {
                       nom = n;
                       matricule = "000000";
                       bisseur = b;
                   }
            feedback: |4

                Un constructeur ne peut pas être déclaré ``static``.
        -   text: |
                .. code-block:: java

                   // un étudiant anonyme
                   public Etudiant(String m) {
                       matricule = m;
                       bisseur = false;
                   }
            feedback: |4

                La variable ``nom`` n'est pas initialisée.
        -   text: |
                .. code-block:: java

                   // un étudiant non-bisseur
                   public Etudiant(String n, String m) {
                       nom = n;
                       matricule = m;
                       return;
                   }
            feedback: |4

                L'instruction ``return`` est superflue et interdite dans un constructeur.
    q6:
        limit: 3
        name: Références
        type: multiple-choice
        header: |4

            Soit la classe ``Compteur`` suivante

            .. code-block:: java

                public class Compteur {
                    private int compte;  // le compteur

                    public Compteur(int n) {
                        compte = n;
                    }

                    public void ajout(int n) {
                        compte = compte + n;
                    }

                    public int valeur() {
                        return compte;
                    }
                }

            Qu'imprime le programme suivant

            .. code-block:: java

                    Compteur c1 = new Compteur(10);
                    Compteur c2 = new Compteur(20);
                    c1.ajout(5);
                    System.out.println(c1.valeur() + "," + c2.valeur());
                    c1.ajout(10);
                    c1 = c2;
                    c2.ajout(20);
                    System.out.println(c1.valeur() + "," + c2.valeur());
                    c2 = new Compteur(0);
                    System.out.println(c1.valeur() + "," + c2.valeur());
        choices:
        -   valid: true
            text: |
                .. code-block:: java

                   15,20
                   40,40
                   40,0
        -   text: |
                .. code-block:: java

                   15,20
                   20,40
                   20,0
            feedback: |4

                Après l'instruction ``c1 = c2``, ``c1`` et ``c2`` sont des références au même objet; ``c2.ajout(20)`` agit aussi sur l'objet référencé par ``c1``.
        -   text: |
                .. code-block:: java

                   15,20
                   40,40
                   0,0
            feedback: |4

                Après ``c2 = new Compteur(0)``, seule ``c2`` réfère au nouvel objet créé; ``c1`` est inchangé.
        -   text: |
                .. code-block:: java

                   15,20
                   25,40
                   25,0
            feedback: |4

                Attention à l'instruction ``c1 == c2``.
        -   text: |
                .. code-block:: java

                   10,20
                   20,20
                   20,0
            feedback: |4

                Que fait la méthode ``ajout()`` ?
    q7:
        limit: 3
        name: toString()
        type: multiple-choice
        header: |4+

            Comment écrirait-on une méthode pour la classe ``Etudiant`` de la question 5, telle que le code suivant

            .. code-block:: java

                Etudiant etud = new Etudiant("John Doe", "987612");
                System.out.println(etud);

            affiche le texte suivant :

                ``John Doe (987612) non-bisseur``

        choices:
        -   valid: true
            text: |
                .. code-block:: java

                       public String toString() {
                           String s = nom + " (" + matricule + ")";
                           if (bisseur) {
                               s = s + " bisseur";
                           } else {
                               s = s + " non-bisseur";
                           }
                           return s;
                       }
        -   text: |
                .. code-block:: java

                       public String asString() {
                           String s = nom + " (" + matricule + ")";
                           if (bisseur) {
                               s = s + " bisseur";
                           } else {
                               s = s + " non-bisseur";
                           }
                           return s;
                       }
            feedback: |4

                La méthode doit s'appeler ``toString`` pour pouvoir être appelée implicitement, par exemple dans ``System.out.println``.
        -   text: |
                .. code-block:: java

                       public String toString(String s) {
                           s = nom + " (" + matricule + ")";
                           if (bisseur) {
                               s = s + " bisseur";
                           } else {
                               s = s + " non-bisseur";
                           }
                           return s;
                       }
            feedback: |4

                La méthode doit avoir exactement la signature ``String toString()`` pour pouvoir être appelée implicitement, par exemple dans ``System.out.println``.
        -   text: |
                .. code-block:: java

                       public String toString() {
                           return nom + " (" + matricule + ")";
                           if (bisseur) {
                               return " bisseur";
                           } else {
                               return " non-bisseur";
                           }
                       }
            feedback: |4

                Seul le premier ``return`` exécuté sera pris en compte.  Révisez les appels de méthodes.
        -   text: |
                .. code-block:: java

                       public String toString() {
                           System.out.println(nom + " (" + matricule + ")";
                           if (bisseur) {
                               System.out.println(" bisseur");
                           } else {
                               System.out.println(" non-bisseur");
                           }
                       }
            feedback: |4

                La méthode ``toString()`` doit retourner le string et non l'imprimer.
        -   text: |
                .. code-block:: java

                       public String toString() {
                           String s = nom + " (" + matricule + ")";
                           if (bisseur) {
                               s = s + " bisseur";
                           } else {
                               s = s + " non-bisseur";
                           }
                       }
            feedback: |4

                Cette méthode ne retourne rien...
    q8:
        limit: 3
        name: ' TextIO'
        type: multiple-choice
        header: |4

            Parmi les portions de programme suivantes, laquelle permet d'imprimer à la console le contenu du fichier ``README`` ?
        choices:
        -   valid: true
            text: |
                .. code-block:: java

                   TextIO.readFile("README");
                   while (!TextIO.eof()) {
                       System.out.println(TextIO.getln());
                   }
        -   text: |
                .. code-block:: java

                   TextIO.readFile("README");
                   while (true) {
                       System.out.println(TextIO.getln());
                   }
            feedback: |4

                Cette version produira une erreur à la fin du fichier.
        -   text: |
                .. code-block:: java

                   while (!TextIO.eof("README")) {
                       System.out.println(TextIO.getln("README"));
                   }
            feedback: |4

                L'utilisation de ``eof()`` et ``getln()`` ne correspond pas à leur signature documentée dans l'API.  Ce code donne donne une erreur de compilation.
        -   text: |
                .. code-block:: java

                   TextIO.open("README");
                   while (TextIO.hasNext()) {
                       System.out.println(TextIO.next());
                   }
            feedback: |4

                Ces noms de méthodes n'existent pas dans ``TextIO``.
        -   text: |
                .. code-block:: java

                   TextIO.readFile("README");
                   while (TextIO.eof()) {
                       System.out.println(TextIO.getWord());
                   }
            feedback: |4

                Deux erreurs: un caractère manquant (qui change tout) dans la condition du ``while`` et l'utilisation inappropriée de ``getWord()``.
        -   text: |
                .. code-block:: java

                   TextIO.readFile("README");
                   String s = TextIO.getln();
                   while (!TextIO.eof(s)) {
                       System.out.print(s);
                       s = TextIO.getln();
                   }
            feedback: |4

                Ce n'est pas ainsi qu'on utilise ``TextIO.eof()``.
weight: 1.0
order: 64
