# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-10-04 12:00+0200\n"
"PO-Revision-Date: 2017-09-14 08:08+0000\n"
"Last-Translator: Olivier MARTIN <olivier.martin@student.uclouvain.be>\n"
"Language-Team: none\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=n != 1;\n"
"X-Generator: Weblate 2.16\n"

#: utilities/run.py:165
msgid "La limite de mémoire de votre programme est dépassée"
msgstr "Se ha superado el límite de memoria de su programa"

#: utilities/run.py:168
msgid "La limite de temps d'exécution de votre programme est dépassée"
msgstr "Se ha superado el límite de tiempo de su programa"

#: utilities/run.py:173 utilities/run.py:191
#, fuzzy
msgid ""
"Il semble que vous ayiez fait des erreurs dans votre code…\n"
"\n"
msgstr "Parece que has cometido errores en tu código ...\n"

#: utilities/run.py:187
msgid "Vous avez bien répondu à cette question"
msgstr "Contestaste bien esta pregunta"

#: utilities/run.py:196
msgid "Le programme ne compile pas : \n"
msgstr "El programa no compila: \n"

#: utilities/run.py:204
msgid "Impossible de décoder le config.json"
msgstr "No se puede descodificar config.json"

#: m01Q10/src/Tests.java:33
#, java-format
msgid "{0} < {1} < {2} est {3} mais votre code indique {4}.\n"
msgstr "{0} <{1} <{2} es {3} pero su código dice {4}.\n"

#: m01Q10/src/Tests.java:54 m01Q11/src/Tests.java:52 m01Q12/src/Tests.java:55
#: m01Q13/src/Tests.java:54 m01Q14/src/Tests.java:52 m01Q15/src/Tests.java:63
#: m01Q16/src/Tests.java:50 m01Q17/src/Tests.java:67 m01Q18/src/Tests.java:56
#: m01Q2/src/Tests.java:86 m01Q20/src/Tests.java:70 m01Q3/src/Tests.java:59
#: m01Q4/src/Tests.java:54 m01Q5/src/Tests.java:50 m01Q6/src/Tests.java:49
#: m01Q7/src/Tests.java:49 m01Q8/src/Tests.java:54 m01Q9/src/Tests.java:77
#: m01_bf/src/Tests.java:49 m02Q1/src/Tests.java:46 m02Q10/src/Tests.java:52
#: m02Q3/src/Tests.java:68 m02Q4/src/Tests.java:50 m02Q5/src/Tests.java:49
#: m02Q6/src/Tests.java:47 m02Q7/src/Tests.java:50 m02Q8/src/Tests.java:74
#: m02Q9/src/Tests.java:46 m02_bf/src/Tests.java:49 m02dem2/src/Tests.java:57
#: m02dem3/src/Tests.java:62 m02dem4/src/Tests.java:49
#: m02dem5/src/Tests.java:88 m03Q1/src/Tests.java:81 m03Q2/src/Tests.java:55
#: m03Q3/src/Tests.java:57 m03Q4/src/Tests.java:61 m03Q5/src/Tests.java:55
#: m03Q6/src/Tests.java:54 m03Q7/src/Tests.java:54 m03_bf/src/Tests.java:56
#: m03dem2/src/Tests.java:63 m03dem3/src/Tests.java:51
#: m03dem4/src/Tests.java:78 m03dem5/src/Tests.java:49 m04Q1/src/Tests.java:57
#: m04Q10/src/Tests.java:52 m04Q11/src/Tests.java:51 m04Q2/src/Tests.java:52
#: m04Q3/src/Tests.java:58 m04Q4/src/Tests.java:145 m04Q5/src/Tests.java:60
#: m04Q6/src/Tests.java:64 m04Q7/src/Tests.java:61 m04Q8/src/Tests.java:59
#: m04Q9/src/Tests.java:52 m04_bf/src/Tests.java:70 m04dem1/src/Tests.java:74
#: m04dem2/src/Tests.java:73 m04dem3/src/Tests.java:67
#: m04dem4/src/Tests.java:61 m04dem5/src/Tests.java:89 m05Q1/src/Tests.java:64
#: m05Q10/src/Tests.java:66 m05Q11/src/Tests.java:70 m05Q12/src/TestsQ1.java:62
#: m05Q12/src/TestsQ2.java:58 m05Q2/src/Tests.java:65 m05Q3/src/Tests.java:64
#: m05Q4/src/Tests.java:63 m05Q5/src/Tests.java:54 m05Q6/src/Tests.java:59
#: m05Q7/src/Tests.java:71 m05Q8/src/Tests.java:79 m05Q9/src/Tests.java:65
#: m05_bf/src/Tests.java:92 m05dem1/src/Tests.java:95 m05dem2/src/Tests.java:71
#: m05dem3/src/Tests.java:56 m05dem4/src/Tests.java:175
#: m05dem5/src/Tests.java:101 m06Q1/src/TestCode.java:61
#: m06Q10/src/TestCode.java:110 m06Q11/src/TestParam.java:67
#: m06Q2/src/TestCode.java:102 m06Q3/src/TestCode.java:71
#: m06Q3/src/TestParam.java:66 m06Q4/src/TestCode.java:84
#: m06Q4/src/TestParam.java:64 m06Q5/src/TestCode.java:86
#: m06Q6/src/TestCode.java:77 m06Q6/src/TestParam.java:66
#: m06Q7/src/TestCode.java:87 m06Q8/src/TestCode.java:89
#: m06Q8/src/TestParam.java:74 m06Q9/src/TestCode.java:107
#: m06_bf/src/TestInspect.java:57 m06_bf/src/TestCode.java:58
#: m06dem1/src/TestCode.java:136 m06dem2/src/TestCode.java:268
#: m06dem3/src/TestCode.java:105 m06dem4/src/TestCode.java:116
#: m07Q1/src/TestParam.java:66 m07Q10/src/TestCode.java:49
#: m07Q11/src/TestParam.java:75 m07Q2/src/TestCode.java:101
#: m07Q3/src/TestParam.java:76 m07Q4/src/TestCode.java:48
#: m07Q5/src/TestCode.java:49 m07Q6/src/TestParam.java:69
#: m07Q7/src/TestCode.java:49 m07Q8/src/TestCode.java:50
#: m07Q9/src/TestCode.java:48 m07_bf/src/TestItem.java:62
#: m07_bf/src/TestCD.java:119 m07_bf/src/TestInspectCD.java:57
#: m07dem1/src/TestCode.java:172 m07dem2/src/TestCode.java:86
#: m08Q1/src/TestCode.java:50 m08Q2/src/TestCode.java:51
#: m08Q3/src/TestParam.java:67 m08Q4/src/TestAnd.java:75
#: m08Q4/src/TestGet.java:79 m08Q4/src/TestReset.java:78
#: m08Q4/src/TestRotate.java:74 m08Q4/src/TestSet.java:85
#: m08Q4/src/TestShift.java:74 m08Q4/src/TestConstruct.java:49
#: m08Q5/src/TestGet.java:74 m08Q5/src/TestReset.java:77
#: m08Q5/src/TestRotate.java:79 m08Q5/src/TestSet.java:77
#: m08Q5/src/TestShift.java:79 m08Q6/src/TestMax.java:65
#: m08Q6/src/TestMin.java:65 m08Q6/src/TestMoyenne.java:63
#: m08Q7/src/TestMax.java:64 m08Q7/src/TestMin.java:64
#: m08Q7/src/TestMoyenne.java:64 m08dem1/src/TestParam1.java:65
#: m08dem1/src/TestParam2.java:76 m08dem2/src/TestCode.java:61
#: m09Q1/src/TestParam.java:82 m09Q2/src/TestParam.java:80
#: m09Q3/src/TestCode.java:65 m09Q4/src/TestParam.java:67
#: m09Q4/src/TestCode.java:65 m09Q5/src/TestCode.java:56
#: m09Q6/src/TestCode.java:59 m09Q7/src/TestCode.java:61
#: m09_bf/src/TestErr.java:90 m09_bf/src/Tests.java:78
#: m09_bf/src/TestsException.java:88 m09dem1/src/TestParam.java:80
#: m09dem2/src/TestCode.java:62 m09dem2/src/TestRes.java:62
#: m10Q1/src/Tests.java:78 m10Q2/src/Tests.java:118 m10Q3/src/Tests.java:163
#: m10Q4/src/TestListAdd.java:107 m10Q4/src/TestListContains.java:106
#: m10Q4/src/TestListGet.java:106 m10Q4/src/TestListSet.java:94
#: m10dem1/src/Tests.java:162 m10dem1/src/TestOut.java:85
#: m10dem2/src/TestContenuFichier.java:135
#: m10dem2/src/TestValeurRetour.java:108 m11Q1/src/Tests.java:170
#: m11Q2/src/Tests.java:159 m11Q3/src/Tests.java:110 m11Q4/src/Tests.java:166
#: m11Q5/src/Tests.java:170 m11Q6/src/Tests.java:138 mX1Q19/src/Tests.java:110
msgid "Attention, il est interdit de diviser par zéro."
msgstr "Atención, se prohíbe dividir por cero."

#: m01Q10/src/Tests.java:56 m01Q11/src/Tests.java:54 m01Q12/src/Tests.java:57
#: m01Q13/src/Tests.java:56 m01Q14/src/Tests.java:54 m01Q15/src/Tests.java:65
#: m01Q16/src/Tests.java:52 m01Q17/src/Tests.java:69 m01Q18/src/Tests.java:58
#: m01Q2/src/Tests.java:88 m01Q20/src/Tests.java:72 m01Q3/src/Tests.java:61
#: m01Q4/src/Tests.java:56 m01Q5/src/Tests.java:52 m01Q6/src/Tests.java:51
#: m01Q7/src/Tests.java:51 m01Q8/src/Tests.java:56 m01Q9/src/Tests.java:79
#: m01_bf/src/Tests.java:51 m02Q1/src/Tests.java:48 m02Q10/src/Tests.java:54
#: m02Q3/src/Tests.java:70 m02Q4/src/Tests.java:52 m02Q5/src/Tests.java:51
#: m02Q6/src/Tests.java:49 m02Q7/src/Tests.java:52 m02Q8/src/Tests.java:76
#: m02Q9/src/Tests.java:48 m02_bf/src/Tests.java:51 m02dem2/src/Tests.java:59
#: m02dem3/src/Tests.java:64 m02dem4/src/Tests.java:51
#: m02dem5/src/Tests.java:90 m03Q1/src/Tests.java:83 m03Q2/src/Tests.java:57
#: m03Q3/src/Tests.java:59 m03Q4/src/Tests.java:63 m03Q5/src/Tests.java:57
#: m03Q6/src/Tests.java:56 m03Q7/src/Tests.java:56 m03_bf/src/Tests.java:58
#: m03dem2/src/Tests.java:65 m03dem3/src/Tests.java:53
#: m03dem4/src/Tests.java:80 m03dem5/src/Tests.java:51 m04Q1/src/Tests.java:59
#: m04Q10/src/Tests.java:54 m04Q11/src/Tests.java:53 m04Q2/src/Tests.java:54
#: m04Q3/src/Tests.java:60 m04Q4/src/Tests.java:147 m04Q5/src/Tests.java:62
#: m04Q6/src/Tests.java:66 m04Q7/src/Tests.java:63 m04Q8/src/Tests.java:61
#: m04Q9/src/Tests.java:54 m04_bf/src/Tests.java:72 m04dem1/src/Tests.java:76
#: m04dem2/src/Tests.java:75 m04dem3/src/Tests.java:69
#: m04dem4/src/Tests.java:63 m04dem5/src/Tests.java:91 m05Q1/src/Tests.java:66
#: m05Q10/src/Tests.java:68 m05Q11/src/Tests.java:72 m05Q12/src/TestsQ1.java:64
#: m05Q12/src/TestsQ2.java:60 m05Q2/src/Tests.java:67 m05Q3/src/Tests.java:66
#: m05Q4/src/Tests.java:65 m05Q5/src/Tests.java:56 m05Q6/src/Tests.java:61
#: m05Q7/src/Tests.java:73 m05Q8/src/Tests.java:81 m05Q9/src/Tests.java:67
#: m05_bf/src/Tests.java:94 m05dem1/src/Tests.java:97 m05dem2/src/Tests.java:73
#: m05dem3/src/Tests.java:58 m05dem4/src/Tests.java:177
#: m05dem5/src/Tests.java:103 m06Q1/src/TestCode.java:63
#: m06Q10/src/TestCode.java:112 m06Q11/src/TestParam.java:69
#: m06Q2/src/TestCode.java:104 m06Q3/src/TestCode.java:73
#: m06Q3/src/TestParam.java:68 m06Q4/src/TestCode.java:86
#: m06Q4/src/TestParam.java:66 m06Q5/src/TestCode.java:88
#: m06Q6/src/TestCode.java:79 m06Q6/src/TestParam.java:68
#: m06Q7/src/TestCode.java:89 m06Q8/src/TestCode.java:91
#: m06Q8/src/TestParam.java:76 m06Q9/src/TestCode.java:109
#: m06_bf/src/TestInspect.java:59 m06_bf/src/TestCode.java:60
#: m06dem1/src/TestCode.java:138 m06dem2/src/TestCode.java:270
#: m06dem3/src/TestCode.java:107 m06dem4/src/TestCode.java:118
#: m07Q1/src/TestParam.java:68 m07Q10/src/TestCode.java:51
#: m07Q11/src/TestParam.java:77 m07Q2/src/TestCode.java:103
#: m07Q3/src/TestParam.java:78 m07Q4/src/TestCode.java:50
#: m07Q5/src/TestCode.java:51 m07Q6/src/TestParam.java:71
#: m07Q7/src/TestCode.java:51 m07Q8/src/TestCode.java:52
#: m07Q9/src/TestCode.java:50 m07_bf/src/TestItem.java:64
#: m07_bf/src/TestCD.java:121 m07_bf/src/TestInspectCD.java:59
#: m07dem1/src/TestCode.java:174 m07dem2/src/TestCode.java:88
#: m08Q1/src/TestCode.java:52 m08Q2/src/TestCode.java:53
#: m08Q3/src/TestParam.java:69 m08Q4/src/TestAnd.java:77
#: m08Q4/src/TestGet.java:81 m08Q4/src/TestReset.java:80
#: m08Q4/src/TestRotate.java:76 m08Q4/src/TestSet.java:87
#: m08Q4/src/TestShift.java:76 m08Q4/src/TestConstruct.java:51
#: m08Q5/src/TestGet.java:76 m08Q5/src/TestReset.java:79
#: m08Q5/src/TestRotate.java:81 m08Q5/src/TestSet.java:79
#: m08Q5/src/TestShift.java:81 m08Q6/src/TestMax.java:67
#: m08Q6/src/TestMin.java:67 m08Q6/src/TestMoyenne.java:65
#: m08Q7/src/TestMax.java:66 m08Q7/src/TestMin.java:66
#: m08Q7/src/TestMoyenne.java:66 m08dem1/src/TestParam1.java:67
#: m08dem1/src/TestParam2.java:78 m08dem2/src/TestCode.java:64
#: m09Q1/src/TestParam.java:84 m09Q2/src/TestParam.java:82
#: m09Q3/src/TestCode.java:67 m09Q4/src/TestParam.java:69
#: m09Q4/src/TestCode.java:67 m09Q5/src/TestCode.java:58
#: m09Q6/src/TestCode.java:61 m09Q7/src/TestCode.java:63
#: m09_bf/src/TestErr.java:92 m09_bf/src/Tests.java:80
#: m09_bf/src/TestsException.java:90 m09dem1/src/TestParam.java:82
#: m09dem2/src/TestCode.java:65 m09dem2/src/TestRes.java:65
#: m10Q1/src/Tests.java:80 m10Q2/src/Tests.java:120 m10Q3/src/Tests.java:165
#: m10Q4/src/TestListAdd.java:109 m10Q4/src/TestListContains.java:108
#: m10Q4/src/TestListGet.java:108 m10Q4/src/TestListSet.java:96
#: m10dem1/src/Tests.java:164 m10dem1/src/TestOut.java:87
#: m10dem2/src/TestContenuFichier.java:137
#: m10dem2/src/TestValeurRetour.java:110 m11Q1/src/Tests.java:172
#: m11Q2/src/Tests.java:161 m11Q3/src/Tests.java:112 m11Q4/src/Tests.java:168
#: m11Q5/src/Tests.java:172 m11Q6/src/Tests.java:140 mX1Q19/src/Tests.java:112
msgid "Attention, certaines variables ont été mal castées !"
msgstr "Atención, algunas variables han sido mal fundidas!"

#: m01Q10/src/Tests.java:58 m01Q11/src/Tests.java:56 m01Q12/src/Tests.java:59
#: m01Q13/src/Tests.java:58 m01Q14/src/Tests.java:56 m01Q15/src/Tests.java:67
#: m01Q16/src/Tests.java:54 m01Q17/src/Tests.java:71 m01Q18/src/Tests.java:60
#: m01Q2/src/Tests.java:90 m01Q20/src/Tests.java:74 m01Q3/src/Tests.java:63
#: m01Q4/src/Tests.java:58 m01Q5/src/Tests.java:54 m01Q6/src/Tests.java:53
#: m01Q7/src/Tests.java:53 m01Q8/src/Tests.java:58 m01Q9/src/Tests.java:81
#: m01_bf/src/Tests.java:53 m02Q1/src/Tests.java:50 m02Q10/src/Tests.java:56
#: m02Q3/src/Tests.java:72 m02Q4/src/Tests.java:54 m02Q5/src/Tests.java:53
#: m02Q6/src/Tests.java:51 m02Q7/src/Tests.java:54 m02Q8/src/Tests.java:78
#: m02Q9/src/Tests.java:50 m02_bf/src/Tests.java:53 m02dem2/src/Tests.java:61
#: m02dem3/src/Tests.java:66 m02dem4/src/Tests.java:53
#: m02dem5/src/Tests.java:92 m03Q1/src/Tests.java:85 m03Q2/src/Tests.java:59
#: m03Q3/src/Tests.java:61 m03Q4/src/Tests.java:65 m03Q5/src/Tests.java:59
#: m03Q6/src/Tests.java:58 m03Q7/src/Tests.java:58 m03_bf/src/Tests.java:60
#: m03dem2/src/Tests.java:67 m03dem3/src/Tests.java:55
#: m03dem4/src/Tests.java:82 m03dem5/src/Tests.java:53 m04Q1/src/Tests.java:61
#: m04Q10/src/Tests.java:56 m04Q11/src/Tests.java:55 m04Q2/src/Tests.java:56
#: m04Q3/src/Tests.java:62 m04Q4/src/Tests.java:149 m04Q5/src/Tests.java:64
#: m04Q6/src/Tests.java:68 m04Q7/src/Tests.java:65 m04Q8/src/Tests.java:63
#: m04Q9/src/Tests.java:56 m04_bf/src/Tests.java:74 m04dem1/src/Tests.java:78
#: m04dem2/src/Tests.java:77 m04dem3/src/Tests.java:71
#: m04dem4/src/Tests.java:65 m04dem5/src/Tests.java:93 m05Q1/src/Tests.java:68
#: m05Q10/src/Tests.java:70 m05Q11/src/Tests.java:74 m05Q12/src/TestsQ1.java:66
#: m05Q12/src/TestsQ2.java:62 m05Q2/src/Tests.java:69 m05Q3/src/Tests.java:68
#: m05Q4/src/Tests.java:67 m05Q5/src/Tests.java:58 m05Q6/src/Tests.java:63
#: m05Q7/src/Tests.java:75 m05Q8/src/Tests.java:83 m05Q9/src/Tests.java:69
#: m05_bf/src/Tests.java:96 m05dem1/src/Tests.java:99 m05dem2/src/Tests.java:75
#: m05dem3/src/Tests.java:60 m05dem4/src/Tests.java:179
#: m05dem5/src/Tests.java:105 m06Q1/src/TestCode.java:65
#: m06Q10/src/TestCode.java:114 m06Q11/src/TestParam.java:71
#: m06Q2/src/TestCode.java:106 m06Q3/src/TestCode.java:75
#: m06Q3/src/TestParam.java:70 m06Q4/src/TestCode.java:88
#: m06Q4/src/TestParam.java:68 m06Q5/src/TestCode.java:90
#: m06Q6/src/TestCode.java:81 m06Q6/src/TestParam.java:70
#: m06Q7/src/TestCode.java:91 m06Q8/src/TestCode.java:93
#: m06Q8/src/TestParam.java:78 m06Q9/src/TestCode.java:111
#: m06_bf/src/TestInspect.java:61 m06_bf/src/TestCode.java:62
#: m06dem1/src/TestCode.java:140 m06dem2/src/TestCode.java:272
#: m06dem3/src/TestCode.java:109 m06dem4/src/TestCode.java:120
#: m07Q1/src/TestParam.java:70 m07Q10/src/TestCode.java:53
#: m07Q11/src/TestParam.java:79 m07Q2/src/TestCode.java:105
#: m07Q3/src/TestParam.java:80 m07Q4/src/TestCode.java:52
#: m07Q5/src/TestCode.java:53 m07Q6/src/TestParam.java:73
#: m07Q7/src/TestCode.java:53 m07Q8/src/TestCode.java:54
#: m07Q9/src/TestCode.java:52 m07_bf/src/TestItem.java:66
#: m07_bf/src/TestCD.java:123 m07_bf/src/TestInspectCD.java:61
#: m07dem1/src/TestCode.java:176 m07dem2/src/TestCode.java:90
#: m08Q1/src/TestCode.java:54 m08Q2/src/TestCode.java:55
#: m08Q3/src/TestParam.java:71 m08Q4/src/TestAnd.java:79
#: m08Q4/src/TestGet.java:83 m08Q4/src/TestReset.java:82
#: m08Q4/src/TestRotate.java:78 m08Q4/src/TestSet.java:89
#: m08Q4/src/TestShift.java:78 m08Q4/src/TestConstruct.java:53
#: m08Q5/src/TestGet.java:78 m08Q5/src/TestReset.java:81
#: m08Q5/src/TestRotate.java:83 m08Q5/src/TestSet.java:81
#: m08Q5/src/TestShift.java:83 m08Q6/src/TestMax.java:69
#: m08Q6/src/TestMin.java:69 m08Q6/src/TestMoyenne.java:67
#: m08Q7/src/TestMax.java:68 m08Q7/src/TestMin.java:68
#: m08Q7/src/TestMoyenne.java:68 m08dem1/src/TestParam1.java:69
#: m08dem1/src/TestParam2.java:80 m08dem2/src/TestCode.java:68
#: m09Q1/src/TestParam.java:86 m09Q2/src/TestParam.java:84
#: m09Q3/src/TestCode.java:69 m09Q4/src/TestParam.java:71
#: m09Q4/src/TestCode.java:69 m09Q5/src/TestCode.java:60
#: m09Q6/src/TestCode.java:63 m09Q7/src/TestCode.java:65
#: m09_bf/src/TestErr.java:94 m09_bf/src/Tests.java:82
#: m09_bf/src/TestsException.java:92 m09dem1/src/TestParam.java:84
#: m09dem2/src/TestCode.java:68 m09dem2/src/TestRes.java:68
#: m10Q1/src/Tests.java:82 m10Q2/src/Tests.java:122 m10Q3/src/Tests.java:167
#: m10Q4/src/TestListAdd.java:111 m10Q4/src/TestListContains.java:110
#: m10Q4/src/TestListGet.java:110 m10Q4/src/TestListSet.java:98
#: m10dem1/src/Tests.java:166 m10dem1/src/TestOut.java:89
#: m10dem2/src/TestContenuFichier.java:139
#: m10dem2/src/TestValeurRetour.java:112 m11Q1/src/Tests.java:174
#: m11Q2/src/Tests.java:163 m11Q3/src/Tests.java:114 m11Q4/src/Tests.java:170
#: m11Q5/src/Tests.java:174 m11Q6/src/Tests.java:142 mX1Q19/src/Tests.java:114
msgid ""
"Attention, vous tentez de lire en dehors des limites d'un String ! "
"(StringIndexOutOfBoundsException)"
msgstr ""
"Atención, intenta leer fuera de los límites de una cadena! "
"(StringIndexOutOfBoundsException)"

#: m01Q10/src/Tests.java:60 m01Q11/src/Tests.java:58 m01Q12/src/Tests.java:61
#: m01Q13/src/Tests.java:60 m01Q14/src/Tests.java:58 m01Q15/src/Tests.java:69
#: m01Q16/src/Tests.java:56 m01Q17/src/Tests.java:73 m01Q18/src/Tests.java:62
#: m01Q2/src/Tests.java:92 m01Q20/src/Tests.java:76 m01Q3/src/Tests.java:65
#: m01Q4/src/Tests.java:60 m01Q5/src/Tests.java:56 m01Q6/src/Tests.java:55
#: m01Q7/src/Tests.java:55 m01Q8/src/Tests.java:60 m01Q9/src/Tests.java:83
#: m01_bf/src/Tests.java:55 m02Q1/src/Tests.java:52 m02Q10/src/Tests.java:58
#: m02Q3/src/Tests.java:74 m02Q4/src/Tests.java:56 m02Q5/src/Tests.java:55
#: m02Q6/src/Tests.java:53 m02Q7/src/Tests.java:56 m02Q8/src/Tests.java:80
#: m02Q9/src/Tests.java:52 m02_bf/src/Tests.java:55 m02dem2/src/Tests.java:63
#: m02dem3/src/Tests.java:68 m02dem4/src/Tests.java:55
#: m02dem5/src/Tests.java:94 m03Q1/src/Tests.java:87 m03Q2/src/Tests.java:61
#: m03Q3/src/Tests.java:63 m03Q4/src/Tests.java:67 m03Q5/src/Tests.java:61
#: m03Q6/src/Tests.java:60 m03Q7/src/Tests.java:60 m03_bf/src/Tests.java:62
#: m03dem2/src/Tests.java:69 m03dem3/src/Tests.java:57
#: m03dem4/src/Tests.java:84 m03dem5/src/Tests.java:55 m04Q1/src/Tests.java:63
#: m04Q10/src/Tests.java:58 m04Q11/src/Tests.java:57 m04Q2/src/Tests.java:58
#: m04Q3/src/Tests.java:64 m04Q4/src/Tests.java:151 m04Q5/src/Tests.java:66
#: m04Q6/src/Tests.java:70 m04Q7/src/Tests.java:67 m04Q8/src/Tests.java:65
#: m04Q9/src/Tests.java:58 m04_bf/src/Tests.java:76 m04dem1/src/Tests.java:80
#: m04dem2/src/Tests.java:79 m04dem3/src/Tests.java:73
#: m04dem4/src/Tests.java:67 m04dem5/src/Tests.java:95 m05Q1/src/Tests.java:70
#: m05Q10/src/Tests.java:72 m05Q11/src/Tests.java:76 m05Q12/src/TestsQ1.java:68
#: m05Q12/src/TestsQ2.java:64 m05Q2/src/Tests.java:71 m05Q3/src/Tests.java:70
#: m05Q4/src/Tests.java:69 m05Q5/src/Tests.java:60 m05Q6/src/Tests.java:65
#: m05Q7/src/Tests.java:79 m05Q8/src/Tests.java:87 m05Q9/src/Tests.java:71
#: m05_bf/src/Tests.java:98 m05dem1/src/Tests.java:101
#: m05dem2/src/Tests.java:77 m05dem3/src/Tests.java:62
#: m05dem4/src/Tests.java:181 m05dem5/src/Tests.java:107
#: m06Q1/src/TestCode.java:67 m06Q10/src/TestCode.java:116
#: m06Q11/src/TestParam.java:73 m06Q2/src/TestCode.java:108
#: m06Q3/src/TestCode.java:77 m06Q3/src/TestParam.java:72
#: m06Q4/src/TestCode.java:90 m06Q4/src/TestParam.java:70
#: m06Q5/src/TestCode.java:92 m06Q6/src/TestCode.java:83
#: m06Q6/src/TestParam.java:72 m06Q7/src/TestCode.java:93
#: m06Q8/src/TestCode.java:95 m06Q8/src/TestParam.java:80
#: m06Q9/src/TestCode.java:113 m06_bf/src/TestInspect.java:63
#: m06_bf/src/TestCode.java:64 m06dem1/src/TestCode.java:142
#: m06dem2/src/TestCode.java:274 m06dem3/src/TestCode.java:111
#: m06dem4/src/TestCode.java:122 m07Q1/src/TestParam.java:72
#: m07Q10/src/TestCode.java:55 m07Q11/src/TestParam.java:81
#: m07Q2/src/TestCode.java:107 m07Q3/src/TestParam.java:82
#: m07Q4/src/TestCode.java:54 m07Q5/src/TestCode.java:55
#: m07Q6/src/TestParam.java:75 m07Q7/src/TestCode.java:55
#: m07Q8/src/TestCode.java:56 m07Q9/src/TestCode.java:54
#: m07_bf/src/TestItem.java:68 m07_bf/src/TestCD.java:125
#: m07_bf/src/TestInspectCD.java:63 m07dem1/src/TestCode.java:178
#: m07dem2/src/TestCode.java:92 m08Q1/src/TestCode.java:56
#: m08Q2/src/TestCode.java:57 m08Q3/src/TestParam.java:73
#: m08Q4/src/TestAnd.java:81 m08Q4/src/TestGet.java:85
#: m08Q4/src/TestReset.java:84 m08Q4/src/TestRotate.java:80
#: m08Q4/src/TestSet.java:91 m08Q4/src/TestShift.java:80
#: m08Q4/src/TestConstruct.java:55 m08Q5/src/TestGet.java:80
#: m08Q5/src/TestReset.java:83 m08Q5/src/TestRotate.java:85
#: m08Q5/src/TestSet.java:83 m08Q5/src/TestShift.java:85
#: m08Q6/src/TestMax.java:71 m08Q6/src/TestMin.java:71
#: m08Q6/src/TestMoyenne.java:69 m08Q7/src/TestMax.java:70
#: m08Q7/src/TestMin.java:70 m08Q7/src/TestMoyenne.java:70
#: m08dem1/src/TestParam1.java:71 m08dem1/src/TestParam2.java:82
#: m08dem2/src/TestCode.java:72 m09Q1/src/TestParam.java:88
#: m09Q2/src/TestParam.java:86 m09Q3/src/TestCode.java:71
#: m09Q4/src/TestParam.java:73 m09Q4/src/TestCode.java:71
#: m09Q5/src/TestCode.java:62 m09Q6/src/TestCode.java:65
#: m09Q7/src/TestCode.java:67 m09_bf/src/TestErr.java:96
#: m09_bf/src/Tests.java:84 m09_bf/src/TestsException.java:94
#: m09dem1/src/TestParam.java:86 m09dem2/src/TestCode.java:71
#: m09dem2/src/TestRes.java:71 m10Q1/src/Tests.java:84 m10Q2/src/Tests.java:124
#: m10Q3/src/Tests.java:169 m10Q4/src/TestListAdd.java:113
#: m10Q4/src/TestListContains.java:112 m10Q4/src/TestListGet.java:112
#: m10Q4/src/TestListSet.java:100 m10dem1/src/Tests.java:168
#: m10dem1/src/TestOut.java:91 m10dem2/src/TestContenuFichier.java:141
#: m10dem2/src/TestValeurRetour.java:114 m11Q1/src/Tests.java:176
#: m11Q2/src/Tests.java:165 m11Q3/src/Tests.java:116 m11Q4/src/Tests.java:172
#: m11Q5/src/Tests.java:176 m11Q6/src/Tests.java:144 mX1Q19/src/Tests.java:116
msgid ""
"Attention, vous tentez de lire en dehors des limites d'un tableau ! "
"(ArrayIndexOutOfBoundsException)"
msgstr ""
"Atención tratando de leer fuera de los límites de una mesa! "
"(ArrayIndexOutOfBoundsException)"

#: m01Q10/src/Tests.java:62 m01Q11/src/Tests.java:60 m01Q12/src/Tests.java:63
#: m01Q13/src/Tests.java:62 m01Q14/src/Tests.java:60 m01Q15/src/Tests.java:71
#: m01Q16/src/Tests.java:58 m01Q17/src/Tests.java:75 m01Q18/src/Tests.java:64
#: m01Q2/src/Tests.java:94 m01Q20/src/Tests.java:78 m01Q3/src/Tests.java:67
#: m01Q4/src/Tests.java:62 m01Q5/src/Tests.java:58 m01Q6/src/Tests.java:57
#: m01Q7/src/Tests.java:57 m01Q8/src/Tests.java:62 m01Q9/src/Tests.java:85
#: m01_bf/src/Tests.java:57 m02Q1/src/Tests.java:54 m02Q10/src/Tests.java:60
#: m02Q3/src/Tests.java:76 m02Q4/src/Tests.java:58 m02Q5/src/Tests.java:57
#: m02Q6/src/Tests.java:55 m02Q7/src/Tests.java:58 m02Q8/src/Tests.java:82
#: m02Q9/src/Tests.java:54 m02_bf/src/Tests.java:57 m02dem2/src/Tests.java:65
#: m02dem3/src/Tests.java:70 m02dem4/src/Tests.java:57
#: m02dem5/src/Tests.java:96 m03Q1/src/Tests.java:89 m03Q2/src/Tests.java:63
#: m03Q3/src/Tests.java:65 m03Q4/src/Tests.java:69 m03Q5/src/Tests.java:63
#: m03Q6/src/Tests.java:62 m03Q7/src/Tests.java:62 m03_bf/src/Tests.java:64
#: m03dem2/src/Tests.java:71 m03dem3/src/Tests.java:59
#: m03dem4/src/Tests.java:86 m03dem5/src/Tests.java:57 m04Q1/src/Tests.java:65
#: m04Q10/src/Tests.java:60 m04Q11/src/Tests.java:59 m04Q2/src/Tests.java:60
#: m04Q3/src/Tests.java:66 m04Q4/src/Tests.java:153 m04Q5/src/Tests.java:68
#: m04Q6/src/Tests.java:72 m04Q7/src/Tests.java:69 m04Q8/src/Tests.java:67
#: m04Q9/src/Tests.java:60 m04_bf/src/Tests.java:78 m04dem1/src/Tests.java:82
#: m04dem2/src/Tests.java:81 m04dem3/src/Tests.java:75
#: m04dem4/src/Tests.java:69 m04dem5/src/Tests.java:97 m05Q1/src/Tests.java:72
#: m05Q10/src/Tests.java:74 m05Q11/src/Tests.java:78 m05Q12/src/TestsQ1.java:70
#: m05Q12/src/TestsQ2.java:66 m05Q2/src/Tests.java:73 m05Q3/src/Tests.java:72
#: m05Q4/src/Tests.java:71 m05Q5/src/Tests.java:62 m05Q6/src/Tests.java:67
#: m05Q7/src/Tests.java:81 m05Q8/src/Tests.java:89 m05Q9/src/Tests.java:73
#: m05_bf/src/Tests.java:100 m05dem1/src/Tests.java:103
#: m05dem2/src/Tests.java:79 m05dem3/src/Tests.java:64
#: m05dem4/src/Tests.java:183 m05dem5/src/Tests.java:109
#: m06Q1/src/TestCode.java:69 m06Q10/src/TestCode.java:118
#: m06Q11/src/TestParam.java:75 m06Q2/src/TestCode.java:110
#: m06Q3/src/TestCode.java:79 m06Q3/src/TestParam.java:74
#: m06Q4/src/TestCode.java:92 m06Q4/src/TestParam.java:72
#: m06Q5/src/TestCode.java:94 m06Q6/src/TestCode.java:85
#: m06Q6/src/TestParam.java:74 m06Q7/src/TestCode.java:95
#: m06Q8/src/TestCode.java:97 m06Q8/src/TestParam.java:82
#: m06Q9/src/TestCode.java:115 m06_bf/src/TestInspect.java:66
#: m06_bf/src/TestCode.java:67 m06dem1/src/TestCode.java:144
#: m06dem2/src/TestCode.java:276 m06dem3/src/TestCode.java:113
#: m06dem4/src/TestCode.java:124 m07Q1/src/TestParam.java:74
#: m07Q10/src/TestCode.java:57 m07Q11/src/TestParam.java:83
#: m07Q2/src/TestCode.java:109 m07Q3/src/TestParam.java:84
#: m07Q4/src/TestCode.java:56 m07Q5/src/TestCode.java:57
#: m07Q6/src/TestParam.java:77 m07Q7/src/TestCode.java:57
#: m07Q8/src/TestCode.java:58 m07Q9/src/TestCode.java:56
#: m07_bf/src/TestItem.java:70 m07_bf/src/TestCD.java:127
#: m07_bf/src/TestInspectCD.java:66 m07dem1/src/TestCode.java:180
#: m07dem2/src/TestCode.java:94 m08Q1/src/TestCode.java:58
#: m08Q2/src/TestCode.java:59 m08Q3/src/TestParam.java:75
#: m08Q4/src/TestAnd.java:83 m08Q4/src/TestGet.java:87
#: m08Q4/src/TestReset.java:86 m08Q4/src/TestRotate.java:82
#: m08Q4/src/TestSet.java:93 m08Q4/src/TestShift.java:82
#: m08Q4/src/TestConstruct.java:57 m08Q5/src/TestGet.java:82
#: m08Q5/src/TestReset.java:85 m08Q5/src/TestRotate.java:87
#: m08Q5/src/TestSet.java:85 m08Q5/src/TestShift.java:87
#: m08Q6/src/TestMax.java:73 m08Q6/src/TestMin.java:73
#: m08Q6/src/TestMoyenne.java:71 m08Q7/src/TestMax.java:72
#: m08Q7/src/TestMin.java:72 m08Q7/src/TestMoyenne.java:72
#: m08dem1/src/TestParam1.java:73 m08dem1/src/TestParam2.java:84
#: m08dem2/src/TestCode.java:75 m09Q1/src/TestParam.java:90
#: m09Q2/src/TestParam.java:88 m09Q3/src/TestCode.java:74
#: m09Q4/src/TestParam.java:75 m09Q4/src/TestCode.java:73
#: m09Q5/src/TestCode.java:65 m09Q6/src/TestCode.java:68
#: m09Q7/src/TestCode.java:69 m09_bf/src/TestErr.java:98
#: m09_bf/src/Tests.java:86 m09_bf/src/TestsException.java:96
#: m09dem1/src/TestParam.java:88 m09dem2/src/TestCode.java:74
#: m09dem2/src/TestRes.java:74 m10Q1/src/Tests.java:86 m10Q2/src/Tests.java:126
#: m10Q3/src/Tests.java:171 m10Q4/src/TestListAdd.java:115
#: m10Q4/src/TestListContains.java:114 m10Q4/src/TestListGet.java:114
#: m10Q4/src/TestListSet.java:102 m10dem1/src/Tests.java:170
#: m10dem1/src/TestOut.java:93 m10dem2/src/TestContenuFichier.java:143
#: m10dem2/src/TestValeurRetour.java:116 m11Q1/src/Tests.java:178
#: m11Q2/src/Tests.java:167 m11Q3/src/Tests.java:118 m11Q4/src/Tests.java:174
#: m11Q5/src/Tests.java:178 m11Q6/src/Tests.java:146 mX1Q19/src/Tests.java:118
msgid ""
"Attention, vous faites une opération sur un objet qui vaut null ! Veillez à "
"bien gérer ce cas."
msgstr ""
"Atención haces una operación en un objeto que es nulo! Asegúrese de manejar "
"este caso."

#: m01Q10/src/Tests.java:64 m01Q11/src/Tests.java:62 m01Q12/src/Tests.java:65
#: m01Q13/src/Tests.java:64 m01Q14/src/Tests.java:62 m01Q15/src/Tests.java:73
#: m01Q16/src/Tests.java:60 m01Q17/src/Tests.java:77 m01Q18/src/Tests.java:66
#: m01Q2/src/Tests.java:96 m01Q20/src/Tests.java:80 m01Q3/src/Tests.java:69
#: m01Q4/src/Tests.java:64 m01Q5/src/Tests.java:60 m01Q6/src/Tests.java:59
#: m01Q7/src/Tests.java:59 m01Q8/src/Tests.java:64 m01Q9/src/Tests.java:87
#: m01_bf/src/Tests.java:63 m02Q1/src/Tests.java:56 m02Q10/src/Tests.java:62
#: m02Q3/src/Tests.java:78 m02Q4/src/Tests.java:60 m02Q5/src/Tests.java:59
#: m02Q6/src/Tests.java:57 m02Q7/src/Tests.java:60 m02Q8/src/Tests.java:84
#: m02Q9/src/Tests.java:56 m02_bf/src/Tests.java:63 m02dem2/src/Tests.java:67
#: m02dem3/src/Tests.java:72 m02dem4/src/Tests.java:59
#: m02dem5/src/Tests.java:98 m03Q1/src/Tests.java:93 m03Q1/src/Tests.java:96
#: m03Q2/src/Tests.java:67 m03Q2/src/Tests.java:70 m03Q3/src/Tests.java:69
#: m03Q3/src/Tests.java:72 m03Q4/src/Tests.java:73 m03Q4/src/Tests.java:76
#: m03Q5/src/Tests.java:67 m03Q5/src/Tests.java:70 m03Q6/src/Tests.java:66
#: m03Q6/src/Tests.java:69 m03Q7/src/Tests.java:66 m03Q7/src/Tests.java:69
#: m03_bf/src/Tests.java:70 m03dem2/src/Tests.java:75 m03dem2/src/Tests.java:78
#: m03dem3/src/Tests.java:63 m03dem3/src/Tests.java:66
#: m03dem4/src/Tests.java:90 m03dem4/src/Tests.java:93
#: m03dem5/src/Tests.java:61 m04Q1/src/Tests.java:71 m04Q1/src/Tests.java:74
#: m04Q10/src/Tests.java:66 m04Q10/src/Tests.java:69 m04Q11/src/Tests.java:65
#: m04Q11/src/Tests.java:68 m04Q2/src/Tests.java:66 m04Q2/src/Tests.java:69
#: m04Q3/src/Tests.java:72 m04Q3/src/Tests.java:75 m04Q4/src/Tests.java:159
#: m04Q4/src/Tests.java:162 m04Q5/src/Tests.java:74 m04Q5/src/Tests.java:77
#: m04Q6/src/Tests.java:78 m04Q6/src/Tests.java:81 m04Q7/src/Tests.java:75
#: m04Q7/src/Tests.java:78 m04Q8/src/Tests.java:73 m04Q8/src/Tests.java:76
#: m04Q9/src/Tests.java:66 m04Q9/src/Tests.java:69 m04_bf/src/Tests.java:84
#: m04dem1/src/Tests.java:84 m04dem2/src/Tests.java:85
#: m04dem3/src/Tests.java:77 m04dem4/src/Tests.java:75
#: m04dem5/src/Tests.java:103 m05Q1/src/Tests.java:78 m05Q1/src/Tests.java:81
#: m05Q10/src/Tests.java:80 m05Q10/src/Tests.java:83 m05Q11/src/Tests.java:84
#: m05Q11/src/Tests.java:87 m05Q12/src/TestsQ1.java:76
#: m05Q12/src/TestsQ1.java:79 m05Q12/src/TestsQ2.java:72
#: m05Q12/src/TestsQ2.java:75 m05Q2/src/Tests.java:79 m05Q2/src/Tests.java:82
#: m05Q3/src/Tests.java:78 m05Q3/src/Tests.java:81 m05Q4/src/Tests.java:77
#: m05Q4/src/Tests.java:80 m05Q5/src/Tests.java:68 m05Q5/src/Tests.java:71
#: m05Q6/src/Tests.java:73 m05Q6/src/Tests.java:76 m05Q7/src/Tests.java:87
#: m05Q7/src/Tests.java:90 m05Q8/src/Tests.java:95 m05Q8/src/Tests.java:98
#: m05Q9/src/Tests.java:79 m05Q9/src/Tests.java:82 m05_bf/src/Tests.java:106
#: m05dem1/src/Tests.java:109 m05dem2/src/Tests.java:85
#: m05dem3/src/Tests.java:70 m05dem4/src/Tests.java:189
#: m05dem5/src/Tests.java:115 m06Q1/src/TestCode.java:75
#: m06Q10/src/TestCode.java:124 m06Q11/src/TestParam.java:81
#: m06Q2/src/TestCode.java:116 m06Q3/src/TestCode.java:85
#: m06Q3/src/TestParam.java:80 m06Q4/src/TestCode.java:98
#: m06Q4/src/TestParam.java:78 m06Q5/src/TestCode.java:100
#: m06Q6/src/TestCode.java:91 m06Q6/src/TestParam.java:80
#: m06Q7/src/TestCode.java:101 m06Q8/src/TestCode.java:103
#: m06Q8/src/TestParam.java:88 m06Q9/src/TestCode.java:121
#: m06_bf/src/TestInspect.java:72 m06_bf/src/TestCode.java:73
#: m06dem1/src/TestCode.java:150 m06dem2/src/TestCode.java:282
#: m06dem3/src/TestCode.java:119 m06dem4/src/TestCode.java:130
#: m07Q1/src/TestParam.java:80 m07Q10/src/TestCode.java:63
#: m07Q11/src/TestParam.java:89 m07Q2/src/TestCode.java:115
#: m07Q3/src/TestParam.java:90 m07Q4/src/TestCode.java:62
#: m07Q5/src/TestCode.java:63 m07Q6/src/TestParam.java:83
#: m07Q7/src/TestCode.java:63 m07Q8/src/TestCode.java:64
#: m07Q9/src/TestCode.java:62 m07_bf/src/TestItem.java:76
#: m07_bf/src/TestCD.java:133 m07_bf/src/TestInspectCD.java:72
#: m07dem1/src/TestCode.java:182 m07dem1/src/TestCode.java:185
#: m07dem2/src/TestCode.java:100 m08Q1/src/TestCode.java:64
#: m08Q2/src/TestCode.java:65 m08Q3/src/TestParam.java:81
#: m08Q4/src/TestAnd.java:89 m08Q4/src/TestGet.java:93
#: m08Q4/src/TestReset.java:92 m08Q4/src/TestRotate.java:88
#: m08Q4/src/TestSet.java:99 m08Q4/src/TestShift.java:88
#: m08Q4/src/TestConstruct.java:63 m08Q5/src/TestGet.java:88
#: m08Q5/src/TestReset.java:91 m08Q5/src/TestRotate.java:93
#: m08Q5/src/TestSet.java:91 m08Q5/src/TestShift.java:93
#: m08Q6/src/TestMax.java:79 m08Q6/src/TestMin.java:79
#: m08Q6/src/TestMoyenne.java:77 m08Q7/src/TestMax.java:78
#: m08Q7/src/TestMin.java:78 m08Q7/src/TestMoyenne.java:78
#: m08dem1/src/TestParam1.java:79 m08dem1/src/TestParam2.java:90
#: m09Q1/src/TestParam.java:96 m09Q2/src/TestParam.java:94
#: m09Q3/src/TestCode.java:80 m09Q4/src/TestParam.java:81
#: m09Q4/src/TestCode.java:79 m09Q5/src/TestCode.java:71
#: m09Q6/src/TestCode.java:74 m09Q6/src/TestCode.java:115
#: m09Q6/src/TestCode.java:132 m09Q6/src/TestCode.java:146
#: m09Q6/src/TestCode.java:148 m09Q6/src/TestCode.java:165
#: m09Q6/src/TestCode.java:173 m09Q6/src/TestCode.java:200
#: m09Q7/src/TestCode.java:75 m09Q7/src/TestCode.java:140
#: m09Q7/src/TestCode.java:153 m09Q7/src/TestCode.java:155
#: m09Q7/src/TestCode.java:174 m09Q7/src/TestCode.java:182
#: m09Q7/src/TestCode.java:200 m09Q7/src/TestCode.java:202
#: m09Q7/src/TestCode.java:229 m09Q7/src/TestCode.java:235
#: m09Q7/src/TestCode.java:237 m09Q7/src/TestCode.java:245
#: m09_bf/src/TestErr.java:104 m09_bf/src/Tests.java:92
#: m09_bf/src/TestsException.java:102 m09dem1/src/TestParam.java:94
#: m09dem2/src/TestCode.java:83 m09dem2/src/TestRes.java:83
#: m10Q1/src/Tests.java:92 m10Q1/src/Tests.java:95 m10Q3/src/Tests.java:177
#: m10Q4/src/TestListAdd.java:122 m10Q4/src/TestListContains.java:121
#: m10Q4/src/TestListGet.java:121 m10Q4/src/TestListSet.java:109
#: m10dem1/src/Tests.java:176 m10dem1/src/Tests.java:179
#: m10dem1/src/TestOut.java:99 m10dem1/src/TestOut.java:102
#: m10dem2/src/TestContenuFichier.java:149
#: m10dem2/src/TestValeurRetour.java:122 m11Q1/src/Tests.java:184
#: m11Q2/src/Tests.java:173 m11Q3/src/Tests.java:124 m11Q4/src/Tests.java:180
#: m11Q5/src/Tests.java:184 m11Q6/src/Tests.java:152 mX1Q19/src/Tests.java:120
msgid "Une erreur inattendue est survenue dans votre tâche : "
msgstr "Se ha producido un error inesperado en la tarea: "

#: m01Q11/src/Tests.java:38
#, java-format
msgid ""
"La moyenne entre {0,number,#}, {1,number,#} et {2,number,#} vaut "
"{3,number,#}, or votre programme calcule {4,number,#}.\n"
msgstr ""
"El promedio de {0,number,#}, {1,number,#} y {2,number,#} es {3,number,#} y "
"su programa calcula {4,number,#}.\n"

#: m01Q12/src/Tests.java:34 m01Q13/src/Tests.java:33 m01Q3/src/Tests.java:33
msgid "Veuillez placer le résultat dans la variable"
msgstr "Coloque el resultado en la variable"

#: m01Q12/src/Tests.java:38 m03Q3/src/Tests.java:36
#, java-format
msgid ""
"Le maximum entre les variables a={0}, b={1} et c={2} est {3} or votre "
"programme calcule {4}.\n"
msgstr ""

#: m01Q13/src/Tests.java:37
#, java-format
msgid ""
"Le minimum entre les variables a={0}, b={1}, c={2} et d={3} est {4} or votre "
"programme calcule {5}.\n"
msgstr ""

#: m01Q14/src/Tests.java:33
#, java-format
msgid ""
"Il y a {0} valeurs différentes parmi {1}, {2}, {3}.\n"
"Cependant, votre code indique qu''il y en a {4}.\n"
msgstr ""

#: m01Q15/src/Tests.java:34
#, java-format
msgid ""
"Pour le {0}/{1}/2016 la saison est ''{2}'' alors que votre code indique "
"''{3}''.\n"
msgstr ""

#: m01Q16/src/Tests.java:33
#, java-format
msgid ""
"Pour {0}h{1}m{2}s, le total attendu est {3,number,#}s or votre code indique "
"{4,number,#}s.\n"
msgstr ""

#: m01Q17/src/Tests.java:32 m01Q9/src/Tests.java:31 m03Q1/src/Tests.java:32
msgid "est"
msgstr ""

#: m01Q17/src/Tests.java:33 m01Q9/src/Tests.java:32 m03Q1/src/Tests.java:33
msgid "n'est pas"
msgstr ""

#: m01Q17/src/Tests.java:34
#, java-format
msgid ""
"L''année {0,number,#} {1} une année bissextile.\n"
"Cependant, votre code indique que {0,number,#} {2} une année bissextile\n"
msgstr ""

#: m01Q18/src/Tests.java:31
#, java-format
msgid ""
"L''année {0,number,#} est au siècle {1,number,#} or votre code indique "
"siècle {2,number,#}.\n"
msgstr ""

#: m01Q2/src/Tests.java:33
#, java-format
msgid ""
"{0} : Un véhicule roulant à {1}km/h dans une zone limitée à {2}km/h doit "
"recevoir une amende de {3}€. Cependant, votre code calcule {4}€.\n"
msgstr ""

#: m01Q2/src/Tests.java:52 m02Q8/src/Tests.java:65 m04Q4/src/Tests.java:134
#: m05dem4/src/Tests.java:83 m05dem4/src/Tests.java:103
#: m05dem4/src/Tests.java:135 m05dem4/src/Tests.java:161
#: m06Q10/src/TestCode.java:50 m06Q2/src/TestCode.java:41
#: m06Q4/src/TestCode.java:46 m06Q5/src/TestCode.java:40
#: m06Q6/src/TestCode.java:45 m06Q7/src/TestCode.java:45
#: m06Q8/src/TestCode.java:50 m06Q9/src/TestCode.java:50
#: m06_bf/src/TestInspect.java:44 m06_bf/src/TestCode.java:45
#: m06dem1/src/TestCode.java:37 m06dem2/src/TestCode.java:38
#: m06dem3/src/TestCode.java:36 m06dem4/src/TestCode.java:42
#: m07Q10/src/TestCode.java:36 m07Q2/src/TestCode.java:37
#: m07Q4/src/TestCode.java:35 m07Q5/src/TestCode.java:36
#: m07Q7/src/TestCode.java:36 m07Q8/src/TestCode.java:37
#: m07Q9/src/TestCode.java:35 m07_bf/src/TestInspectCD.java:44
#: m07dem1/src/TestCode.java:53 m07dem2/src/TestCode.java:49
#: m08Q1/src/TestCode.java:37 m08Q2/src/TestCode.java:38
#: m08Q4/src/TestConstruct.java:36 m08dem2/src/TestCode.java:48
#: m09Q3/src/TestCode.java:52 m09Q4/src/TestCode.java:52
#: m09Q5/src/TestCode.java:43 m09Q6/src/TestCode.java:46
#: m09Q7/src/TestCode.java:48 m09dem2/src/TestCode.java:48
#: m09dem2/src/TestRes.java:48 m10Q2/src/Tests.java:77 m10Q2/src/Tests.java:105
#: m10Q3/src/Tests.java:113 m10Q3/src/Tests.java:151 m10dem1/src/Tests.java:151
#: m10dem1/src/TestOut.java:74 m10dem2/src/TestContenuFichier.java:105
#: m10dem2/src/TestValeurRetour.java:99
#, java-format
msgid "{0} : réussi"
msgstr "{0}: exitoso"

#: m01Q2/src/Tests.java:64
msgid "Lorsque l'excès de vitesse dépasse 10km/h, l'amende est doublée.\n"
msgstr ""

#: m01Q2/src/Tests.java:69 m01Q2/src/Tests.java:74
msgid "Lorsque les vitesses sont égales, l'amende doit être de zéro.\n"
msgstr ""

#: m01Q2/src/Tests.java:79
msgid ""
"Pas d'amende requise car la vitesse du véhicule est inférieure à la vitesse "
"maximale.\n"
msgstr ""

#: m01Q20/src/Tests.java:30
msgid "une consonne"
msgstr ""

#: m01Q20/src/Tests.java:31
msgid "une voyelle"
msgstr ""

#: m01Q20/src/Tests.java:32
msgid "un chiffre"
msgstr ""

#: m01Q20/src/Tests.java:38
#, java-format
msgid "''{0}'' est {1}. Cependant, votre code indique que c''est {2}.\n"
msgstr ""

#: m01Q3/src/Tests.java:36
#, java-format
msgid ""
"Pour une personne de {0}m et {1}kg, votre réponse {2} ne correspond pas à la "
"valeur attendue {3}.\n"
msgstr ""

#: m01Q4/src/Tests.java:31
#, java-format
msgid ""
"Lorsque la voiture entre en section {0} et sort en section {1}, la voiture a "
"pacouru {2} section(s) et le prix attendu est {3}€ alors que votre code "
"calcule {4}€.\n"
msgstr ""

#: m01Q5/src/Tests.java:30
#, java-format
msgid "{0} XOR {1} ne retourne pas le bon résultat.\n"
msgstr ""

#: m01Q6/src/Tests.java:30
#, java-format
msgid ""
"Pour i={0}, vous avez répondu ''{1}'' alors qu''il faut répondre ''{2}''.\n"
msgstr ""

#: m01Q7/src/Tests.java:30
#, java-format
msgid ""
"Pour n={0}, vous avez répondu ''{1}'' alors qu''il faut répondre ''{2}''.\n"
msgstr ""

#: m01Q8/src/Tests.java:34 m03Q4/src/Tests.java:37
#, java-format
msgid ""
"La mediane entre {0}, {1} et {2} vaut {3}, or votre programme calcule {4}.\n"
msgstr ""

#: m01Q9/src/Tests.java:34 m03Q1/src/Tests.java:34
#, java-format
msgid ""
"Le nombre {0} {1} dans l''intervalle [{2}, {3}].\n"
"Cependant, votre code indique le contraire.\n"
msgstr ""

#: m01_bf/src/Tests.java:32
#, java-format
msgid ""
"Vous affichez mal la suite de Syracuse sur la sortie standard quand s0 = "
"{0}.\n"
"La vraie suite est : {1}\n"
"Votre suite est : {2}"
msgstr ""
"No muestra la secuencia Syracuse correctamente en la salida estándar cuando "
"s0 = {0}.\n"
"La secuencia de números reales es: {1}\n"
"Su secuencia numérica es: {2}"

#: m01_bf/src/Tests.java:59 m02_bf/src/Tests.java:59 m03_bf/src/Tests.java:66
#: m04Q1/src/Tests.java:67 m04Q10/src/Tests.java:62 m04Q11/src/Tests.java:61
#: m04Q2/src/Tests.java:62 m04Q3/src/Tests.java:68 m04Q4/src/Tests.java:155
#: m04Q5/src/Tests.java:70 m04Q6/src/Tests.java:74 m04Q7/src/Tests.java:71
#: m04Q8/src/Tests.java:69 m04Q9/src/Tests.java:62 m04_bf/src/Tests.java:80
#: m04dem4/src/Tests.java:71 m04dem5/src/Tests.java:99 m05Q1/src/Tests.java:74
#: m05Q10/src/Tests.java:76 m05Q11/src/Tests.java:80 m05Q12/src/TestsQ1.java:72
#: m05Q12/src/TestsQ2.java:68 m05Q2/src/Tests.java:75 m05Q3/src/Tests.java:74
#: m05Q4/src/Tests.java:73 m05Q5/src/Tests.java:64 m05Q6/src/Tests.java:69
#: m05Q7/src/Tests.java:83 m05Q8/src/Tests.java:91 m05Q9/src/Tests.java:75
#: m05_bf/src/Tests.java:102 m05dem1/src/Tests.java:105
#: m05dem2/src/Tests.java:81 m05dem3/src/Tests.java:66
#: m05dem4/src/Tests.java:185 m05dem5/src/Tests.java:111
#: m06Q1/src/TestCode.java:71 m06Q10/src/TestCode.java:120
#: m06Q11/src/TestParam.java:77 m06Q2/src/TestCode.java:112
#: m06Q3/src/TestCode.java:81 m06Q3/src/TestParam.java:76
#: m06Q4/src/TestCode.java:94 m06Q4/src/TestParam.java:74
#: m06Q5/src/TestCode.java:96 m06Q6/src/TestCode.java:87
#: m06Q6/src/TestParam.java:76 m06Q7/src/TestCode.java:97
#: m06Q8/src/TestCode.java:99 m06Q8/src/TestParam.java:84
#: m06Q9/src/TestCode.java:117 m06_bf/src/TestInspect.java:68
#: m06_bf/src/TestCode.java:69 m06dem1/src/TestCode.java:146
#: m06dem2/src/TestCode.java:278 m06dem3/src/TestCode.java:115
#: m06dem4/src/TestCode.java:126 m07Q1/src/TestParam.java:76
#: m07Q10/src/TestCode.java:59 m07Q11/src/TestParam.java:85
#: m07Q2/src/TestCode.java:111 m07Q3/src/TestParam.java:86
#: m07Q4/src/TestCode.java:58 m07Q5/src/TestCode.java:59
#: m07Q6/src/TestParam.java:79 m07Q7/src/TestCode.java:59
#: m07Q8/src/TestCode.java:60 m07Q9/src/TestCode.java:58
#: m07_bf/src/TestItem.java:72 m07_bf/src/TestCD.java:129
#: m07_bf/src/TestInspectCD.java:68 m07dem2/src/TestCode.java:96
#: m08Q1/src/TestCode.java:60 m08Q2/src/TestCode.java:61
#: m08Q3/src/TestParam.java:77 m08Q4/src/TestAnd.java:85
#: m08Q4/src/TestGet.java:89 m08Q4/src/TestReset.java:88
#: m08Q4/src/TestRotate.java:84 m08Q4/src/TestSet.java:95
#: m08Q4/src/TestShift.java:84 m08Q4/src/TestConstruct.java:59
#: m08Q5/src/TestGet.java:84 m08Q5/src/TestReset.java:87
#: m08Q5/src/TestRotate.java:89 m08Q5/src/TestSet.java:87
#: m08Q5/src/TestShift.java:89 m08Q6/src/TestMax.java:75
#: m08Q6/src/TestMin.java:75 m08Q6/src/TestMoyenne.java:73
#: m08Q7/src/TestMax.java:74 m08Q7/src/TestMin.java:74
#: m08Q7/src/TestMoyenne.java:74 m08dem1/src/TestParam1.java:75
#: m08dem1/src/TestParam2.java:86 m09Q1/src/TestParam.java:92
#: m09Q2/src/TestParam.java:90 m09Q3/src/TestCode.java:76
#: m09Q4/src/TestParam.java:77 m09Q4/src/TestCode.java:75
#: m09Q5/src/TestCode.java:67 m09Q6/src/TestCode.java:70
#: m09Q7/src/TestCode.java:71 m09_bf/src/TestErr.java:100
#: m09_bf/src/Tests.java:88 m09_bf/src/TestsException.java:98
#: m09dem1/src/TestParam.java:90 m09dem2/src/TestCode.java:77
#: m09dem2/src/TestRes.java:77 m10Q1/src/Tests.java:88 m10Q2/src/Tests.java:128
#: m10Q3/src/Tests.java:173 m10Q4/src/TestListAdd.java:117
#: m10Q4/src/TestListContains.java:116 m10Q4/src/TestListGet.java:116
#: m10Q4/src/TestListSet.java:104 m10dem1/src/Tests.java:172
#: m10dem1/src/TestOut.java:95 m10dem2/src/TestContenuFichier.java:145
#: m10dem2/src/TestValeurRetour.java:118 m11Q1/src/Tests.java:180
#: m11Q2/src/Tests.java:169 m11Q3/src/Tests.java:120 m11Q4/src/Tests.java:176
#: m11Q5/src/Tests.java:180 m11Q6/src/Tests.java:148
msgid "Vous initialisez un tableau avec une taille négative."
msgstr ""

#: m01_bf/src/Tests.java:61 m02_bf/src/Tests.java:61 m03Q1/src/Tests.java:91
#: m03Q2/src/Tests.java:65 m03Q3/src/Tests.java:67 m03Q4/src/Tests.java:71
#: m03Q5/src/Tests.java:65 m03Q6/src/Tests.java:64 m03Q7/src/Tests.java:64
#: m03_bf/src/Tests.java:68 m03dem2/src/Tests.java:73 m03dem3/src/Tests.java:61
#: m03dem4/src/Tests.java:88 m03dem5/src/Tests.java:59 m04Q1/src/Tests.java:69
#: m04Q10/src/Tests.java:64 m04Q11/src/Tests.java:63 m04Q2/src/Tests.java:64
#: m04Q3/src/Tests.java:70 m04Q4/src/Tests.java:157 m04Q5/src/Tests.java:72
#: m04Q6/src/Tests.java:76 m04Q7/src/Tests.java:73 m04Q8/src/Tests.java:71
#: m04Q9/src/Tests.java:64 m04_bf/src/Tests.java:82 m04dem2/src/Tests.java:83
#: m04dem4/src/Tests.java:73 m04dem5/src/Tests.java:101 m05Q1/src/Tests.java:76
#: m05Q10/src/Tests.java:78 m05Q11/src/Tests.java:82 m05Q12/src/TestsQ1.java:74
#: m05Q12/src/TestsQ2.java:70 m05Q2/src/Tests.java:77 m05Q3/src/Tests.java:76
#: m05Q4/src/Tests.java:75 m05Q5/src/Tests.java:66 m05Q6/src/Tests.java:71
#: m05Q7/src/Tests.java:85 m05Q8/src/Tests.java:93 m05Q9/src/Tests.java:77
#: m05_bf/src/Tests.java:104 m05dem1/src/Tests.java:107
#: m05dem2/src/Tests.java:83 m05dem3/src/Tests.java:68
#: m05dem4/src/Tests.java:187 m05dem5/src/Tests.java:113
#: m06Q1/src/TestCode.java:73 m06Q10/src/TestCode.java:122
#: m06Q11/src/TestParam.java:79 m06Q2/src/TestCode.java:114
#: m06Q3/src/TestCode.java:83 m06Q3/src/TestParam.java:78
#: m06Q4/src/TestCode.java:96 m06Q4/src/TestParam.java:76
#: m06Q5/src/TestCode.java:98 m06Q6/src/TestCode.java:89
#: m06Q6/src/TestParam.java:78 m06Q7/src/TestCode.java:99
#: m06Q8/src/TestCode.java:101 m06Q8/src/TestParam.java:86
#: m06Q9/src/TestCode.java:119 m06_bf/src/TestInspect.java:70
#: m06_bf/src/TestCode.java:71 m06dem1/src/TestCode.java:148
#: m06dem2/src/TestCode.java:280 m06dem3/src/TestCode.java:117
#: m06dem4/src/TestCode.java:128 m07Q1/src/TestParam.java:78
#: m07Q10/src/TestCode.java:61 m07Q11/src/TestParam.java:87
#: m07Q2/src/TestCode.java:113 m07Q3/src/TestParam.java:88
#: m07Q4/src/TestCode.java:60 m07Q5/src/TestCode.java:61
#: m07Q6/src/TestParam.java:81 m07Q7/src/TestCode.java:61
#: m07Q8/src/TestCode.java:62 m07Q9/src/TestCode.java:60
#: m07_bf/src/TestItem.java:74 m07_bf/src/TestCD.java:131
#: m07_bf/src/TestInspectCD.java:70 m07dem2/src/TestCode.java:98
#: m08Q1/src/TestCode.java:62 m08Q2/src/TestCode.java:63
#: m08Q3/src/TestParam.java:79 m08Q4/src/TestAnd.java:87
#: m08Q4/src/TestGet.java:91 m08Q4/src/TestReset.java:90
#: m08Q4/src/TestRotate.java:86 m08Q4/src/TestSet.java:97
#: m08Q4/src/TestShift.java:86 m08Q4/src/TestConstruct.java:61
#: m08Q5/src/TestGet.java:86 m08Q5/src/TestReset.java:89
#: m08Q5/src/TestRotate.java:91 m08Q5/src/TestSet.java:89
#: m08Q5/src/TestShift.java:91 m08Q6/src/TestMax.java:77
#: m08Q6/src/TestMin.java:77 m08Q6/src/TestMoyenne.java:75
#: m08Q7/src/TestMax.java:76 m08Q7/src/TestMin.java:76
#: m08Q7/src/TestMoyenne.java:76 m08dem1/src/TestParam1.java:77
#: m08dem1/src/TestParam2.java:88 m08dem2/src/TestCode.java:78
#: m09Q1/src/TestParam.java:94 m09Q2/src/TestParam.java:92
#: m09Q3/src/TestCode.java:78 m09Q4/src/TestParam.java:79
#: m09Q4/src/TestCode.java:77 m09Q5/src/TestCode.java:69
#: m09Q6/src/TestCode.java:72 m09Q7/src/TestCode.java:73
#: m09_bf/src/TestErr.java:102 m09_bf/src/Tests.java:90
#: m09_bf/src/TestsException.java:100 m09dem1/src/TestParam.java:92
#: m09dem2/src/TestCode.java:80 m09dem2/src/TestRes.java:80
#: m10Q1/src/Tests.java:90 m10Q2/src/Tests.java:130 m10Q3/src/Tests.java:175
#: m10Q4/src/TestListAdd.java:119 m10Q4/src/TestListContains.java:118
#: m10Q4/src/TestListGet.java:118 m10Q4/src/TestListSet.java:106
#: m10dem1/src/Tests.java:174 m10dem1/src/TestOut.java:97
#: m10dem2/src/TestContenuFichier.java:147
#: m10dem2/src/TestValeurRetour.java:120 m11Q1/src/Tests.java:182
#: m11Q2/src/Tests.java:171 m11Q3/src/Tests.java:122 m11Q4/src/Tests.java:178
#: m11Q5/src/Tests.java:182 m11Q6/src/Tests.java:150
msgid ""
"Il semble que votre code boucle. Ceci peut arriver si votre fonction "
"s'appelle elle-même."
msgstr ""

#: m02Q1/src/Tests.java:27
#, java-format
msgid ""
"Le reste de la division entière entre {0,number,#} et {1,number,#} vaut "
"{2,number,#} et votre programme calcule {3,number,#}.\n"
msgstr ""

#: m02Q10/src/Tests.java:32
#, java-format
msgid ""
"Le nombre de diviseur de {0,number,#} est {1,number,#} or votre programme "
"calcule {2,number,#}.\n"
msgstr ""

#: m02Q3/src/Tests.java:32
#, java-format
msgid ""
"Un triangle de côté {0} donne :\n"
"{1}\n"
"Votre programme affiche :\n"
"{2}\n"
msgstr ""

#: m02Q3/src/Tests.java:51 m02Q4/src/Tests.java:38
msgid "Vous affichez trop de caractères ! ⛔"
msgstr ""

#: m02Q4/src/Tests.java:34
#, java-format
msgid ""
"Le dessin de la lettre H de hauteur {0} et de largeur {1} donne \n"
"\n"
"{2}\n"
" et votre programme donne\n"
"\n"
"{3}\n"
msgstr ""

#: m02Q5/src/Tests.java:34
#, java-format
msgid ""
"Le dessin de la lettre X de hauteur {0} donne \n"
"\n"
"{1}\n"
" et votre programme donne\n"
"\n"
"{2}\n"
msgstr ""

#: m02Q5/src/Tests.java:36 m02Q6/src/Tests.java:35
msgid "Vous affichez trop de caractères!"
msgstr ""

#: m02Q6/src/Tests.java:33
#, java-format
msgid ""
"Le dessin de la lettre S de hauteur {0} donne \n"
"\n"
"{1}\n"
" et votre programme donne\n"
"\n"
"{2}\n"
msgstr ""

#: m02Q7/src/Tests.java:30
#, java-format
msgid ""
"Le calcul d''intérêts avec une base de {0,number,#} sur {1,number,#} années "
"au taux d''intérêt {2,number,#} donne {3,number,#} mais votre programme "
"calcule {4,number,#}.\n"
msgstr ""

#: m02Q8/src/Tests.java:35 m02Q8/src/Tests.java:40
#, java-format
msgid "Vérifiez que vous gérez la factorielle de {0}.\n"
msgstr ""

#: m02Q8/src/Tests.java:62
#, java-format
msgid ""
"La factorielle de {0} donne {1,number,#}, pourtant, votre code renvoie "
"{2,number,#}.\n"
msgstr ""

#: m02Q9/src/Tests.java:27
#, java-format
msgid ""
"La somme des nombres dans l''intervalle [{0,number,#}, {1,number,#}] vaut "
"{2,number,#} et votre programme calcule {3,number,#}.\n"
msgstr ""

#: m02_bf/src/Tests.java:31
msgid "<rien>"
msgstr ""

#: m02_bf/src/Tests.java:33
#, java-format
msgid ""
"Vous affichez mal les diviseurs propres sur la sortie standard quand n = "
"{0}.\n"
"Vous affichez :\n"
"{1}\n"
"Il est attendu :\n"
"{2}"
msgstr ""
"No muestra divisores limpios en la salida estándar cuando n = {0}.\n"
"Usted verá:\n"
"{1}\n"
"Se espera:\n"
"{2}"

#: m02dem2/src/Tests.java:36
#, java-format
msgid ""
"Test {0} : La somme des {1,number,#} entiers pairs supérieurs à zéro vaut "
"{2,number,#} et votre programme calcule {3,number,#}.\n"
msgstr ""

#: m02dem3/src/Tests.java:34
#, java-format
msgid ""
"Test {0} : l''entier {1,number,#} exposant {2,number,#} vaut {3,number,#} et "
"votre programme calcule {4,number,#}.\n"
msgstr ""

#: m02dem4/src/Tests.java:30
#, java-format
msgid ""
"Test {0} : le plus grand diviseur entier de {1,number,#} est {2,number,#} et "
"votre programme calcule {3,number,#}.\n"
msgstr ""

#: m02dem5/src/Tests.java:29
#, java-format
msgid ""
"Test {0} : le test de nombre premier sur {1,number,#} renvoie {2} et votre "
"programme renvoie {3}.\n"
msgstr ""

#: m03Q1/src/librairies/FunctionHelper.java:47
#: m03Q2/src/librairies/FunctionHelper.java:47
#: m03Q3/src/librairies/FunctionHelper.java:47
#: m03Q4/src/librairies/FunctionHelper.java:47
#: m03Q5/src/librairies/FunctionHelper.java:47
#: m03Q6/src/librairies/FunctionHelper.java:47
#: m03Q7/src/librairies/FunctionHelper.java:47
#: m03_bf/src/librairies/FunctionHelper.java:47
#: m03dem2/src/librairies/FunctionHelper.java:47
#: m03dem3/src/librairies/FunctionHelper.java:47
#: m03dem4/src/librairies/FunctionHelper.java:47
#: m03dem5/src/librairies/FunctionHelper.java:47
#: m04Q1/src/librairies/FunctionHelper.java:47
#: m04Q10/src/librairies/FunctionHelper.java:47
#: m04Q11/src/librairies/FunctionHelper.java:47
#: m04Q2/src/librairies/FunctionHelper.java:47
#: m04Q3/src/librairies/FunctionHelper.java:47
#: m04Q4/src/librairies/FunctionHelper.java:47
#: m04Q5/src/librairies/FunctionHelper.java:47
#: m04Q6/src/librairies/FunctionHelper.java:47
#: m04Q7/src/librairies/FunctionHelper.java:47
#: m04Q8/src/librairies/FunctionHelper.java:47
#: m04Q9/src/librairies/FunctionHelper.java:47
#: m05Q1/src/librairies/FunctionHelper.java:47
#: m05Q10/src/librairies/FunctionHelper.java:47
#: m05Q11/src/librairies/FunctionHelper.java:47
#: m05Q12/src/librairies/FunctionHelper.java:47
#: m05Q2/src/librairies/FunctionHelper.java:47
#: m05Q3/src/librairies/FunctionHelper.java:47
#: m05Q4/src/librairies/FunctionHelper.java:47
#: m05Q5/src/librairies/FunctionHelper.java:47
#: m05Q6/src/librairies/FunctionHelper.java:47
#: m05Q7/src/librairies/FunctionHelper.java:47
#: m05Q8/src/librairies/FunctionHelper.java:47
#: m05Q9/src/librairies/FunctionHelper.java:47 m07dem1/src/TestCode.java:70
#: m09Q5/src/librairies/FunctionHelper.java:47
#: m09_bf/src/librairies/FunctionHelper.java:47
#: m10Q1/src/librairies/FunctionHelperCustom.java:46
#: m10Q3/src/librairies/FunctionHelper.java:47
#: m10dem1/src/librairies/FunctionHelper.java:47
#: m10dem2/src/librairies/FunctionHelper.java:47
#: utilities/FunctionHelper.java:47
#, java-format
msgid "Le type de retour de votre fonction doit être du type {0} !\n"
msgstr ""

#: m03Q1/src/librairies/FunctionHelper.java:50
#: m03Q2/src/librairies/FunctionHelper.java:50
#: m03Q3/src/librairies/FunctionHelper.java:50
#: m03Q4/src/librairies/FunctionHelper.java:50
#: m03Q5/src/librairies/FunctionHelper.java:50
#: m03Q6/src/librairies/FunctionHelper.java:50
#: m03Q7/src/librairies/FunctionHelper.java:50
#: m03_bf/src/librairies/FunctionHelper.java:50
#: m03dem2/src/librairies/FunctionHelper.java:50
#: m03dem3/src/librairies/FunctionHelper.java:50
#: m03dem4/src/librairies/FunctionHelper.java:50
#: m03dem5/src/librairies/FunctionHelper.java:50
#: m04Q1/src/librairies/FunctionHelper.java:50
#: m04Q10/src/librairies/FunctionHelper.java:50
#: m04Q11/src/librairies/FunctionHelper.java:50
#: m04Q2/src/librairies/FunctionHelper.java:50
#: m04Q3/src/librairies/FunctionHelper.java:50
#: m04Q4/src/librairies/FunctionHelper.java:50
#: m04Q5/src/librairies/FunctionHelper.java:50
#: m04Q6/src/librairies/FunctionHelper.java:50
#: m04Q7/src/librairies/FunctionHelper.java:50
#: m04Q8/src/librairies/FunctionHelper.java:50
#: m04Q9/src/librairies/FunctionHelper.java:50
#: m05Q1/src/librairies/FunctionHelper.java:50
#: m05Q10/src/librairies/FunctionHelper.java:50
#: m05Q11/src/librairies/FunctionHelper.java:50
#: m05Q12/src/librairies/FunctionHelper.java:50
#: m05Q2/src/librairies/FunctionHelper.java:50
#: m05Q3/src/librairies/FunctionHelper.java:50
#: m05Q4/src/librairies/FunctionHelper.java:50
#: m05Q5/src/librairies/FunctionHelper.java:50
#: m05Q6/src/librairies/FunctionHelper.java:50
#: m05Q7/src/librairies/FunctionHelper.java:50
#: m05Q8/src/librairies/FunctionHelper.java:50
#: m05Q9/src/librairies/FunctionHelper.java:50 m07dem1/src/TestCode.java:73
#: m09Q5/src/librairies/FunctionHelper.java:50
#: m09_bf/src/librairies/FunctionHelper.java:50
#: m10Q1/src/librairies/FunctionHelperCustom.java:49
#: m10Q3/src/librairies/FunctionHelper.java:50
#: m10dem1/src/librairies/FunctionHelper.java:50
#: m10dem2/src/librairies/FunctionHelper.java:50
#: utilities/FunctionHelper.java:50
#, java-format
msgid "Votre fonction doit prendre {0} argument(s) !\n"
msgstr ""

#: m03Q1/src/librairies/FunctionHelper.java:54
#: m03Q2/src/librairies/FunctionHelper.java:54
#: m03Q3/src/librairies/FunctionHelper.java:54
#: m03Q4/src/librairies/FunctionHelper.java:54
#: m03Q5/src/librairies/FunctionHelper.java:54
#: m03Q6/src/librairies/FunctionHelper.java:54
#: m03Q7/src/librairies/FunctionHelper.java:54
#: m03_bf/src/librairies/FunctionHelper.java:54
#: m03dem2/src/librairies/FunctionHelper.java:54
#: m03dem3/src/librairies/FunctionHelper.java:54
#: m03dem4/src/librairies/FunctionHelper.java:54
#: m03dem5/src/librairies/FunctionHelper.java:54
#: m04Q1/src/librairies/FunctionHelper.java:54
#: m04Q10/src/librairies/FunctionHelper.java:54
#: m04Q11/src/librairies/FunctionHelper.java:54
#: m04Q2/src/librairies/FunctionHelper.java:54
#: m04Q3/src/librairies/FunctionHelper.java:54
#: m04Q4/src/librairies/FunctionHelper.java:54
#: m04Q5/src/librairies/FunctionHelper.java:54
#: m04Q6/src/librairies/FunctionHelper.java:54
#: m04Q7/src/librairies/FunctionHelper.java:54
#: m04Q8/src/librairies/FunctionHelper.java:54
#: m04Q9/src/librairies/FunctionHelper.java:54
#: m05Q1/src/librairies/FunctionHelper.java:54
#: m05Q10/src/librairies/FunctionHelper.java:54
#: m05Q11/src/librairies/FunctionHelper.java:54
#: m05Q12/src/librairies/FunctionHelper.java:54
#: m05Q2/src/librairies/FunctionHelper.java:54
#: m05Q3/src/librairies/FunctionHelper.java:54
#: m05Q4/src/librairies/FunctionHelper.java:54
#: m05Q5/src/librairies/FunctionHelper.java:54
#: m05Q6/src/librairies/FunctionHelper.java:54
#: m05Q7/src/librairies/FunctionHelper.java:54
#: m05Q8/src/librairies/FunctionHelper.java:54
#: m05Q9/src/librairies/FunctionHelper.java:54 m07dem1/src/TestCode.java:77
#: m09Q5/src/librairies/FunctionHelper.java:54
#: m09_bf/src/librairies/FunctionHelper.java:54
#: m10Q3/src/librairies/FunctionHelper.java:54
#: m10dem1/src/librairies/FunctionHelper.java:54
#: m10dem2/src/librairies/FunctionHelper.java:54
#: utilities/FunctionHelper.java:54
#, java-format
msgid "L''argument n°{0} n''est pas de type ''{1}'' comme demandé !\n"
msgstr ""

#: m03Q1/src/librairies/FunctionHelper.java:60
#: m03Q2/src/librairies/FunctionHelper.java:60
#: m03Q3/src/librairies/FunctionHelper.java:60
#: m03Q4/src/librairies/FunctionHelper.java:60
#: m03Q5/src/librairies/FunctionHelper.java:60
#: m03Q6/src/librairies/FunctionHelper.java:60
#: m03Q7/src/librairies/FunctionHelper.java:60
#: m03_bf/src/librairies/FunctionHelper.java:60
#: m03dem2/src/librairies/FunctionHelper.java:60
#: m03dem3/src/librairies/FunctionHelper.java:60
#: m03dem4/src/librairies/FunctionHelper.java:60
#: m03dem5/src/librairies/FunctionHelper.java:60
#: m04Q1/src/librairies/FunctionHelper.java:60
#: m04Q10/src/librairies/FunctionHelper.java:60
#: m04Q11/src/librairies/FunctionHelper.java:60
#: m04Q2/src/librairies/FunctionHelper.java:60
#: m04Q3/src/librairies/FunctionHelper.java:60
#: m04Q4/src/librairies/FunctionHelper.java:60
#: m04Q5/src/librairies/FunctionHelper.java:60
#: m04Q6/src/librairies/FunctionHelper.java:60
#: m04Q7/src/librairies/FunctionHelper.java:60
#: m04Q8/src/librairies/FunctionHelper.java:60
#: m04Q9/src/librairies/FunctionHelper.java:60
#: m05Q1/src/librairies/FunctionHelper.java:60
#: m05Q10/src/librairies/FunctionHelper.java:60
#: m05Q11/src/librairies/FunctionHelper.java:60
#: m05Q12/src/librairies/FunctionHelper.java:60
#: m05Q2/src/librairies/FunctionHelper.java:60
#: m05Q3/src/librairies/FunctionHelper.java:60
#: m05Q4/src/librairies/FunctionHelper.java:60
#: m05Q5/src/librairies/FunctionHelper.java:60
#: m05Q6/src/librairies/FunctionHelper.java:60
#: m05Q7/src/librairies/FunctionHelper.java:60
#: m05Q8/src/librairies/FunctionHelper.java:60
#: m05Q9/src/librairies/FunctionHelper.java:60 m07dem1/src/TestCode.java:83
#: m09Q5/src/librairies/FunctionHelper.java:60
#: m09_bf/src/librairies/FunctionHelper.java:60
#: m10Q1/src/librairies/FunctionHelperCustom.java:63
#: m10Q3/src/librairies/FunctionHelper.java:60
#: m10dem1/src/librairies/FunctionHelper.java:60
#: m10dem2/src/librairies/FunctionHelper.java:60
#: utilities/FunctionHelper.java:60
msgid ""
"Votre fonction n'a pas été définie correctement. Assurez vous que son nom "
"est correctement défini !\n"
msgstr ""

#: m03Q1/src/librairies/FunctionHelper.java:60
#: m03Q2/src/librairies/FunctionHelper.java:60
#: m03Q3/src/librairies/FunctionHelper.java:60
#: m03Q4/src/librairies/FunctionHelper.java:60
#: m03Q5/src/librairies/FunctionHelper.java:60
#: m03Q6/src/librairies/FunctionHelper.java:60
#: m03Q7/src/librairies/FunctionHelper.java:60
#: m03_bf/src/librairies/FunctionHelper.java:60
#: m03dem2/src/librairies/FunctionHelper.java:60
#: m03dem3/src/librairies/FunctionHelper.java:60
#: m03dem4/src/librairies/FunctionHelper.java:60
#: m03dem5/src/librairies/FunctionHelper.java:60
#: m04Q1/src/librairies/FunctionHelper.java:60
#: m04Q10/src/librairies/FunctionHelper.java:60
#: m04Q11/src/librairies/FunctionHelper.java:60
#: m04Q2/src/librairies/FunctionHelper.java:60
#: m04Q3/src/librairies/FunctionHelper.java:60
#: m04Q4/src/librairies/FunctionHelper.java:60
#: m04Q5/src/librairies/FunctionHelper.java:60
#: m04Q6/src/librairies/FunctionHelper.java:60
#: m04Q7/src/librairies/FunctionHelper.java:60
#: m04Q8/src/librairies/FunctionHelper.java:60
#: m04Q9/src/librairies/FunctionHelper.java:60
#: m05Q1/src/librairies/FunctionHelper.java:60
#: m05Q10/src/librairies/FunctionHelper.java:60
#: m05Q11/src/librairies/FunctionHelper.java:60
#: m05Q12/src/librairies/FunctionHelper.java:60
#: m05Q2/src/librairies/FunctionHelper.java:60
#: m05Q3/src/librairies/FunctionHelper.java:60
#: m05Q4/src/librairies/FunctionHelper.java:60
#: m05Q5/src/librairies/FunctionHelper.java:60
#: m05Q6/src/librairies/FunctionHelper.java:60
#: m05Q7/src/librairies/FunctionHelper.java:60
#: m05Q8/src/librairies/FunctionHelper.java:60
#: m05Q9/src/librairies/FunctionHelper.java:60
#: m09Q5/src/librairies/FunctionHelper.java:60
#: m09_bf/src/librairies/FunctionHelper.java:60
#: m10Q1/src/librairies/FunctionHelperCustom.java:63
#: m10Q3/src/librairies/FunctionHelper.java:60
#: m10dem1/src/librairies/FunctionHelper.java:60
#: m10dem2/src/librairies/FunctionHelper.java:60
#: utilities/FunctionHelper.java:60
#, java-format
msgid "Le nom attendu est : ''{0}''.\n"
msgstr ""

#: m03Q2/src/Tests.java:35
#, java-format
msgid ""
"Le surface d''un rectangle de longueur {0} et de largeur {1} est {2}.\n"
"Cependant, votre code calcule {3}.\n"
msgstr ""

#: m03Q5/src/Tests.java:35
#, java-format
msgid ""
"La surface d''une sphère de rayon {0} est {1}.\n"
"Cependant, votre code calcule {2}.\n"
msgstr ""

#: m03Q6/src/Tests.java:36
#, java-format
msgid ""
"La factorielle de {0,number,#} vaut {1,number,#} et votre programme calcule "
"{2,number,#}.\n"
msgstr ""

#: m03Q7/src/Tests.java:36
#, java-format
msgid "Avec x={0}, votre code ne donne pas la bonne réponse.\n"
msgstr ""

#: m03_bf/src/Tests.java:32
#, java-format
msgid "Votre méthode {0} a retourné {1} quand elle est appelée avec n = {2}.\n"
msgstr ""

#: m03_bf/src/Tests.java:33
msgid "Faites attention au cas où n est négatif.\n"
msgstr ""

#: m03dem2/src/Tests.java:44
msgid "Votre code n'affiche pas le nombre le plus grand.\n"
msgstr ""

#: m03dem3/src/Tests.java:35
#, java-format
msgid ""
"Votre code indique que impair de {0} est {1} alors que cela devrait être "
"{2}.\n"
msgstr ""

#: m03dem4/src/Tests.java:60
#, java-format
msgid ""
"Le dessin de la lettre L avec le caractère {0} de hauteur {1} et largeur {2} "
"donne \n"
"\n"
"{3}\n"
"et votre programme donne\n"
"\n"
"{4}\n"
"Assurez vous aussi de ne pas mettre des espaces inutiles dans vos prints."
msgstr ""

#: m03dem5/src/Tests.java:30
#, java-format
msgid ""
"Le nombre de diviseurs entiers du nombre {0} est {1}.\n"
"Cependant, votre code indique {2}.\n"
msgstr ""

#: m04Q1/src/Tests.java:32 m04Q2/src/Tests.java:30
#, java-format
msgid ""
"Avec les arguments c=\"{0}\" et s=\"{1}\", la réponse attendue est\n"
"{2}\n"
"Malheureusement, votre code renvoie \n"
"{3}\n"
msgstr ""

#: m04Q10/src/Tests.java:30 m04Q11/src/Tests.java:29 m04Q3/src/Tests.java:30
#: m04Q5/src/Tests.java:30 m04Q7/src/Tests.java:29 m04Q9/src/Tests.java:30
#, java-format
msgid ""
"Avec l''argument s=\"{0}\", la réponse attendue est\n"
"{1}\n"
"Malheureusement, votre code renvoie \n"
"{2}\n"
msgstr ""

#: m04Q4/src/Tests.java:94
msgid "Vérifiez-vous la présence d'une majuscule ?\n"
msgstr ""

#: m04Q4/src/Tests.java:100
msgid "Vérifiez-vous la présence d'une minuscule ?\n"
msgstr ""

#: m04Q4/src/Tests.java:106
msgid "Vérifiez-vous la présence d'un chiffre ?\n"
msgstr ""

#: m04Q4/src/Tests.java:112
msgid "Vérifiez-vous toutes les conditions simultanément ?\n"
msgstr ""

#: m04Q4/src/Tests.java:118
msgid "Vérifiez-vous la longueur du mot de passe ?\n"
msgstr ""

#: m04Q4/src/Tests.java:130
#, java-format
msgid ""
"Avec l''argument s=\"{0}\", la réponse attendue est {1}, malheureusement, "
"votre code renvoie {2}.\n"
msgstr ""

#: m04Q6/src/Tests.java:36 m04Q8/src/Tests.java:36 m04dem5/src/Tests.java:70
#, java-format
msgid ""
"Avec les arguments s1=\"{0}\" et s2=\"{1}\", la réponse attendue est\n"
"{2}\n"
"Malheureusement, votre code renvoie \n"
"{3}\n"
msgstr ""

#: m04_bf/src/Tests.java:34
#, java-format
msgid ""
"Votre méthode {0} a retourné {1} quand elle est appelée avec p = \"{2}\" et "
"s = \"{3}\".\n"
msgstr ""

#: m04dem3/src/Tests.java:27
#, java-format
msgid ""
"Avec les arguments {1}, votre méthode doit afficher\n"
"{2}\n"
"Malheureusement, votre code renvoie \n"
"{3}\n"
msgstr ""

#: m04dem4/src/Tests.java:44
#, java-format
msgid ""
"Avec l''argument \"{0}\", la réponse attendue est\n"
"{1}\n"
"Malheureusement, votre code renvoie \n"
"{2}\n"
msgstr ""

#: m05Q1/src/Tests.java:33 m05Q10/src/Tests.java:32 m05Q11/src/Tests.java:32
#: m05Q12/src/TestsQ1.java:33 m05Q2/src/Tests.java:33 m05Q3/src/Tests.java:33
#: m05Q4/src/Tests.java:31 m05Q7/src/Tests.java:34 m05dem4/src/Tests.java:74
msgid ""
"Votre méthode modifie le contenu du tableau passé en argument. Une telle "
"modification n'est autorisée que si elle est explicitement indiquée dans les "
"spécifications. Ce n'est pas le cas pour cette méthode.\n"
msgstr ""

#: m05Q1/src/Tests.java:40
#, java-format
msgid "Avec le tableau {0}, votre méthode devrait retourner {1}.\n"
msgstr ""

#: m05Q10/src/Tests.java:31
#, java-format
msgid ""
"L''appel de votre méthode avec a = {0} et b = {1}\n"
"retourne {2} au lieux de {3}"
msgstr ""

#: m05Q11/src/Tests.java:31
#, java-format
msgid ""
"L''appel de votre méthode avec n = {0} et v = {1}\n"
"retourne {2} au lieux de {3}"
msgstr ""

#: m05Q12/src/TestsQ1.java:32 m05Q9/src/Tests.java:31
#, java-format
msgid "L''appel de votre méthode avec v = {0} retourne {1} au lieux de {2}"
msgstr ""

#: m05Q12/src/TestsQ2.java:32
#, java-format
msgid ""
"L''appel de votre méthode avec v = {0} doit donner {1}.\n"
"Or, vos modifications du tableau donnent {2}"
msgstr ""

#: m05Q2/src/Tests.java:40 m05Q3/src/Tests.java:40
#, java-format
msgid ""
"Avec le tableau {0}, votre méthode devrait retourner {1,number,#} mais elle "
"retourne {2,number,#}.\n"
msgstr ""

#: m05Q4/src/Tests.java:38
#, java-format
msgid ""
"Avec le tableau {0}, votre méthode devrait retourner {1} mais elle retourne "
"{2}.\n"
msgstr ""

#: m05Q5/src/Tests.java:33 m05Q6/src/Tests.java:38 m05dem3/src/Tests.java:39
msgid "Votre code retourne null."
msgstr ""

#: m05Q5/src/Tests.java:34
msgid "Votre tableau n'a pas la bonne taille."
msgstr ""

#: m05Q5/src/Tests.java:36
msgid "Un des élément de votre tableau n'a pas la bonne valeur."
msgstr ""

#: m05Q6/src/Tests.java:31 m05dem3/src/Tests.java:32
#, java-format
msgid ""
"Avec une taille de {0}, votre code génère :\n"
"\n"
"{1}\n"
"\n"
"Or, vous devriez avoir : \n"
"\n"
"{2}"
msgstr ""

#: m05Q6/src/Tests.java:32 m05dem3/src/Tests.java:33
msgid "Votre matrice n'a pas la bonne taille.\n"
msgstr ""

#: m05Q7/src/Tests.java:33
#, java-format
msgid ""
"Votre code retourne {0} à la place de {1} avec l''occurence {2} et le "
"tableau :\n"
"\n"
"{3}\n"
msgstr ""

#: m05Q7/src/Tests.java:79 m05Q8/src/Tests.java:87
msgid "Cette exception est survenue quand le tableau est :\n"
msgstr ""

#: m05Q8/src/Tests.java:33
#, java-format
msgid ""
"L''appel de votre méthode avec v = {0} et w = {1} et m = \n"
"{2}\n"
"retourne\n"
"{3}\n"
"au lieux de\n"
"{4}"
msgstr ""

#: m05_bf/src/Tests.java:35
#, java-format
msgid ""
"Votre méthode {0} ne modifie pas correctement le tableau.\n"
"Le tableau original est :\n"
"{1}\n"
"La réponse attendue est :\n"
"{2}\n"
"Votre tableau est :\n"
"{3}"
msgstr ""

#: m05_bf/src/Tests.java:36
#, java-format
msgid ""
"Votre méthode {0} ne modifie pas correctement le tableau avec n = {1}.\n"
"Le tableau original est :\n"
"{2}\n"
"La réponse attendue est :\n"
"{3}\n"
"Votre tableau est :\n"
"{4}"
msgstr ""

#: m05dem1/src/Tests.java:33
#, java-format
msgid ""
"Le tableau doit avoir une taille de {1}. Cependant, votre code crée un "
"tableau de taille {2}.\n"
msgstr ""

#: m05dem1/src/Tests.java:34
#, java-format
msgid ""
"La matrice devrait avoir {1} lignes et {2} colonnes. Cependant, votre code "
"crée une matrice de {3} lignes et {4} colonnes."
msgstr ""

#: m05dem1/src/Tests.java:36
msgid ""
"Vous n'effectuez pas la bonne opération pour obtenir le nombre de lignes.\n"
msgstr ""

#: m05dem1/src/Tests.java:37
msgid ""
"Vous n'effectuez pas la bonne opération pour obtenir le nombre de colonnes.\n"
msgstr ""

#: m05dem2/src/Tests.java:33
msgid "Le test t1 == t2 ne réussi pas.\n"
msgstr ""

#: m05dem2/src/Tests.java:34
#, java-format
msgid "Avec t1 = {1} et t2 = {2}, votre code ne donne pas le bon résultat."
msgstr ""

#: m05dem2/src/Tests.java:77
msgid "Les deux tableaux ne sont pas forcément de la même taille…"
msgstr ""

#: m05dem4/src/Tests.java:71
#, java-format
msgid "{0} : vous utilisez mal les assertions."
msgstr ""

#: m05dem4/src/Tests.java:79
#, java-format
msgid "{0} : votre code retourne null."
msgstr ""

#: m05dem4/src/Tests.java:81
#, java-format
msgid "{0} : votre code ne calcule pas la somme correctement."
msgstr ""

#: m05dem4/src/Tests.java:106 m05dem4/src/Tests.java:109
#, java-format
msgid "{0} : vous devez lancer un assert dans le cas où a et/ou b est null."
msgstr ""

#: m05dem4/src/Tests.java:106
msgid ""
"Faites aussi attention à l''ordre de vos assertions. Par exemple, "
"l''assertion qui vérifie que ''a'' est différent de null doit venir avant "
"l''assertion qui vérifie la taille de la matrice car sinon, vous allez "
"provoquer une NullPointerException."
msgstr ""

#: m05dem4/src/Tests.java:140
#, java-format
msgid ""
"{0} : vous devez lancer un assert dans le cas où les lignes/colonnes ne sont "
"pas TOUTES de le même longeur (si un des double tableaux est arrangé sous "
"forme triangle par exemple)."
msgstr ""

#: m05dem4/src/Tests.java:166
#, java-format
msgid ""
"{0} : vous devez lancer un assert dans le cas où les matrices ne sont pas de "
"la même taille."
msgstr ""

#: m05dem5/src/Tests.java:59
msgid ""
"Vous n'affichez pas correctement les Strings présents dans args. N'oubliez "
"pas de faire un retour à la ligne après chaque élément de args."
msgstr ""

#: m05dem5/src/Tests.java:91
#, java-format
msgid ""
"Avec args = {0} vous affichez ''{1}'' alors qu''il faut afficher ''{2}''.\n"
msgstr ""

#: m06Q1/src/TestCode.java:40
#, java-format
msgid "lorsque on fait new Date({0},{1},{2}), votre date est {3}/{4}/{5}"
msgstr ""

#: m06Q10/src/TestCode.java:68
#, java-format
msgid ""
"{0} : vous devez utiliser la méthode surface() pour récupérer les valeurs "
"des surfaces !"
msgstr ""

#: m06Q10/src/TestCode.java:96
#, java-format
msgid ""
"{0} : lorsque l''on compare les rectangle {1} et {2}, votre méthode devrait "
"renvoyer {3} mais ce n'est pas le cas !"
msgstr ""

#: m06Q11/src/TestParam.java:63
#, java-format
msgid ""
"Lorsque l''on exécute votre code avec les rectangles {0} et {1}, votre "
"méthode devrait renvoyer {2} mais ce n'est pas le cas !"
msgstr ""

#: m06Q2/src/TestCode.java:58
#, java-format
msgid ""
"{0} : lorsque l''on fait getJour() sur la date {1}, votre code renvoie {2} "
"au lieu de {3}"
msgstr ""

#: m06Q2/src/TestCode.java:73
#, java-format
msgid ""
"{0} : lorsque l''on fait getMois() sur la date {1}, votre code renvoie {2} "
"au lieu de {3}"
msgstr ""

#: m06Q2/src/TestCode.java:89
#, java-format
msgid ""
"{0} : lorsque l''on fait getAnnee() sur la date {1}, votre code renvoie {2} "
"au lieu de {3}"
msgstr ""

#: m06Q3/src/TestCode.java:62 m06Q4/src/TestCode.java:74
#: m06Q8/src/TestCode.java:67 m06Q9/src/TestCode.java:65
#: m06dem1/src/TestCode.java:56 m07Q2/src/TestCode.java:91
#: m07dem1/src/TestCode.java:158
#, java-format
msgid ""
"{0} : vous devez utiliser les getters pour récupérer les valeurs des "
"variables d''instances !"
msgstr ""

#: m06Q3/src/TestParam.java:62
#, java-format
msgid ""
"Test 2 : Attention, pour les date {0} et {1}, votre code devrait renvoyer "
"{2} mais ce n'est pas la cas !"
msgstr ""

#: m06Q4/src/TestParam.java:60
#, java-format
msgid ""
"Test 2 : Attention, pour la date {0} vous renvoyez {1} à la place de {2}"
msgstr ""

#: m06Q5/src/TestCode.java:59
#, java-format
msgid ""
"{0} : lorsque la fraction vaut {1}, votre méthode getNum() retourne {2} au "
"lieu de {3}"
msgstr ""

#: m06Q5/src/TestCode.java:74
#, java-format
msgid ""
"Test : lorsque la fraction vaut {0}, votre méthode getDen() retourne {1} au "
"lieu de {2}"
msgstr ""

#: m06Q6/src/TestCode.java:66
#, java-format
msgid ""
"{0} : vous devez utiliser les méthodes getNum() et getDen() pour récupérer "
"les valeurs des variables d''instances !"
msgstr ""

#: m06Q6/src/TestParam.java:62
#, java-format
msgid ""
"Test 2 : lorsque l''on lance la fonction entier() avec la fraction {0}, "
"votre code devrait renvoyer {1} mais ce n''est pas le cas."
msgstr ""

#: m06Q7/src/TestCode.java:59
#, java-format
msgid ""
"{0} : pour la paire {1}, votre méthode getX() renvoie {2} au lieu de {3}"
msgstr ""

#: m06Q7/src/TestCode.java:76
#, java-format
msgid ""
"{0} : pour la paire {1}, votre méthode getY() renvoie {2} au lieu de {3}"
msgstr ""

#: m06Q8/src/TestParam.java:70
#, java-format
msgid ""
"Test 2 : lorsque l''on exécute votre code avec les points {0} et {1}, votre "
"code renvoie {2} au lieu de {3}"
msgstr ""

#: m06Q9/src/TestCode.java:92
#, java-format
msgid ""
"{0} : lorsque l''on appelle votre méthode sur le rectangle {1}, elle renvoie "
"{2} au lieu de {3}"
msgstr ""

#: m06_bf/src/librairies/Inspector.java:216
#: m07_bf/src/librairies/Inspector.java:214 utilities/Inspector.java:168
#, java-format
msgid ""
"Le constructeur avec comme modificateur [{0}], comme types d''arguments {1} "
"et comme exceptions déclarée via throws {2} n''as pas été trouvé !"
msgstr ""

#: m06_bf/src/librairies/Inspector.java:220
#: m07_bf/src/librairies/Inspector.java:218 utilities/Inspector.java:172
#, java-format
msgid ""
"Le constructeur avec comme modificateur [{0}], comme types d''arguments {1} "
"n''as pas été trouvé !"
msgstr ""

#: m06_bf/src/librairies/Inspector.java:223
#: m07_bf/src/librairies/Inspector.java:221 utilities/Inspector.java:175
#, java-format
msgid ""
"Le constructeur avec comme types d''arguments {0} et comme exceptions "
"déclarée via throws {1} n''as pas été trouvé !"
msgstr ""

#: m06_bf/src/librairies/Inspector.java:226
#: m07_bf/src/librairies/Inspector.java:224 utilities/Inspector.java:178
#, java-format
msgid ""
"Le constructeur avec comme types d''arguments {0} n''as pas été trouvé !"
msgstr ""

#: m06_bf/src/librairies/Inspector.java:291
#: m07_bf/src/librairies/Inspector.java:289 utilities/Inspector.java:243
#, java-format
msgid ""
"La méthode avec comme modificateur [{0}], comme type de retour {1}, comme "
"nom {2}, comme type d''arguments {3} et comme exceptions déclarée via throws "
"{4} n''as pas été trouvée !"
msgstr ""

#: m06_bf/src/librairies/Inspector.java:295
#: m07_bf/src/librairies/Inspector.java:293 utilities/Inspector.java:247
#, java-format
msgid ""
"La méthode avec comme modificateur [{0}], comme type de retour {1}, comme "
"nom {2}, comme type d''arguments {3} n''as pas été trouvée !"
msgstr ""

#: m06_bf/src/librairies/Inspector.java:298
#: m07_bf/src/librairies/Inspector.java:296 utilities/Inspector.java:250
#, java-format
msgid ""
"La méthode avec comme type de retour {0}, comme nom {1}, comme type "
"d''arguments {2} et comme exceptions déclarée via throws {3} n''as pas été "
"trouvée !"
msgstr ""

#: m06_bf/src/librairies/Inspector.java:301
#: m07_bf/src/librairies/Inspector.java:299 utilities/Inspector.java:253
#, java-format
msgid ""
"La méthode avec comme type de retour {0}, comme nom {1}, comme type "
"d''arguments {2} n''as pas été trouvée !"
msgstr ""

#: m06_bf/src/TestCode.java:126 m06_bf/src/TestCode.java:150
#: m06_bf/src/TestCode.java:174 m06_bf/src/TestCode.java:197
#: m06_bf/src/TestCode.java:221
#, java-format
msgid ""
"{0} : aucun constructeur public prenant comme premier paramètre un String et "
"comme deuxième un float n''as été trouvé dans votre réponse !"
msgstr ""

#: m06_bf/src/TestCode.java:127
#, java-format
msgid ""
"{0} : lorsque l''on construit un nouvel objet Employe avec comme paramètre "
"{1} et {2,number,#}, il n''y a pas de variable d''instance de type {3} avec "
"la valeur {4}"
msgstr ""

#: m06_bf/src/TestCode.java:130
#, fuzzy
msgid ""
"Une erreur inattendu est survenue dans votre tâche, veuillez contactez une "
"administrateur"
msgstr "Se ha producido un error inesperado en la tarea: "

#: m06_bf/src/TestCode.java:151
#, java-format
msgid ""
"{0} : lorsque l''on a un employé avec le nom {1}, votre méthode getNom() "
"retourne {2}"
msgstr ""

#: m06_bf/src/TestCode.java:157 m06_bf/src/TestCode.java:180
#: m06_bf/src/TestCode.java:203 m06_bf/src/TestCode.java:230
#, java-format
msgid "{0} : la méthode {1} n''as pas été trouvée dans votre réponse !"
msgstr ""

#: m06_bf/src/TestCode.java:177
#, java-format
msgid ""
"{0} : lorsque l''on a un employé avec un salaire de {1}, votre méthode "
"getSalaire() retourne {2}"
msgstr ""

#: m06_bf/src/TestCode.java:200
#, java-format
msgid ""
"{0} : lorsque l''on a un l''Employe {1} avec le salaire {2}, votre méthode "
"toString retourn {3}"
msgstr ""

#: m06_bf/src/TestCode.java:226
#, java-format
msgid ""
"{0} : lorsque l''on a un Employe avec un salaire de {1} et que l''on "
"augmente de {2}, votre méthode fixe son salaire à {3}"
msgstr ""

#: m06dem1/src/TestCode.java:70
#, java-format
msgid ""
"{0} : Il semblerait que votre méthode renvoie un résultat incorrect. La "
"méthode doit renvoyer une nouvelle paire !"
msgstr ""

#: m06dem1/src/TestCode.java:92
#, java-format
msgid ""
"{0} : Votre méthode ne renvoie pas une paire avec les bonne valeurs. Pour la "
"pair ({1},{2}), vous renvoyez ({3},{4}) au lieu de ({5},{6})."
msgstr ""

#: m06dem1/src/TestCode.java:115
#, java-format
msgid ""
"{0} : Votre méthode semble modifier les variable d''instances de l''instance "
"appelante. La paire appelante vallait ({1},{2}) et vaut maintenant ({3},{4})."
msgstr ""

#: m06dem2/src/TestCode.java:55 m06dem2/src/TestCode.java:68
#: m06dem2/src/TestCode.java:85 m06dem2/src/TestCode.java:98
#, java-format
msgid ""
"{0} : vous devez utilisez setOrdered pour changer la valeur de ordered !"
msgstr ""

#: m06dem2/src/TestCode.java:113
#, java-format
msgid ""
"{0} : après l''appel à setA({1}), nous avons la paire ({2},{3}) et "
"''ordered'' devrait valoir {4} car {5} <= {6} mais ce n''est pas le cas"
msgstr ""

#: m06dem2/src/TestCode.java:149
#, java-format
msgid ""
"{0} : après l''appel à setB({1}), nous avons la paire ({2},{3}) et "
"''ordered'' devrait valoir {4} car {5} <= {6}, mais ce n''est pas le cas"
msgstr ""

#: m06dem2/src/TestCode.java:180
#, java-format
msgid "{0} : après l''appel à setA({1}), ''a'' vaut {2} au lieu de {3}"
msgstr ""

#: m06dem2/src/TestCode.java:181
#, java-format
msgid ""
"{0}: après l''appel à setA({1}), {2} ''a'' changé et est passé de {3} à {4}"
msgstr ""

#: m06dem2/src/TestCode.java:225
#, java-format
msgid "{0} : après l''appel setB({1}), ''b'' vaut {2} au lieu de {3}"
msgstr ""

#: m06dem2/src/TestCode.java:226
#, java-format
msgid ""
"{0} : après l''appel setB({0}) {2} ''a'' changé et est passé de {3} à {4}"
msgstr ""

#: m06dem3/src/TestCode.java:65
#, java-format
msgid ""
"{0} : Vous devez utiliser la méthode get() pour récupérer la valeur du "
"drapeau !"
msgstr ""

#: m06dem3/src/TestCode.java:80
#, java-format
msgid ""
"{0} : lorsque ''d'' a l''état {1} et que la variable drapeau vaut {2}, votre "
"méthode devrait retourner {3} mais ce n''est pas le cas."
msgstr ""

#: m06dem4/src/TestCode.java:53
#, java-format
msgid ""
"{0} : Attention, vous ne lisez pas toutes les lignes du fichier, vérifiez la "
"condition"
msgstr ""

#: m06dem4/src/TestCode.java:60
#, java-format
msgid "{0} : Vérifiez votre condition, vous avez provoqué une EOFException !"
msgstr ""

#: m06dem4/src/TestCode.java:77
#, java-format
msgid ""
"{0} : Le fichier ''student/cotes.txt'' n''est pas lu correctement. Vérifiez "
"la condition de boucle !"
msgstr ""

#: m06dem4/src/TestCode.java:98
#, java-format
msgid ""
"{0} : Vous avez causé une FileNotfoundException, vérifiez le nom du fichier !"
msgstr ""

#: m07Q1/src/TestParam.java:62
#, java-format
msgid ""
"Test 2 : lorsque l''on exécute votre code avec l'employé {0} par rapport à "
"l'objet {1}, votre code renvoie {2} au lieu de {3}"
msgstr ""

#: m07Q10/src/TestCode.java:80
#, java-format
msgid ""
"{0} : votre code ne semble pas renvoyez le bon String. Vous renvoyez\n"
"''{1}'' à la place de\n"
"''{2}''"
msgstr ""

#: m07Q10/src/TestCode.java:101
#, java-format
msgid ""
"{0} : votre code ne semble pas utiliser la méthode toString() de la classe "
"mère"
msgstr ""

#: m07Q11/src/TestParam.java:71
#, java-format
msgid ""
"Test 1 : lorsque l''on exécute votre méthode avec le DeStats {0} par rapport "
"à l''objet {1}, votre code renvoie {2} au lieu de {3}"
msgstr ""

#: m07Q2/src/TestCode.java:55
#, java-format
msgid ""
"{0} : votre code ne semble pas renvoyé un String contenant le nom de "
"l''employé !"
msgstr ""

#: m07Q2/src/TestCode.java:70
#, java-format
msgid ""
"{0} : votre code ne semble pas renvoyé un String contenant le salaire de "
"l''employé !"
msgstr ""

#: m07Q3/src/TestParam.java:72
#, java-format
msgid ""
"Test 1 : lorsque l''on exécute votre code avec le dé {0} par rapport à "
"l''objet {1}, votre code renvoie {2} au lieu de {3}"
msgstr ""

#: m07Q4/src/TestCode.java:75
#, java-format
msgid ""
"{0} : attention, votre constructeur ne construit pas un directeur avec le "
"bon nom !"
msgstr ""

#: m07Q4/src/TestCode.java:89
#, java-format
msgid ""
"{0} : attention, votre constructeur ne construit pas un directeur avec le "
"bon salaire !"
msgstr ""

#: m07Q4/src/TestCode.java:103
#, java-format
msgid ""
"{0} : attention, votre constructeur ne construit pas un directeur avec la "
"bonne prime !"
msgstr ""

#: m07Q5/src/TestCode.java:81
#, java-format
msgid ""
"{0} : vous devez faire appel à la méthode getSalaire() de la classe mère !"
msgstr ""

#: m07Q5/src/TestCode.java:100
#, java-format
msgid ""
"{0} : Pour le directeur {1}, votre méthode renvoie {2,number,#} au lieu de "
"{3,number,#}"
msgstr ""

#: m07Q6/src/TestParam.java:65
#, java-format
msgid ""
"Test 2 : lorsque l''on exécute votre code avec le directeur {0} par rapport "
"à l''objet {1}, votre code renvoie {2} au lieu de {3}"
msgstr ""

#: m07Q7/src/TestCode.java:76
#, java-format
msgid ""
"{0} : votre code ne semble pas initialiser un object DeStat avec le bon nom !"
msgstr ""

#: m07Q7/src/TestCode.java:91
#, java-format
msgid ""
"{0} : votre code ne semble pas initialiser un object DeStats avec le bon "
"nombre de lancers totaux !"
msgstr ""

#: m07Q7/src/TestCode.java:106
#, java-format
msgid ""
"{0} : votre code ne semble pas initialiser le tableau de résultats (il est "
"null) !"
msgstr ""

#: m07Q7/src/TestCode.java:121
#, java-format
msgid ""
"{0} : votre code ne semble pas initialiser le tableau de résultats avec la "
"bonne taille !"
msgstr ""

#: m07Q7/src/TestCode.java:137
#, java-format
msgid ""
"{0} : votre code ne semble pas initialiser le tableau de résultats avec les "
"bonnes valeurs !"
msgstr ""

#: m07Q8/src/TestCode.java:81
#, java-format
msgid "{0} : votre code ne semble pas renvoyer le résultat donné par le dé"
msgstr ""

#: m07Q8/src/TestCode.java:101
#, java-format
msgid ""
"{0} : votre code ne semble pas incrémenter correctement le nombre de "
"lancers !"
msgstr ""

#: m07Q8/src/TestCode.java:120
#, java-format
msgid ""
"{0} : votre code ne semble pas incrémenter correctement le nombre de lancers "
"pour un résultat particulier !"
msgstr ""

#: m07Q8/src/TestCode.java:141
#, java-format
msgid ""
"{0} : votre code ne semble pas appeler la méthode lance() de la classe mère"
msgstr ""

#: m07Q9/src/TestCode.java:76
#, java-format
msgid "{0} : votre code ne semble pas renvoyer le tableau de résultats"
msgstr ""

#: m07_bf/src/TestItem.java:57
#, java-format
msgid ""
"{0} : lorsque l''on exécute votre méthode avec l''item qui a comme auteur "
"{1}, comme titre {2} et comme numéros de série {3,number,#}, votre méthode "
"renvoie ''{4}'' au lieu de ''{5}''"
msgstr ""

#: m07_bf/src/TestCD.java:102
#, java-format
msgid ""
"{0} : aucun constructeur avec comme premier paramètre un String, comme "
"deuxième un String et comme troisème un int n''a été trouvé dans votre "
"réponse !"
msgstr ""

#: m07_bf/src/TestCD.java:106
msgid ""
"{0} : après avoir appelé votre constructeur avec les paramètre {1} (auteur), "
"{2} (titre} et {3} (durée), il manque certaines variables d''instance avec "
"ces valeurs !"
msgstr ""

#: m07_bf/src/TestCD.java:111
msgid "La méthode toString() n''as pas été trouvée dans votre réponse !"
msgstr ""

#: m07_bf/src/TestCD.java:114
#, java-format
msgid ""
"{0} : lorsque l''on exécute votre méthode toString() sur le CD ayant pour "
"auteur {1}, titre {2}, et durée {3,number,#}, votre méthode retourne\n"
"{4}\n"
"au lieu de\n"
"{5}"
msgstr ""

#: m07dem1/src/TestCode.java:123
#, java-format
msgid ""
"{0} : lorsque l''on appelle votre méthode avec les paires {1} et {2}, votre "
"code devrait renvoyer {3} mais ce n'est pas le cas !"
msgstr ""

#: m07dem2/src/TestCode.java:60
#, java-format
msgid "{0} : votre classe n''incrémente pas les tickets !"
msgstr ""

#: m07dem2/src/TestCode.java:75
#, java-format
msgid "{0} : le premier ticket n''as pas le numéro 1, il a le numéro {1}"
msgstr ""

#: m08Q1/src/TestCode.java:103 m08Q1/src/TestCode.java:124
#: m08Q1/src/TestCode.java:144
#, java-format
msgid "{0} : votre code construit une instance où s est null !"
msgstr ""

#: m08Q1/src/TestCode.java:106
#, java-format
msgid "{0} : votre code ne construit pas un StringTab de taille 1 !"
msgstr ""

#: m08Q1/src/TestCode.java:127
#, java-format
msgid ""
"{0} : lorsque l''on exécute votre constructeur avec comme paramètre {1}, la "
"première lettre de votre StringTab est {2}"
msgstr ""

#: m08Q1/src/TestCode.java:147
#, java-format
msgid ""
"{0} : lorsque l''on passe comme paramètre {1} à votre constructeur, vous "
"construisez un String de taille {2}"
msgstr ""

#: m08Q1/src/TestCode.java:164
#, java-format
msgid ""
"{0} : lorsque l''on passe comme paramètre {1} à votre constructeur, votre "
"tableau est {2}"
msgstr ""

#: m08Q1/src/TestCode.java:181
#, java-format
msgid ""
"{0} lorsque l''on utilise votre méthode length() sur le StringTab {1}, votre "
"méthode renvoie {2}"
msgstr ""

#: m08Q1/src/TestCode.java:199
#, java-format
msgid ""
"{0} lorsque l''on a le tableau {1} et que l''on fait charAt({2}), votre "
"méthode renvoie {3}"
msgstr ""

#: m08Q2/src/TestCode.java:109
#, java-format
msgid "{0} : lorsque l''on concatène {1} avec {2}, votre code renvoie {2}"
msgstr ""

#: m08Q3/src/TestParam.java:63
#, java-format
msgid ""
"Lorsque l''on vérifie que le StringTab {0} apparait dans {1}, votre code "
"renvoie {2} au lieu de {3}"
msgstr ""

#: m08Q4/src/TestAnd.java:71
#, java-format
msgid ""
"Test 8 : lorsque l''on fait un ET logique entre les ByteString {0} et {1} "
"(représentation en String), votre méthode retourne le Byte {2} au lieu de "
"{3} (représentation String)"
msgstr ""

#: m08Q4/src/TestGet.java:75
#, java-format
msgid ""
"Test 3 : lorsque l''on exécute votre méthode getBit({0}) sur le ByteString "
"dont la représentation naturelle est {1}, votre code renvoie {2} au lieu de "
"{3}."
msgstr ""

#: m08Q4/src/TestReset.java:73
#, java-format
msgid ""
"Test 5 : lorsque l''on exécute votre méthode resetBit({0}) sur le ByteString "
"dont la représentation en ByteString est {1}, le chaîne devient {2} au lieu "
"de {3}."
msgstr ""

#: m08Q4/src/TestRotate.java:70
#, java-format
msgid ""
"Test 7 : lorsque l''on exécute votre méthode rotateRight() sur le ByteString "
"{0}, la chaîne devient {1} au lieu de {2}"
msgstr ""

#: m08Q4/src/TestSet.java:80
#, java-format
msgid ""
"Test 4 : lorsque l''on exécute votre méthode setBit({0}) sur le ByteString "
"dont la représentation en ByteString est {1}, le chaîne devient {2} au lieu "
"de {3}."
msgstr ""

#: m08Q4/src/TestShift.java:70
#, java-format
msgid ""
"Test 6 : lorsque l''on exécute votre méthode shiftLeft() sur le ByteString "
"{0}, la chaîne devient {1} au lieu de {2}"
msgstr ""

#: m08Q4/src/TestConstruct.java:82
#, java-format
msgid ""
"{0} : votre code construit le byte {1} (représentation naturelle) au lieu du "
"byte 00000000 (représentation naturelle)"
msgstr ""

#: m08Q4/src/TestConstruct.java:83
#, java-format
msgid "{0} : votre code ne construit pas un String de taille 8"
msgstr ""

#: m08Q4/src/TestConstruct.java:104
#, java-format
msgid ""
"{0} : lorsque l''on passe comme argument {1} à votre constructeur, il crée "
"le byte {2} (représentation naturelle)"
msgstr ""

#: m08Q4/src/TestConstruct.java:108
#, java-format
msgid "{0} : votre code ne construit pas un byte de taille 8"
msgstr ""

#: m08Q5/src/TestGet.java:70
#, java-format
msgid ""
"Test 1 : lorsque l''on appelle votre méthode getBit({0}) avec comme byte {1} "
"(représentation en String), votre méthode renvoie {2} au lieu de {3}"
msgstr ""

#: m08Q5/src/TestReset.java:73
#, java-format
msgid ""
"Test 2 : lorsque l''on appelle votre méthode resetBit({0}) avec comme byte "
"{1} (représentation en String), le byte devient {2} au lieu de {3}"
msgstr ""

#: m08Q5/src/TestRotate.java:75
#, java-format
msgid ""
"Test 5 : lorsque l''on appelle votre méthode rotateRight() sur le String {0} "
"(représentation en String), il devient {1} au lieu de {2}"
msgstr ""

#: m08Q5/src/TestSet.java:73
#, java-format
msgid ""
"Test 2 : lorsque l''on appelle votre méthode setBit({0}) avec comme byte {1} "
"(représentation en String), le byte devient {2} au lieu de {3}"
msgstr ""

#: m08Q5/src/TestShift.java:75
#, java-format
msgid ""
"Test 4 : lorsque l''on appelle votre méthode shiftLeft() sur le byte {0} "
"(représentation en String), il devient {1} au lieu de {2}"
msgstr ""

#: m08Q6/src/TestMax.java:61
#, java-format
msgid ""
"Test max : lorsque l''on exécute la méthode max() avec le tableau {0}, le "
"résultat est {1} au lieu de {2}"
msgstr ""

#: m08Q6/src/TestMin.java:61
#, java-format
msgid ""
"Test min : lorsque l''on exécute la méthode min() avec le tableau {0}, le "
"résultat est {1} au lieu de {2}"
msgstr ""

#: m08Q6/src/TestMoyenne.java:59
#, java-format
msgid ""
"Test moyenne : lorsque l''on exécute la méthode moyenne() avec le tableau "
"{0}, le résultat est {1} au lieu de {2}"
msgstr ""

#: m08Q7/src/TestMax.java:60
#, java-format
msgid ""
"Test max : lorsque l''on exécute votre méthode max() sur la matrice\n"
"{0}\n"
"votre code renvoie {1} au lieu de {2}"
msgstr ""

#: m08Q7/src/TestMin.java:60
#, java-format
msgid ""
"Test min : lorsque l''on exécute votre méthode min() sur la matrice\n"
"{0}\n"
"votre code renvoie {1} au lieu de {2}"
msgstr ""

#: m08Q7/src/TestMoyenne.java:60
#, java-format
msgid ""
"Test moyenne : lorsque l''on exécute votre méthode moyenne() sur la matrice\n"
"{0}\n"
"votre code renvoie {1} au lieu de {2}"
msgstr ""

#: m08dem1/src/TestParam1.java:61
#, java-format
msgid ""
"Test 1 : lorsque l''on exécute votre méthode set({0}) sur un drapeau avec "
"l''état {1}, l''état du drapeau devient {2}"
msgstr ""

#: m08dem1/src/TestParam2.java:72
#, java-format
msgid ""
"Test 2 : lorsque l''on exécute votre méthode set(''{0}'') sur un drapeau "
"avec l''état {1}, l''état du drapeau devient {2}\n"
msgstr ""

#: m08dem2/src/TestCode.java:95
#, java-format
msgid "{0} : attention, lorsque s vaut null, vous renvoyez {1} au lieu de null"
msgstr ""

#: m08dem2/src/TestCode.java:109
#, java-format
msgid "{0} : attention, lorsque n vaut 0, vous renvoyez {1} au lieu de null"
msgstr ""

#: m08dem2/src/TestCode.java:129
#, java-format
msgid ""
"{0} : votre code ne semble pas répéter assez de fois la chaîne de carctère, "
"vérifiez votre condition!"
msgstr ""

#: m08dem2/src/TestCode.java:131
#, java-format
msgid ""
"{0} : votre code ne semble pas renvoyez un string contenant la chaîne de "
"caractère passé en paramètre!"
msgstr ""

#: m09Q1/src/TestParam.java:67
#, java-format
msgid ""
"Lorsque l''on appelle votre méthode avec la fraction {0} sur l''objet {1}, "
"votre méthode renvoie {2}. Relisez les spécifications !"
msgstr ""

#: m09Q2/src/TestParam.java:70
#, java-format
msgid ""
"Lorsque l''on appelle votre méthode avec l''employé {0} sur l''objet {1}, "
"votre méthode renvoie {2}. Relisez les spécifications !"
msgstr ""

#: m09Q3/src/TestCode.java:93 m09Q4/src/TestCode.java:92
#: m09Q7/src/TestCode.java:92
#, java-format
msgid "{0} : vous devez utiliser un BufferedReader !"
msgstr ""

#: m09Q3/src/TestCode.java:115
#, java-format
msgid ""
"{0} : vous ne faîtes pas appel à close lorsque la méthode se termine sans "
"erreur !"
msgstr ""

#: m09Q3/src/TestCode.java:131
#, java-format
msgid "{0} : votre code ne compte pas le bon nombre de lignes !"
msgstr ""

#: m09Q3/src/TestCode.java:155
#, java-format
msgid "{0} : vous ne renvoyez pas -1 lorsqu''une erreur se produit !"
msgstr ""

#: m09Q3/src/TestCode.java:159 m09Q3/src/TestCode.java:183
#: m09Q4/src/TestCode.java:119 m09Q4/src/TestCode.java:194
#: m09Q7/src/TestCode.java:117
#, java-format
msgid "{0} : vous ne gérez pas bien les IOExceptions !"
msgstr ""

#: m09Q3/src/TestCode.java:187 m09Q4/src/TestCode.java:198
#, java-format
msgid "{0} : vous ne fermez pas le flux lorsqu''une exception apparait !"
msgstr ""

#: m09Q4/src/TestParam.java:64
msgid " Test 1 : votre code en renvoie pas le bon résultat !"
msgstr ""

#: m09Q4/src/TestCode.java:115
#, java-format
msgid "{0} : vous ne renvoyez pas false lorsqu''une erreur se produit !"
msgstr ""

#: m09Q4/src/TestCode.java:139
#, java-format
msgid ""
"{0} : lorsque l''on appelle votre méthode avec un String se trouvant dans le "
"fichier, vous ne fermez pas le flux !"
msgstr ""

#: m09Q4/src/TestCode.java:168
#, java-format
msgid ""
"{0} : lorsque le String ''s'' ne se trouve pas dans le fichier, vous ne "
"fermez pas le flux !"
msgstr ""

#: m09Q5/src/TestCode.java:93
#, java-format
msgid ""
"{0} : lorsque le fichier n''existe pas, votre méthode devrait renvoyer false "
"mais ce n''est pas le cas !"
msgstr ""

#: m09Q5/src/TestCode.java:108
#, java-format
msgid ""
"{0} : lorsque le fichier existe et est accessible, votre méthode devrait "
"renvoyer true mais ce n''est pas le cas !"
msgstr ""

#: m09Q6/src/TestCode.java:89 m09Q6/src/TestCode.java:121
#, java-format
msgid "{0} : vous ne gérez pas les exceptions !"
msgstr ""

#: m09Q6/src/TestCode.java:123
#, java-format
msgid "{0} : vous ne faîtes pas appel à close() !"
msgstr ""

#: m09Q6/src/TestCode.java:194
#, java-format
msgid ""
"{0} : lorsque l''on exécute votre code avec le tableau {1}\n"
"le contenu de votre fichier est\n"
"{2}\n"
"au lieu de \n"
"{3}"
msgstr ""

#: m09Q7/src/TestCode.java:112
#, java-format
msgid "{0} : vous ne renvoyez pas null lorsqu''une IOException se produit !"
msgstr ""

#: m09Q7/src/TestCode.java:121
#, java-format
msgid "{0} : lorsqu''une IOException surgit, vous ne fermez pas le flux"
msgstr ""

#: m09Q7/src/TestCode.java:145
#, java-format
msgid ""
"{0} : vous ne renvoyez pas null lorsque le fichier a un mauvais format !"
msgstr ""

#: m09Q7/src/TestCode.java:149
#, java-format
msgid ""
"{0} : vous ne gérez pas le cas ou le fichier a un mauvais format de chiffre !"
msgstr ""

#: m09Q7/src/TestCode.java:151
#, java-format
msgid ""
"{0} : vous ne fermez pas le flux lorsque le fichier a un mauvais format de "
"chiffres !"
msgstr ""

#: m09Q7/src/TestCode.java:208
#, java-format
msgid ""
"{0} : lorsque l''on lit le fichier suivant\n"
"{1} avec votre méthode, vous renvoyez {2} au lieu de {3} !"
msgstr ""

#: m09Q7/src/TestCode.java:243
#, java-format
msgid ""
"{0} : lorsque tout se déroule sans exception, vous ne fermez pas le flux !"
msgstr ""

#: m09_bf/src/TestErr.java:52
msgid ""
"votre méthode n''affiche pas \"ERREUR\" sur la sortie d''erreur standard.\n"
msgstr ""

#: m09_bf/src/TestErr.java:63 m09_bf/src/Tests.java:61
#: m09_bf/src/TestsException.java:63
#, java-format
msgid "{0} : raté : "
msgstr "{0}: perdido: "

#: m09_bf/src/TestErr.java:72 m09_bf/src/Tests.java:69
#: m09_bf/src/TestsException.java:72
#, java-format
msgid "{0} : réussi\n"
msgstr "{0}: exitoso\n"

#: m09_bf/src/TestErr.java:80 m09_bf/src/TestsException.java:78
#, java-format
msgid "{0} : raté : votre programme génère une exception non gérée : "
msgstr ""

#: m09_bf/src/Tests.java:37
msgid ""
"votre méthode ne renvoie pas la bonne valeur du maximum sur un fichier "
"complètement erroné.\n"
msgstr ""

#: m09_bf/src/Tests.java:41
msgid ""
"votre méthode ne renvoie pas la bonne valeur du maximum sur un fichier avec "
"une ligne malformée contenant un maximum.\n"
msgstr ""

#: m09_bf/src/Tests.java:45
msgid ""
"votre méthode ne renvoie pas la bonne valeur du maximum sur un fichier avec "
"une ligne malformée.\n"
msgstr ""

#: m09_bf/src/Tests.java:50
msgid ""
"votre méthode ne renvoie pas la bonne valeur du maximum avec un fichier au "
"bon format.\n"
msgstr ""

#: m09_bf/src/TestsException.java:52
msgid "votre méthode ne gère pas les IOExceptions.\n"
msgstr ""

#: m09dem1/src/TestParam.java:66
#, java-format
msgid ""
"Lorsque l''on appelle votre méthode sur l''Integer {0} avec comme argument "
"{1}, votre méthode dit qu''ils sont égaux !"
msgstr ""

#: m09dem1/src/TestParam.java:67
#, java-format
msgid ""
"Lorsque l''on appelle votre méthode sur l''Integer {0} avec comme argument "
"{1}, votre méthode dit que {0} < {1}"
msgstr ""

#: m09dem1/src/TestParam.java:68
#, java-format
msgid ""
"Lorsque l''on appelle votre méthode sur l''Integer {0} avec comme argument "
"{1}, votre méthode dit que {0} > {1}"
msgstr ""

#: m09dem2/src/TestCode.java:98
#, java-format
msgid ""
"{0} : attention, lorsqu''une exception est lancée, votre code doit renvoyer "
"-1 !"
msgstr ""

#: m09dem2/src/TestCode.java:103
#, java-format
msgid "{0} : attention, vous ne gérer pas les exceptions !"
msgstr ""

#: m09dem2/src/TestRes.java:99
#, java-format
msgid ""
"{0} : vous ne lisez pas bien le fichier, le résultat n'est pas celui "
"attendu !"
msgstr ""

#: m10Q1/src/Tests.java:53
#, java-format
msgid ""
"Avec les fractions f1=\"{0}\" et f2=\"{1}\", la réponse attendue est\n"
"{2}\n"
"Malheureusement, votre code renvoie \n"
"{3}\n"
msgstr ""

#: m10Q2/src/Tests.java:49
#, java-format
msgid ""
"{0} : le test avec une fraction avec 0 au dénominateur ne fonctionne pas : "
msgstr ""

#: m10Q2/src/Tests.java:54
#, java-format
msgid "{0} : le test avec un string null ne fonctionne pas : "
msgstr ""

#: m10Q2/src/Tests.java:59
#, java-format
msgid ""
"{0} : le test avec un string non-conforme au format \"a/b\" ne fonctionne "
"pas : "
msgstr ""

#: m10Q2/src/Tests.java:65
msgid "lancez-vous la bonne exception ? \n"
msgstr ""

#: m10Q2/src/Tests.java:66
msgid "vérifiez que vous gérez bien ce cas. \n"
msgstr ""

#: m10Q2/src/Tests.java:86
#, java-format
msgid "{0} : le test avec un string correct ne fonctionne pas : "
msgstr ""

#: m10Q2/src/Tests.java:92
msgid "respectez vous le format \"a/b\" ?\n"
msgstr ""

#: m10Q2/src/Tests.java:93
msgid "modifiez-vous les variables d'instances de la classe Fraction ?\n"
msgstr ""

#: m10Q3/src/Tests.java:85
#, java-format
msgid ""
"{0} : le test de parsing d'un string qui n'est pas un double ne passe pas : "
msgstr ""

#: m10Q3/src/Tests.java:90
#, java-format
msgid ""
"{0} : le test avec un étudiant possédant une cote supérieure à 20 ne passe "
"pas : "
msgstr ""

#: m10Q3/src/Tests.java:95
#, java-format
msgid ""
"{0} : le test avec un étudiant possédant une cote négative ne passe pas : "
msgstr ""

#: m10Q3/src/Tests.java:101
msgid "vous ne lancez pas la bonne exception.\n"
msgstr ""

#: m10Q3/src/Tests.java:102
msgid "vous ne lancez pas une exception dans les cas particuliers.\n"
msgstr ""

#: m10Q3/src/Tests.java:122 m10Q3/src/Tests.java:127
#, java-format
msgid "{0} : les cotes sont comprises entre 0 et 20 !\n"
msgstr ""

#: m10Q3/src/Tests.java:132
#, java-format
msgid "{0} : le test avec un string correct ne passe pas : "
msgstr ""

#: m10Q3/src/Tests.java:138
msgid ""
"vous ne respectez pas le format \"nom; cote1, cote2, cote3\" avec les cotes "
"<=20 et >=0.\n"
msgstr ""

#: m10Q3/src/Tests.java:139
msgid ""
"vous n'initialisez pas correctement les variables d'instances de la classe "
"Student.\n"
msgstr ""

#: m10Q4/src/TestListAdd.java:85
#, java-format
msgid ""
"@{0} :\n"
"la fonction add avec l''AList\n"
"{1}\n"
"l''objet {2} et l''index {3} doit modifier la liste en\n"
"{4}\n"
"pourtant, votre code donne\n"
"{5}\n"
msgstr ""

#: m10Q4/src/TestListAdd.java:96
msgid ""
"votre méthode add() tente d'accéder à un index hors de l'AList sans "
"l'agrandir !\n"
msgstr ""

#: m10Q4/src/TestListAdd.java:98
msgid "votre méthode add() lance une exception ("
msgstr ""

#: m10Q4/src/TestListContains.java:83
#, java-format
msgid ""
"@{0} :\n"
"la fonction contains avec l''AList\n"
"{1}\n"
"et l''objet {2} doit renvoyer\n"
"{3}\n"
"pourtant, votre code donne\n"
"{4}\n"
msgstr ""

#: m10Q4/src/TestListContains.java:84
#, java-format
msgid ""
"@{0} :\n"
"votre méthode contains ne doit pas modifier le tableau !\n"
msgstr ""

#: m10Q4/src/TestListContains.java:95
msgid "votre méthode contains() tente d'accéder à un index hors de l'AList !\n"
msgstr ""

#: m10Q4/src/TestListContains.java:97
msgid "votre méthode contains() lance une exception ("
msgstr ""

#: m10Q4/src/TestListGet.java:83
#, java-format
msgid ""
"@{0} :\n"
"la fonction get avec l''AList\n"
"{1}\n"
"et l''indice {2} doit renvoyer\n"
"{3}\n"
"pourtant, votre code donne\n"
"{4}\n"
msgstr ""

#: m10Q4/src/TestListGet.java:84
#, java-format
msgid ""
"@{0} :\n"
"votre méthode get ne doit pas modifier le tableau !\n"
msgstr ""

#: m10Q4/src/TestListGet.java:95
msgid ""
"votre méthode get() tente d'accéder à un index hors de l'AList ! Pensez à "
"regarder les pré-conditions.\n"
msgstr ""

#: m10Q4/src/TestListGet.java:97
msgid "votre méthode get() lance une exception ("
msgstr ""

#: m10Q4/src/TestListSet.java:72
#, java-format
msgid ""
"@{0} :\n"
"la fonction set avec l''AList\n"
"{1}\n"
"l''objet {2} et l''index {3} doit modifier la liste en\n"
"{4}\n"
"pourtant, votre code donne\n"
"{5}\n"
msgstr ""

#: m10Q4/src/TestListSet.java:83
msgid ""
"votre méthode set() tente d'accéder à un index hors de l'AList sans "
"l'agrandir !\n"
msgstr ""

#: m10Q4/src/TestListSet.java:85
msgid "votre méthode set() lance une exception ("
msgstr ""

#: m10Q5/src/VectorTest.java:46
#, java-format
msgid ""
"Lors de l''exécution de votre méthode loadVector() avec comme argument un "
"fichier contenant \n"
"{0}\n"
"votre méthode a lancé une exception "
msgstr ""

#: m10Q5/src/VectorTest.java:55
#, java-format
msgid ""
"Lors de l''exécution de votre méthode loadVector() avec comme argument un "
"fichier contenant \n"
"{0}\n"
"votre méthode a retourné le tableau {1} alors que le résultat attendu est {2}"
msgstr ""

#: m10Q5/src/VectorTestMock.java:32 m10Q6/src/MatrixTestMock.java:31
msgid "génère une IOException"
msgstr ""

#: m10Q5/src/VectorTestMock.java:33
#, java-format
msgid ""
"Lors de l''exécution de votre méthode loadVector() avec un fichier qui {0}, "
"votre méthode a lancé une exception "
msgstr ""

#: m10Q5/src/VectorTestMock.java:34
#, java-format
msgid ""
"Lors de l''exécution de votre méthode loadVector() avec un fichier qui {0}, "
"votre méthode a retourné le tableau {1} alors que le résultat attendu est "
"null. "
msgstr ""

#: m10Q5/src/VectorTestMock.java:65
msgid ""
"Lors de l'exécution de votre méthode loadVector() avec une IOException "
"lancée par le readLine() du BufferedReader, le fichier n'a pas été fermé "
"correctement."
msgstr ""

#: m10Q5/src/VectorTestMock.java:129
msgid "n''existe pas"
msgstr ""

#: m10Q6/src/MatrixTest.java:90
#, java-format
msgid ""
"Lors de l''exécution de votre méthode loadMatrix avec comme argument un "
"fichier contenant \n"
"{0}, votre méthode a lancé une exception "
msgstr ""

#: m10Q6/src/MatrixTest.java:97
#, java-format
msgid ""
"Lors de l''exécution de votre méthode loadMatrix avec comme argument un "
"fichier contenant \n"
"{0}, votre méthode a retourné le tableau {1} alors que le résultat attendu "
"est {2}"
msgstr ""

#: m10Q6/src/MatrixTestMock.java:32
#, java-format
msgid ""
"Lors de l''exécution de votre méthode loadMatrix avec un fichier qui {0}, "
"votre méthode a lancé une exception."
msgstr ""

#: m10Q6/src/MatrixTestMock.java:33
#, java-format
msgid ""
"Lors de l''exécution de votre méthode loadMatrix avec un fichier qui {0}, "
"votre méthode a retourné le tableau {1} alors que le résultat attendu est "
"null. "
msgstr ""

#: m10Q6/src/MatrixTestMock.java:63
msgid ""
"Lors de l'exécution de votre méthode loadVector avec une IOException lancée "
"par le readLine() du BufferedReader, le fichier n'a pas été fermé "
"correctement."
msgstr ""

#: m10Q6/src/MatrixTestMock.java:125
msgid "n'existe pas"
msgstr ""

#: m10dem1/src/Tests.java:42
msgid "vérifiez l'output sur la sortie standard (stdOut).\n"
msgstr ""

#: m10dem1/src/Tests.java:43
msgid "vérifiez l'output sur la sortie d'erreur standard (stdErr).\n"
msgstr ""

#: m10dem1/src/Tests.java:44 m10dem1/src/TestOut.java:26
msgid "vérifiez les valeurs de retour de votre programme.\n"
msgstr ""

#: m10dem1/src/Tests.java:45 m10dem1/src/TestOut.java:27
msgid "vérifiez que vous gérez bien les exceptions.\n"
msgstr ""

#: m10dem1/src/Tests.java:82
msgid "la division par 0 ne donne pas le résultat attendu : \n"
msgstr ""

#: m10dem1/src/Tests.java:90
msgid ""
"le parsing d''un String composé de lettres ne donne pas le résultat "
"attendu : \n"
msgstr ""

#: m10dem1/src/TestOut.java:49
msgid ""
"tous les arguments ne sont pas vérifiés ! Appelez divise avec tous les "
"arguments !\n"
msgstr ""

#: m10dem2/src/TestContenuFichier.java:47
msgid ""
"Vous n'écrivez pas tous les n premiers entiers positifs ou vous ne fermez "
"votre flux.\n"
msgstr ""

#: m10dem2/src/TestContenuFichier.java:48
msgid "Vous n'écrivez pas tous les n premiers entiers positifs"
msgstr ""

#: m10dem2/src/TestContenuFichier.java:49
msgid "Vous écrivez plus d'un entier par ligne.\n"
msgstr ""

#: m10dem2/src/TestContenuFichier.java:50
msgid "vous écrivez plus d'un entier par ligne.\n"
msgstr ""

#: m10dem2/src/TestContenuFichier.java:118
msgid " et "
msgstr ""

#: m10dem2/src/TestValeurRetour.java:51
msgid ""
"La valeur de retour de votre programme n'est pas correcte dans le cas où il "
"y a une IOException."
msgstr ""

#: m10dem2/src/TestValeurRetour.java:72
msgid ""
"La valeur de retour de votre programme n'est pas correcte dans le cas où "
"tout se déroule bien."
msgstr ""

#: m11Q1/Templates/PileInt.java:99 m11Q2/Templates/Pile.java:110
msgid "Pile vide\n"
msgstr ""

#: m11Q1/Templates/PileInt.java:107 m11Q2/Templates/Pile.java:118
msgid ""
"Attention : votre pile est mal formée. Parcourir votre pile provoque une "
"boucle infinie…"
msgstr ""

#: m11Q1/Templates/PileInt.java:109
#, java-format
msgid ""
"Sommet : Noeud[{0}]\n"
"Profondeur : {1}\n"
msgstr ""

#: m11Q1/Templates/PileInt.java:113 m11Q2/Templates/Pile.java:124
#: m11Q3/Templates/FIFOQueue.java:118 m11Q6/Templates/Liste.java:143
#, java-format
msgid "Noeud[{0}] : contenu : {1}, noeud suivant : Noeud[{2}]\n"
msgstr ""

#: m11Q1/Templates/PileInt.java:116 m11Q2/Templates/Pile.java:127
#: m11Q3/Templates/FIFOQueue.java:121 m11Q6/Templates/Liste.java:146
#, java-format
msgid "Noeud[{0}] : contenu : {1}, noeud suivant : null\n"
msgstr ""

#: m11Q1/Templates/PileInt.java:120
#, java-format
msgid ""
"Attention : la variable d''instance ''{0}'' ({1}) ne correspond pas au "
"nombre d''entiers sur la pile.\n"
msgstr ""

#: m11Q1/src/Tests.java:40 m11Q2/src/Tests.java:40
#, java-format
msgid ""
"Vous ne retournez pas le bon sommet de la pile. Quand le sommet est {0}, "
"votre méthode pop() retourne {1}"
msgstr ""

#: m11Q1/src/Tests.java:41 m11Q2/src/Tests.java:41
msgid ""
"Voici l'évolution de votre pile durant les tests afin que vous puissiez "
"corriger votre code :\n"
"\n"
msgstr ""

#: m11Q1/src/Tests.java:55
msgid ""
"Lorsque l'on exécute votre méthode pop() sur une pile vide, elle ne lance "
"pas l'exception IllegalStateException.\n"
msgstr ""

#: m11Q1/src/Tests.java:79 m11Q1/src/Tests.java:85
msgid "Le sommet de votre pile vaut null après un push().\n"
msgstr ""

#: m11Q1/src/Tests.java:80
msgid "L'élément au sommet de votre pile ne vaut pas 4 après un push(4).\n"
msgstr ""

#: m11Q1/src/Tests.java:81
msgid "La méthode depth() ne retourne pas 1 après un push().\n"
msgstr ""

#: m11Q1/src/Tests.java:86
msgid "L'élément au sommet de votre pile ne vaut pas 6 après un push(6).\n"
msgstr ""

#: m11Q1/src/Tests.java:87
msgid ""
"La méthode depth() ne retourne pas 2 après avoir effectué 2 fois la méthode "
"push().\n"
msgstr ""

#: m11Q1/src/Tests.java:88
msgid ""
"Le noeud suivant du sommet vaut null après avoir effectué 2 fois la méthode "
"push().\n"
msgstr ""

#: m11Q1/src/Tests.java:89
msgid ""
"L'élément suivant du sommet (l'élément tout en dessous de la pile) ne vaut "
"pas 4 après avoir effectué push(4) suivi d'un push(6).\n"
msgstr ""

#: m11Q1/src/Tests.java:142 m11Q2/src/Tests.java:134
msgid "Pile après l'opération : "
msgstr ""

#: m11Q1/src/Tests.java:166 m11Q2/src/Tests.java:155
msgid "Cette erreur est survenue quand la pile est :\n"
msgstr ""

#: m11Q2/Templates/Pile.java:120
#, java-format
msgid "Sommet : Noeud[{0}]\n"
msgstr ""

#: m11Q2/src/Tests.java:75
#, java-format
msgid ""
"Votre méthode depth() retourne {0} alors que la véritable profondeur est "
"{1}. Voici la pile :\n"
"\n"
"{2}"
msgstr ""

#: m11Q2/src/Tests.java:79
msgid "Votre méthode a modifié la pile. C'est inacceptable."
msgstr ""

#: m11Q2/src/Tests.java:93
msgid "Votre méthode pop() doit retourner null si la pile est vide.\n"
msgstr ""

#: m11Q3/Templates/FIFOQueue.java:95 m11Q4/Templates/Queue.java:109
msgid "Queue vide\n"
msgstr ""

#: m11Q3/Templates/FIFOQueue.java:97 m11Q4/Templates/Queue.java:111
#: m11Q5/Templates/OrderedList.java:132 m11Q5/Templates/OrderedList.java:134
#, java-format
msgid "Attention ''{0}'' pointe vers null mais pas ''{1}'' !\n"
msgstr ""

#: m11Q3/Templates/FIFOQueue.java:105 m11Q4/Templates/Queue.java:119
msgid ""
"Attention : votre queue est mal formée. Parcourir votre queue provoque une "
"boucle infinie…\n"
msgstr ""

#: m11Q3/Templates/FIFOQueue.java:107 m11Q4/Templates/Queue.java:121
#, java-format
msgid "Entrée : Noeud[{0}]\n"
msgstr ""

#: m11Q3/Templates/FIFOQueue.java:110 m11Q4/Templates/Queue.java:124
#, java-format
msgid "Attention : ''{0}'' pointe vers un noeud non présent dans la queue !\n"
msgstr ""

#: m11Q3/Templates/FIFOQueue.java:112 m11Q4/Templates/Queue.java:126
#, java-format
msgid "Sortie : Noeud[{0}]\n"
msgstr ""

#: m11Q3/Templates/FIFOQueue.java:114 m11Q4/Templates/Queue.java:128
#, java-format
msgid "Attention ''{0}'' pointe vers null !\n"
msgstr ""

#: m11Q3/src/Tests.java:40 m11Q4/src/Tests.java:96
msgid "Quand la queue est vide, vous devez retourner null.\n"
msgstr ""

#: m11Q3/src/Tests.java:56
msgid "Quand la queue ne contient qu'un élément, vous retournez null !\n"
msgstr ""

#: m11Q3/src/Tests.java:57
msgid ""
"Quand la queue ne contient qu'un élément, vous vous ne le retournez pas "
"correctment.\n"
msgstr ""

#: m11Q3/src/Tests.java:58 m11Q3/src/Tests.java:59 m11Q4/src/Tests.java:115
#: m11Q4/src/Tests.java:116
#, java-format
msgid ""
"Vous n''avez pas mis la variable ''{0}'' à null quand la queue contient un "
"seul élément et qu''on le retire.\n"
msgstr ""

#: m11Q3/src/Tests.java:97 m11Q4/src/Tests.java:153
#, java-format
msgid ""
"Vous n''avez pas bien mis à jour la queue en retirant un noeud de la "
"structure. La queue avant l''opération retire() est :\n"
"{0}\n"
"La queue attendue est :\n"
"{1}\n"
"Votre queue est :\n"
"{2}"
msgstr ""

#: m11Q3/src/Tests.java:98 m11Q4/src/Tests.java:154 m11Q5/src/Tests.java:158
#, java-format
msgid ""
"Vous avez retourné {0} alors que la réponse attendue est {1}. Le queue "
"est :\n"
"{2}"
msgstr ""

#: m11Q3/src/Tests.java:106 m11Q4/src/Tests.java:162
msgid "Cette erreur est survenue quand la queue est :\n"
msgstr ""

#: m11Q4/Templates/Queue.java:131 m11Q4/Templates/Queue.java:132
#: m11Q5/Templates/OrderedList.java:148 m11Q5/Templates/OrderedList.java:149
#, java-format
msgid "Noeud[{0}]"
msgstr ""

#: m11Q4/Templates/Queue.java:133 m11Q5/Templates/OrderedList.java:150
#, java-format
msgid ""
"Noeud[{0}] : contenu : {1}, noeud précérent : {2}, noeud suivant : {3}\n"
msgstr ""

#: m11Q4/src/Tests.java:53 m11Q4/src/Tests.java:54
#, java-format
msgid ""
"Quand la queue est vide, et qu''on ajoute un noeud à votre queue, ''{0}'' "
"vaut null alors qu''il devrait référer un nouveau noeud.\n"
msgstr ""

#: m11Q4/src/Tests.java:55
#, java-format
msgid ""
"Quand la queue est vide, et qu''on ajoute un noeud à votre queue, ''{0}'' et "
"la ''{1}'' ne réfèrent pas le même noeud.\n"
msgstr ""

#: m11Q4/src/Tests.java:56
msgid ""
"Quand la queue est vide, et qu'on ajoute un noeud à votre queue, ce noeud ne "
"contient pas le bon élément.\n"
msgstr ""

#: m11Q4/src/Tests.java:76
#, java-format
msgid ""
"Vous n''avez pas bien mis à jour la queue en ajoutant un noeud dans la "
"structure. La queue avant l''opération ajoute() est :\n"
"{0}\n"
"La queue attendue est :\n"
"{1}\n"
"Votre queue est :\n"
"{2}"
msgstr ""

#: m11Q5/Templates/OrderedList.java:130 m11Q6/Templates/Liste.java:129
msgid "Liste vide\n"
msgstr ""

#: m11Q5/Templates/OrderedList.java:142 m11Q6/Templates/Liste.java:137
msgid ""
"Attention : votre liste est mal formée. Parcourir votre liste provoque une "
"boucle infinie…\n"
msgstr ""

#: m11Q5/Templates/OrderedList.java:144
#, java-format
msgid "Min : Noeud[{0}]\n"
msgstr ""

#: m11Q5/Templates/OrderedList.java:145
#, java-format
msgid "Max : Noeud[{0}]\n"
msgstr ""

#: m11Q5/src/Tests.java:53 m11Q5/src/Tests.java:54
#, java-format
msgid ""
"Quand la liste est vide, et qu''on ajoute un noeud à votre liste, ''{0}'' "
"vaut null alors qu''il devrait référer un nouveau noeud.\n"
msgstr ""

#: m11Q5/src/Tests.java:55
#, java-format
msgid ""
"Quand la liste est vide, et qu''on ajoute un noeud à votre liste, ''{0}'' et "
"la ''{1}'' ne réfèrent pas le même noeud.\n"
msgstr ""

#: m11Q5/src/Tests.java:56
msgid ""
"Quand la liste est vide, et qu'on ajoute un noeud à votre liste, ce noeud ne "
"contient pas le bon élément.\n"
msgstr ""

#: m11Q5/src/Tests.java:76
#, java-format
msgid ""
"Vous n''avez pas bien mis à jour la liste en ajoutant un noeud dans la "
"structure. La liste avant l''opération ajoute() est :\n"
"{0}\n"
"La liste attendue est :\n"
"{1}\n"
"Votre liste est :\n"
"{2}"
msgstr ""

#: m11Q5/src/Tests.java:102
msgid ""
"Vous ne lancez pas une IllegalStateException quand on essaye de retirer un "
"élément alors que la liste est vide.\n"
msgstr ""

#: m11Q5/src/Tests.java:119 m11Q5/src/Tests.java:120
#, java-format
msgid ""
"Vous n''avez pas mis la variable ''{0}'' à null quand la liste contient un "
"seul élément et qu''on le retire.\n"
msgstr ""

#: m11Q5/src/Tests.java:157
#, java-format
msgid ""
"Vous n''avez pas bien mis à jour la liste en retirant un noeud de la "
"structure. La liste avant l''opération retire() est :\n"
"{0}\n"
"La liste attendue est :\n"
"{1}\n"
"Votre liste est :\n"
"{2}"
msgstr ""

#: m11Q5/src/Tests.java:166 m11Q6/src/Tests.java:134
msgid "Cette erreur est survenue quand la liste est :\n"
msgstr ""

#: m11Q6/Templates/Liste.java:139
#, java-format
msgid "Tête : Noeud[{0}]\n"
msgstr ""

#: m11Q6/src/Tests.java:81
msgid "Vous devez retourner 0 quand la liste est vide.\n"
msgstr ""

#: m11Q6/src/Tests.java:116
msgid "Votre méthode a modifié la liste. C'est inacceptable.\n"
msgstr ""

#: m11Q6/src/Tests.java:117
#, java-format
msgid ""
"{0}(\"{1}\") a retourné {2} avec la liste :\n"
"{3}"
msgstr ""

#: m11Q6/src/Tests.java:126
#, java-format
msgid ""
"Vous retournez {0} alors qu''il faut retourner {1} lors de l''appel de {2}"
"(\"{3}\") sur la liste :\n"
"{4}"
msgstr ""

#: m11Q6/src/Tests.java:129
#, java-format
msgid ""
"Votre méthode {0}(\"{1}\") ne retire pas correctement les éléments.\n"
"La liste est :\n"
"{2}\n"
"Votre liste modifiée est :\n"
"{3}\n"
"La liste attendue est :\n"
"{4}"
msgstr ""

#: mX1Q19/src/Tests.java:33
#, java-format
msgid "{1} en valeur absolue donne {2}. Cependant, votre code calcule {3}.\n"
msgstr ""

#: mX1Q19/src/Tests.java:34
#, java-format
msgid "{1} arrondi au dessus donne {2}. Cependant, votre code calcule {3}.\n"
msgstr ""

#: mX1Q19/src/Tests.java:35
#, java-format
msgid "{1} arrondi donne {2}. Cependant, votre code calcule {3}.\n"
msgstr ""

#: mX1Q19/src/Tests.java:36
#, java-format
msgid "{1} arrondi en dessous donne {2}. Cependant, votre code calcule {3}.\n"
msgstr ""

#: m01Q12/custom_translatable.py:29
msgid "Il est interdit d'utiliser Math.max, même en commentaires."
msgstr ""

#: m01Q13/custom_translatable.py:29
msgid "Il est interdit d'utiliser Math.min, même en commentaires."
msgstr ""

#: m01Q5/custom_translatable.py:29
msgid ""
"Il est interdit d'utiliser l'opérateur xor (^) de java, même en commentaires."
msgstr ""

#: m02Q1/custom_translatable.py:29
msgid "Il est interdit d'utiliser le modulo de java, même en commentaires."
msgstr ""

#: m02dem3/custom_translatable.py:29
msgid "Il est interdit d'utiliser Math.pow, même en commentaires."
msgstr ""

#: m04Q10/custom_translatable.py:29 m04Q9/custom_translatable.py:29
msgid ""
"Il est interdit d'utiliser une méthode de parsing déjà implémentée, même en "
"commentaires."
msgstr ""

#: m04Q6/custom_translatable.py:29 m04Q8/custom_translatable.py:29
msgid ""
"Il est interdit d'utiliser la méthode contains() de la classe String, même "
"en commentaires."
msgstr ""

#: m04Q8/custom_translatable.py:33
msgid ""
"Il est interdit d'utiliser la méthode indexOf() de la classe String, même en "
"commentaires."
msgstr ""

#: m04dem3/custom_translatable.py:29
msgid ""
"Vous n'avez pas besoin de l'instruction return dans cet exercice ! Observez "
"la signature de votre méthode."
msgstr ""

#: m04dem4/custom_translatable.py:29
msgid "Vous n'utilisez pas la méthode Character.toUpperCase()."
msgstr ""

#: m04dem4/custom_translatable.py:36
msgid ""
"Il est interdit d'utiliser autre chose que Character.toUpperCase(), même en "
"commentaires."
msgstr ""

#: utilities/examples/custom_translatable.py:31
msgid "Il est interdit d'utiliser ?????, même en commentaires."
msgstr ""

#. name
#: course.yaml
msgid "[CS1-Java] Introduction à la programmation avec Java"
msgstr ""

#. author
#: 105_java/task.yaml 106_java/task.yaml 108_java/task.yaml 111_java/task.yaml
#: 112_java/task.yaml 85_java/task.yaml 88_java/task.yaml m06_bf/task.yaml
msgid "Virginie Van den Schrieck"
msgstr ""

#. context
#: 105_java/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"    <p>\n"
"      Complétez les champs ci-dessous conformément à l'énoncé de la phase de "
"réalisation de la mission 7.\n"
"    </p>\n"
"\n"
msgstr ""

#. name
#: 105_java/task.yaml
msgid "Mission 7 : Phase de réalisation"
msgstr ""

#. name, ArticleReparation, header
#: 105_java/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"    <p class='lead'></p>\n"
"    <p>\n"
"      Ecrivez ici le code de la classe ArticleReparation\n"
"    </p>Classe ArticleReparation.java, étendant Article\n"
"\n"
msgstr ""

#. name, Piece, header
#: 105_java/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"    <p class='lead'></p>\n"
"    <p>\n"
"      Ecrivez ici le code de la classe Piece\n"
"    </p>Classe Piece.java, étendant Article :\n"
"\n"
msgstr ""

#. name, ArticlePiece, header
#: 105_java/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"    <p class='lead'></p>\n"
"    <p>\n"
"      Ecrivez ici le code de la classe ArticlePiece\n"
"    </p>Classe ArticlePiece.java, étendant Article :\n"
"\n"
msgstr ""

#. name, Facture, header
#: 105_java/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"    <p class='lead'></p>\n"
"    <p>\n"
"      Ecrivez ici le code de la classe Facture, avec les modifications et "
"les méthodes supplémentaires demandées\n"
"    </p>Classe Facture.java :\n"
"\n"
msgstr ""

#. context
#: 106_java/task.yaml
#, python-format
msgid ""
".. raw:: html\n"
"\n"
"    <p>\n"
"      On vous demande d'écrire deux classes, Temps et Chanson.\n"
"    </p>\n"
"    <p>\n"
"      La classe Temps représente un temps décomposé en heures, minutes et "
"secondes. Elle doit posséder les méthodes suivantes :\n"
"    </p>\n"
"    <ul>\n"
"      <li>public Temps(int h, int m, int s), avec m et s compris entre 0 et "
"59)\n"
"      </li>\n"
"      <li>public int toSecondes(), qui renvoie le nombre total de secondes "
"pour ce temps.\n"
"      </li>\n"
"      <li>public int delta(Temps t), qui retourne la différence entre ce "
"temps-ci et t, en secondes (positif si ce temps-ci est plus grand).\n"
"      </li>\n"
"      <li>public boolean apres(Temps t) : renvoie true si ce temps-ci est "
"plus grand que t.\n"
"      </li>\n"
"      <li>public void ajouter(Temps t) : ajoute t à ce temps-ci. Corrige de "
"manière à ce que les minutes et les secondes soient dans l’intervalle "
"[0 . . . 59], en reportant au besoin les valeurs hors limites sur les unités "
"supérieures (60 secondes = 1 minute, 60 minutes = 1 heure).\n"
"      </li>\n"
"      <li>public String toString() : retourne ce temps sous la forme de "
"texte “heures :minutes :secondes”. Astuce : la méthode String.format(\"%02d:"
"%02d:%02d\", heures, minutes, secondes) retourne le String désiré avec les "
"nombres en deux chiffres en ajoutant les zéros nécessaires.\n"
"      </li>\n"
"    </ul>\n"
"    <p>\n"
"      La classe Chanson, quant à elle, représente une chanson caractérisée "
"par un titre (String), un auteur (String), et une durée (Temps). Ses "
"méthodes sont les suivantes :\n"
"    </p>\n"
"    <ul>\n"
"      <li>public Chanson(String t, String a, Temps d);\n"
"      </li>\n"
"      <li>public String getTitre() : renvoie le titre de la chanson\n"
"      </li>\n"
"      <li>public String getAuteur() : retourne l'auteur de cette chanson\n"
"      </li>\n"
"      <li>public Temps getDuree() : retourne la durée de cette chanson\n"
"      </li>\n"
"      <li>public String toString() : retourne un String décriant cette "
"chanson sous le format TITRE - AUTEUR - DUREE\n"
"      </li>\n"
"    </ul>\n"
"\n"
msgstr ""

#. name
#: 106_java/task.yaml
msgid "Mission 6 : Phase de réalisation"
msgstr ""

#. name, temps, header
#: 106_java/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"    <p class='lead'></p>\n"
"    <p>\n"
"      Ecrivez ici le code de la classe Temps\n"
"    </p>public class Temps\n"
"\n"
msgstr ""

#. name, chanson, header
#: 106_java/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"    <p class='lead'></p>\n"
"    <p>\n"
"      Ecrivez ici le code de la classe Chanson\n"
"    </p>public class Chanson\n"
"\n"
msgstr ""

#. context
#: 108_java/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"    <p>\n"
"      Complétez les champs ci-dessous conformément à l'énoncé de la phase de "
"réalisation de la mission 9.\n"
"    </p>\n"
"\n"
msgstr ""

#. name
#: 108_java/task.yaml
msgid "Mission 9 : Phase de réalisation"
msgstr ""

#. name, word, header
#: 108_java/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"    <p class='lead'></p>\n"
"    <p>\n"
"      Ecrivez ici le code de votre classe Word\n"
"    </p>Word.java :\n"
"\n"
msgstr ""

#. name, dictionary, header
#: 108_java/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"    <p class='lead'></p>\n"
"    <p>\n"
"      Ecrivez ici le code de votre classe Dictionary\n"
"    </p>Dictionary.java :\n"
"\n"
msgstr ""

#. name, dico, header
#: 108_java/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"    <p class='lead'></p>\n"
"    <p>\n"
"      Ecrivez ici le code de votre classe Dico\n"
"    </p>Dico.java :\n"
"\n"
msgstr ""

#. context
#: 111_java/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"    <p>\n"
"      Complétez les champs ci-dessous conformément à l'énoncé de la phase de "
"réalisation de la mission 3.\n"
"    </p>\n"
"\n"
msgstr ""

#. name
#: 111_java/task.yaml
msgid "NON Mission 3 : Phase de réalisation"
msgstr ""

#. name, average, header
#: 111_java/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"    <p class='lead'></p>\n"
"    <p>\n"
"      Ecrivez ici le code de la méthode average\n"
"    </p>public static double average(double a, double b, double c)\n"
"\n"
msgstr ""

#. name, minimum, header
#: 111_java/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"    <p class='lead'></p>\n"
"    <p>\n"
"      Ecrivez ici le code de la méthode minimum\n"
"    </p>public static double minimum(double a, double b, double c)\n"
"\n"
msgstr ""

#. name, maximum, header
#: 111_java/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"    <p class='lead'></p>\n"
"    <p>\n"
"      Ecrivez ici le code de la méthode maximum\n"
"    </p>public static double maximum(double a, double b, double c)\n"
"\n"
msgstr ""

#. name, median, header
#: 111_java/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"    <p class='lead'></p>\n"
"    <p>\n"
"      Ecrivez ici le code de la méthode median\n"
"    </p>public static double median(double a, double b, double c)\n"
"\n"
msgstr ""

#. name, sublime, header
#: 111_java/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"    <p class='lead'></p>\n"
"    <p>\n"
"      Ecrivez ici le code de la méthode sublime\n"
"    </p>public static boolean sublime(int n)\n"
"\n"
msgstr ""

#. name, sub_help, header
#: 111_java/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"    <p class='lead'></p>\n"
"    <p>\n"
"      Si vous souhaitez ajouter des méthodes résolvant des sous-problèmes, "
"écrivez-les ici\n"
"    </p>\n"
"\n"
msgstr ""

#. context
#: 112_java/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"    <p>\n"
"      Complétez la classe BioInfo conformément à l'énoncé de la phase de "
"réalisation de la mission 4.\n"
"    </p>\n"
"\n"
msgstr ""

#. name
#: 112_java/task.yaml
msgid "DELETE Mission 4 : Phase de réalisation"
msgstr ""

#. name, bioinfo, header
#: 112_java/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"    <p class='lead'></p>\n"
"    <p>\n"
"      Ecrivez ici le code de la classe BioInfo\n"
"    </p>Classe BioInfo.java :\n"
"\n"
msgstr ""

#. author
#: 14_java/task.yaml m07_bf/task.yaml
msgid "Sébastien Combéfis"
msgstr ""

#. context
#: 14_java/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"    <p>\n"
"      Complétez ici le corps de la classe <code>Stack</code> qui doit "
"implémenter l'interface <code>StackIF.java</code>. Vous devez mettre un "
"constructeur qui ne prend aucun paramètre.\n"
"    </p>\n"
"    <p>\n"
"      Pour rappel, voici l'interface <code>StackIF</code> :\n"
"    </p>\n"
"    <pre class=\"code\">\n"
"    public interface StackIF\n"
"    {\n"
"       /**\n"
"        * @pre c != null\n"
"        * @post L'état c a été ajouté au sommet de cette pile\n"
"        */\n"
"       public void push (State c);\n"
"\n"
"       /**\n"
"        * @pre -\n"
"        * @post La valeur renvoyée contient l'état se trouvant au sommet\n"
"        *       de cette pile. Cet état est par ailleurs retiré de cette "
"pile.\n"
"        *       Si cette pile est vide, génère une EmptyStackException.\n"
"        */\n"
"       public State pop() throws EmptyStackException;\n"
"\n"
"       /**\n"
"        * @pre -\n"
"        * @post La valeur renvoyée contient le nombre d'éléments de cette "
"pile.\n"
"        */\n"
"       public int size();\n"
"\n"
"       /**\n"
"        * @pre -\n"
"        * @post La valeur renvoyée contient true si cette pile est vide,\n"
"        *       et false sinon.\n"
"        */\n"
"       public boolean isEmpty();\n"
"\n"
"       /**\n"
"        * @pre 0 &lt;= n &lt; size()\n"
"        * @post La valeur renvoyée contient le n-ième élément de cette "
"pile,\n"
"        *       l'élément au sommet étant celui d'indice 0.\n"
"        */\n"
"       public State peek (int n);\n"
"    }\n"
"    </pre>\n"
"\n"
msgstr ""

#. name
#: 14_java/task.yaml
msgid "Mission 11: Structures chainées"
msgstr ""

#. name, q1, header
#: 14_java/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"    <p class='lead'></p>\n"
"    <p>\n"
"      Complétez le corps de la classe suivante (vous ne devez pas mettre les "
"accolades de la classe).\n"
"    </p>public class Stack implements StackIF\n"
"\n"
msgstr ""

#. context
#: 85_java/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"    <p>\n"
"      On souhaite compter le nombre d'entiers positifs compris entre deux "
"bornes a et b, non incluses.\n"
"    </p>\n"
"    <p>\n"
"      Vous devez définir la méthode <code>countPosIntBetween</code> qui "
"compte le nombre d'entiers compris entre les deux paramètres entiers a et b, "
"non inclus.\n"
"    </p>\n"
"    <p>\n"
"      Par exemple, le nombre d'entiers positifs compris entre -1 et 2, "
"bornes non incluses, sera égal à 2.\n"
"    </p>\n"
"\n"
msgstr ""

#. name
#: 85_java/task.yaml
msgid "Mission 3: Exercice complémentaire 1"
msgstr ""

#. name, q1, header
#: 85_java/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"    <p class='lead'></p>\n"
"    <p>\n"
"      Complétez ici le corps de la méthode <code>countPosIntBetween</code> "
"dont la spécification est donnée dans l'énoncé.\n"
"    </p>public static int countPosIntBetween (int a, int b)\n"
"\n"
msgstr ""

#. author
#: 87_java/task.yaml
msgid "Virginie Van den Schreick"
msgstr ""

#. context
#: 87_java/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"    <p>\n"
"      Un palindrome est un mot dont l’ordre des caractères reste le même "
"qu’on le lise de gauche à droite ou de droite à gauche, comme radar ou "
"kayak. Votre objectif dans cet exercice est de trouver le plus long "
"palindrome contenu dans une chaîne de caractères, et d'en renvoyer la "
"longueur.\n"
"    </p>\n"
"    <p>\n"
"      Détecter le plus long palindrome dans une chaîne de caractères est un "
"problème compliqué. En informatique, lorsqu'on est face à un problème "
"compliqué, la meilleure approche pour le résoudre est de le découper en "
"petits problèmes plus simples. Il suffit ensuite d'écrire une méthode pour "
"résoudre chaque sous-problème, et de combiner ces méthodes pour résoudre le "
"problème compliqué.\n"
"    </p>\n"
"    <p>\n"
"      Pour rechercher le plus long palindrome, une piste est d'abord "
"d'écrire une méthode permettant d'extraire d'une chaîne de caractères de "
"longueur n les sous-chaînes de longueur n-1, n-2, etc. Notez que la classe "
"String contient des méthodes qui pourraient vous aider pour cela.\n"
"    </p>\n"
"    <p>\n"
"      Vous devez donc écrire une méthode dont la spécification est la "
"suivante :\n"
"    </p>\n"
"    <pre class=\"code\">\n"
"    /*\n"
"     * @pre - s != null\n"
"     *\n"
"     * @post retourne la longueur du plus long palindrome trouvé dans s.\n"
"     */\n"
"    <b>public static int</b> longueurPlusLongPalindrome(String s);\n"
"    </pre>\n"
"    <p>\n"
"      À titre d’exemple, le code ci-dessous :\n"
"    </p>\n"
"    <pre class=\"code\">\n"
"    System.out.println (longueurPluslongPalindrome (\"KAYAKAK\"));\n"
"    System.out.println (longueurPluslongPalindrome (\"AVABCD\"));\n"
"\n"
"    </pre>\n"
"    <p>\n"
"      Affiche les valeurs 5 et 3.\n"
"    </p>\n"
"    <p>\n"
"      Pour résoudre ce problème, pensez à la découper en sous-problèmes et "
"n’hésitez pas à utiliser une ou plusieurs méthodes privées supplémentaires.\n"
"    </p>\n"
"\n"
msgstr ""

#. name
#: 87_java/task.yaml
msgid "Mission 4 : Recherche du plus long palindrome"
msgstr ""

#. name, q1, header
#: 87_java/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"    <p class='lead'></p>\n"
"    <p>\n"
"      Complétez ici le corps de la méthode <code>count</code> dont la "
"spécification est donnée dans l'énoncé.\n"
"    </p>public static int longueurPlusLongPalindrome (String s)\n"
"\n"
msgstr ""

#. name, subproblems, header
#: 87_java/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"    <p class='lead'></p>\n"
"    <p>\n"
"      Déclarez ici les méthodes privées que vous souhaitez utiliser pour "
"décomposer le problème en sous-problèmes. Attention, veillez à n'utiliser "
"que des méthodes de classe (<code>static</code>).\n"
"    </p>\n"
"\n"
msgstr ""

#. context
#: 88_java/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"    <p>\n"
"      On souhaite compter le nombre d'entiers distincts parmi une série de "
"cinq entiers\n"
"    </p>\n"
"    <p>\n"
"      Vous devez définir la méthode <code>countDistinctInt</code> qui compte "
"le nombre d'entiers uniques parmi les cinq paramètres a, b, c, d et e\n"
"    </p>\n"
"\n"
msgstr ""

#. name
#: 88_java/task.yaml
msgid "Mission 3 : Exercice complémentaire 2"
msgstr ""

#. name, q1, header
#: 88_java/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"    <p class='lead'></p>\n"
"    <p>\n"
"      Complétez ici le corps de la méthode <code>countDistinctInt</code> "
"dont la spécification est donnée dans l'énoncé.\n"
"    </p>public static int countDistinctInt (int a, int b, int c, int d, int "
"e)\n"
"\n"
msgstr ""

#. author
#: m01Q10/task.yaml m01Q12/task.yaml m01Q13/task.yaml m01Q14/task.yaml
#: m01Q15/task.yaml m01Q16/task.yaml m01Q17/task.yaml m03Q3/task.yaml
#: m03Q5/task.yaml m03Q6/task.yaml m03Q7/task.yaml m03dem4/task.yaml
msgid "Ludovic Taffin, Olivier Martin"
msgstr ""

#. context
#: m01Q10/task.yaml
msgid ""
"``a``, ``b`` et ``c`` sont des variables contenant un entier. Ecrivez le "
"code permettant de placer la valeur ``true`` dans la variabe booléenne "
"``ordonne`` si ``a < b < c`` et ``false`` sinon.\n"
"\n"
".. code-block:: java\n"
"\n"
"    boolean ordonne; // la variable à changer (true/false)\n"
"    int a;\n"
"    int b;\n"
"    int c;"
msgstr ""

#. name
#: m01Q10/task.yaml
msgid "Mission 1 : Question supplémentaire : Ordonne"
msgstr ""

#. name, q1, name
#: m01Q10/task.yaml
msgid "Les valeurs sont-elles ordonnées ?"
msgstr ""

#. author
#: m01Q11/task.yaml
msgid "Ludovic Taffin, Naitali Brandon"
msgstr ""

#. context
#: m01Q11/task.yaml
msgid ""
"Les variables ``a``, ``b`` et ``c`` contiennent des nombres réels. Placez "
"dans la variable ``moyenne`` la moyenne arithmétique entre ces trois "
"nombres. Si vous avez un doute sur la définition de cette moyenne, consultez "
"`sa page sur wikipédia <https://fr.wikipedia.org/wiki/Moyenne_arithm"
"%C3%A9tique>`_\n"
"\n"
".. code-block:: java\n"
"\n"
"\n"
"    double moyenne; // le résultat de la moyenne\n"
"    double a;\n"
"    double b;\n"
"    double c;"
msgstr ""

#. name
#: m01Q11/task.yaml
msgid "Mission 1 : Question supplémentaire : Moyenne"
msgstr ""

#. name, q1, name
#: m01Q11/task.yaml
msgid "Calcul de moyenne de 3 nombres"
msgstr ""

#. context
#: m01Q12/task.yaml
msgid ""
"Les variables ``a``, ``b`` et ``c`` contiennent un entier. Ecrivez le code "
"Java permettant de stocker dans la variable ``maximum`` le plus grand de ces "
"trois nombres.\n"
"\n"
".. code-block:: java\n"
"\n"
"    int a;\n"
"    int b;\n"
"    int c;\n"
"    int maximum; // le plus grand parmi a, b, c"
msgstr ""

#. name
#: m01Q12/task.yaml
msgid "Mission 1 : Question supplémentaire : Maximum"
msgstr ""

#. name, q1, name
#: m01Q12/task.yaml
msgid "Calcul le nombre le plus grand"
msgstr ""

#. context
#: m01Q13/task.yaml
msgid ""
"Les variables ``a``, ``b``, ``c`` et ``d`` contiennent chacune un nombre "
"entier. Ecrivez le code permettant de placer dans la variable ``min`` le "
"minimum entre ces quatre nombres.\n"
"\n"
".. code-block:: java\n"
"\n"
"\n"
"    int a;\n"
"    int b;\n"
"    int c;\n"
"    int d;\n"
"    int min; // le plus petit parmi a, b, c, d"
msgstr ""

#. name
#: m01Q13/task.yaml
msgid "Mission 1 : Question supplémentaire : Minimum"
msgstr ""

#. name, q1, name
#. name, q6, name
#: m01Q13/task.yaml m01_qcm/task.yaml
msgid "Calcul du minimum"
msgstr ""

#. context
#: m01Q14/task.yaml
msgid ""
"Les variables ``a``,``b`` et ``c`` contiennent des entiers. Placez dans la "
"variable ``count`` le nombre d'entiers distincts.\n"
"\n"
"Par exemple, si ``a`` vaut ``3``, ``b`` vaut ``5`` et ``c`` vaut ``3``, "
"alors ``count`` contiendra la valeur ``2``. Lorsque toutes les variables "
"contiennent la même valeur, ``count`` doit valoir ``1``.\n"
"\n"
".. code-block:: java\n"
"\n"
"    int count; // le nombre d'entiers différents\n"
"    int a;\n"
"    int b;\n"
"    int c;"
msgstr ""

#. name
#: m01Q14/task.yaml
msgid "Mission 1 : Question supplémentaire : Compteur de différence"
msgstr ""

#. name, q1, name
#: m01Q14/task.yaml
msgid "Calcul le nombre d'entiers différents"
msgstr ""

#. context
#: m01Q15/task.yaml
msgid ""
"Connaissant une date (``jour``/``mois``) de l'année 2016, placez dans la "
"variable ``saison`` le nom de la saison correspondante. Pour rappel, en 2016 "
"les saisons officielles commençaient aux dates suivantes :\n"
"\n"
"- le printemps le dimanche 20 mars 2016\n"
"- l’été le lundi 20 juin 2016\n"
"- l’automne le jeudi 22 septembre 2016\n"
"- l’hiver le mercredi 21 décembre 2016\n"
"\n"
".. code-block:: java\n"
"\n"
"    int jour; // le jour\n"
"    int mois; // le mois\n"
"    String saison; // le nom de la saison (automne, hiver, printemps, été)"
msgstr ""

#. name
#: m01Q15/task.yaml
msgid "Mission 1 : Question supplémentaire : Sélecteur de saison"
msgstr ""

#. name, q1, name
#: m01Q15/task.yaml
msgid "Calcul de la saison d'une date donnée"
msgstr ""

#. context
#: m01Q16/task.yaml
msgid ""
"Dans un programme gérant une horloge, vous devez calculer le nombre de "
"secondes qui se sont écoulées depuis minuit. Placer le résultat de votre "
"calcul dans la variable ``total``.\n"
"\n"
"Exemple : 22h14m12s = 80052s\n"
"\n"
".. code-block:: java\n"
"\n"
"    int heure; // le nombre d'heures\n"
"    int minute; // le nombre de minutes\n"
"    int seconde; // le nombre de secondes\n"
"    int total = 0; // le nombre de secondes depuis minuit"
msgstr ""

#. name
#: m01Q16/task.yaml
msgid "Mission 1 : Question supplémentaire : Nombre de secondes depuis minuit"
msgstr ""

#. name, q1, name
#: m01Q16/task.yaml
msgid "Calcul du nombre de secondes depuis minuit"
msgstr ""

#. context
#: m01Q17/task.yaml
msgid ""
"Ecrivez un programme qui place la valeur ``true`` dans la variable "
"``resultat`` si ``annee`` correspond à une année bissextile et ``false`` "
"sinon.\n"
"\n"
"Pour rappel, une année sera `bissextile <https://fr.wikipedia.org/wiki/"
"Année_bissextile>`_ :\n"
" - si l'année est divisible par 4 et non divisible par 100, ou\n"
" - si l'année est divisible par 400.\n"
"\n"
".. code-block:: java\n"
"\n"
"    int annee; // l'année à vérifier\n"
"    boolean resultat;"
msgstr ""

#. name
#: m01Q17/task.yaml
msgid "Mission 1 : Question supplémentaire : Année bissextile"
msgstr ""

#. name, q1, name
#: m01Q17/task.yaml
msgid "Déterminer si une année est bissextile"
msgstr ""

#. author
#: m01Q18/task.yaml m01Q20/task.yaml m01Q9/task.yaml m02Q7/task.yaml
#: m03Q2/task.yaml m05Q12/task.yaml mX1Q19/task.yaml mX3Q8/task.yaml
#: mX3Q9/task.yaml
msgid "Ludovic Taffin"
msgstr ""

#. context
#: m01Q18/task.yaml
msgid ""
"Créer un programme permettant de déterminer le siècle d'une année. Placez le "
"résultat de votre calcul dans la variable ``siecle``.\n"
"\n"
".. code-block:: java\n"
"\n"
"    int annee;  // l'année à vérifier\n"
"    int siecle; // le siècle de l'année"
msgstr ""

#. name
#: m01Q18/task.yaml
msgid "Mission 1 : Question supplémentaire : Siècle"
msgstr ""

#. name, q1, name
#: m01Q18/task.yaml
msgid "Déterminer le siècle d'une année"
msgstr ""

#. author
#: m01Q2/task.yaml m01Q8/task.yaml
msgid "François MICHEL & Ludovic TAFFIN & Olivier Martin"
msgstr ""

#. context
#: m01Q2/task.yaml
msgid ""
"La police vous engage pour développer un programme permettant de calculer "
"l'amende qu'un conducteur de voiture devra payer en cas d'infraction. La loi "
"stipule que le conducteur devra payer 5 euros par km/h au-dessus de la "
"vitesse maximale autorisée, avec un minimum de 12.5€.\n"
"\n"
"Pour tout dépassement de plus de 10 km/h, l\\'amende est doublée !\n"
"\n"
"Votre programme reçoit la vitesse maximale autorisée et la vitesse réelle de "
"la voiture.\n"
"Il calcule l'éventuelle amende.\n"
"\n"
"*Exemple* :\n"
"\n"
"- Si la vitesse maximum est de 50km/h et que le véhicule roule à 62km/h, "
"l'amende sera de 12*5*2=120€.\n"
"\n"
"- Si la vitesse maximum est de 50km/h et que le véhicule roule à 56km/h, "
"l'amende sera de 6*5=30€.\n"
"\n"
"- Si la vitesse maximum est de 50km/h et que le véhicule roule à 51km/h, "
"l'amende sera de 12.5€.\n"
"\n"
".. code-block:: java\n"
"\n"
"    double vitesseMaximale = // valeur réelle positive\n"
"    double vitesseVehicule = // valeur réelle positive\n"
"    double amende = 0; // modifié par votre programme et renvoie la valeur "
"de l'amende\n"
"\n"
msgstr ""

#. name
#: m01Q2/task.yaml
msgid "Mission 1 : Question supplémentaire : Calcul d'amende"
msgstr ""

#. name, q1, name
#: m01Q2/task.yaml
msgid "Système d'amende"
msgstr ""

#. name, q1, header
#: m01Q2/task.yaml
msgid "Écrivez ici le bout de programme permettant de calculer l'amende :"
msgstr ""

#. context
#: m01Q20/task.yaml
msgid ""
"La variable ``carac``  contient un caractère (chiffre ou lettre minuscule). "
"Ecrivez le code Java qui place dans la variable ``retour``, la chaîne de "
"caractères :\n"
"\n"
"- ``chiffre`` si ``carac`` contient un chiffre\n"
"- ``voyelle`` si ``carac`` contient une voyelle\n"
"- ``consonne`` sinon\n"
"\n"
".. code-block:: java\n"
"\n"
"    char carac; // le caractère à vérifier\n"
"    String retour; // chiffre, voyelle ou consonne"
msgstr ""

#. name
#: m01Q20/task.yaml
msgid "Mission 1 : Question supplémentaire : Caractère"
msgstr ""

#. name, q1, name
#: m01Q20/task.yaml
msgid "Déterminer si un caractère est un chiffre, une voyelle, une consonne"
msgstr ""

#. author
#: m01Q3/task.yaml m01Q4/task.yaml m01Q6/task.yaml
msgid "François MICHEL & Ludovic TAFFIN & Olivier MARTIN"
msgstr ""

#. context
#: m01Q3/task.yaml
msgid ""
"L\\'`indice de Quételet <https://fr.wikipedia.org/wiki/"
"Indice_de_masse_corporelle>`_, utilisé par les diététiciens, est révélateur "
"de l\\'état d'’une personne.\n"
"\n"
"Une personne normale devrait avoir un indice compris entre 20 et 25. En "
"dessous de 20, elle est considérée comme mince, au dessus de 25, elle a un "
"embonpoint.\n"
"Au-delà de 30, elle est obèse!\n"
"\n"
"Cet indice est calculé comme étant le rapport entre le poids d'une personne, "
"exprimé en kg et le carré de sa taille, exprimé en mètre.\n"
"\n"
"Complétez le programme ci-dessous pour calculer l'indice de Quételet d'un "
"personne et stocker dans la chaîne de caractères ``etat`` la valeur "
"``mince`` pour une personne ayant un indice strictement inférieur à 20, "
"``normal`` pour une personne dont l'indice est compris entre 20 et 25, "
"``embonpoint`` si l'indice est strictement supérieur à 25 et inférieur ou "
"égal à 30 et ``obèse`` lorsqu'il est strictement supérieur à 30 ...\n"
"\n"
"\n"
".. code-block:: java\n"
"\n"
"    double taille; // taille d'une personne en m\n"
"    int poids; // poids d'une personne en kg\n"
"    String etat; // état de la personne (mince, normal, embonpoint, obèse)\n"
"\n"
msgstr ""

#. name
#: m01Q3/task.yaml
msgid "Mission 1: Question supplémentaire : Indice de Quételet"
msgstr ""

#. name, q1, name
#: m01Q3/task.yaml
msgid "Indice de Quételet"
msgstr ""

#. name, q1, header
#: m01Q3/task.yaml
msgid ""
"Écrivez ici le bout de programme permettant de mettre dans la variable "
"``état`` l\\'état d'une personne sur base de son indice de Quételet :"
msgstr ""

#. context
#: m01Q4/task.yaml
msgid ""
"Une autoroute à péage est divisée en sections. Chaque section est identifiée "
"par un entier. La première section a le numéro 1, le suivante le 2, ... Les "
"véhicules doivent **entrer en début de section** et **sortir et fin de "
"section**.\n"
"\n"
"Le prix à payer pour un véhicule dépend du nombre de sections parcourues : "
"la première section coûte 1 euro et les suivantes coûtent 50 centimes.\n"
"\n"
"Écrivez un programme qui reçoit la section d\\'entrée et la section de "
"sortie d\\'une voiture. Il place ensuite dans la variable ``prix`` le "
"montant du payage.\n"
"\n"
".. code-block:: java\n"
"\n"
"    int sectionEntree = // le point d'entrée\n"
"    int sectionSortie = // le point de sortie\n"
"    double prix = 0; // le prix à payer\n"
"\n"
"Exemples :\n"
"\n"
"- Si ``sectionEntree`` vaut 3 et ``sectionSortie`` vaut 5, la voiture a "
"parcouru 3 sections (les section 3, 4 et 5), donc le prix est 2.0€ (1€ + "
"0.5€ + 0.5€).\n"
"\n"
"- Si ``sectionEntree`` vaut 2 et ``sectionSortie`` vaut 2, la voiture a "
"parcouru 1 section (la section 2), donc le prix est 1€."
msgstr ""

#. name
#: m01Q4/task.yaml
msgid "Mission 1 : Question supplémentaire : Calcul de prix"
msgstr ""

#. name, q1, name
#: m01Q4/task.yaml
msgid "Autoroute à péage"
msgstr ""

#. name, q1, header
#: m01Q4/task.yaml
msgid ""
"Écrivez ici le bout de programme permettant de calculer le prix à payer :"
msgstr ""

#. author
#: m01Q5/task.yaml mX2Q2/task.yaml
msgid "Lucas Ody & Tom Rousseaux"
msgstr ""

#. context
#: m01Q5/task.yaml
msgid ""
"Le `OU exclusif <https://fr.wikipedia.org/wiki/Fonction_OU_exclusif>`_ (XOR "
"en anglais) est un opérateur logique à l'instar du \"et\" et du \"ou\". Il "
"vous est demandé d'implémenter ce XOR, sachant que, pour ``a`` et ``b`` deux "
"booléens, le résultat de ``a XOR b`` est ``true`` si un et un seul des "
"booléens est ``true``, et ``false`` sinon.\n"
"\n"
"Pour cette question, il est conseillé d'utiliser les instructions "
"conditionelles et les expressions ``&&``, ``||`` et la négation logique ``!"
"``.\n"
"\n"
"Pour rappel, les expressions booléennes sont décrites dans la section |jn2.5|"
"_ du livre et l\\'instruction conditionelle dans la section `3.1 : Blocks, "
"Loops, and Branches <http://math.hws.edu/javanotes/c3/s1.html>`_\n"
"\n"
".. _jn2.5 : http://math.hws.edu/javanotes/c2/s5.html\n"
".. |jn2.5| replace:: `2.5 : Details of Expressions`\n"
"\n"
"\n"
".. code-block:: java\n"
"\n"
"     boolean a;\n"
"     boolean b;\n"
"     boolean xor; // placer dans cette variable votre résultat\n"
msgstr ""

#. name
#: m01Q5/task.yaml
msgid "Mission 1 : Question supplémentaire : OU exclusif"
msgstr ""

#. context
#: m01Q6/task.yaml
msgid ""
"Écrivez un programme qui permet de jouer au jeu du `fizzbuzz <https://en."
"wikipedia.org/wiki/Fizz_buzz>`_\n"
"\n"
"Vous recevez un nombre (stocké dans la variable ``i``).\n"
"\n"
"Nous allons ici implémenter une version simplifiée du jeu. Pour l'entier "
"``i``, le jeu consiste en :\n"
"\n"
"- On stocke ``fizz`` dans la variable ``temp`` si le nombre est divisible "
"par 3.\n"
"- On stocke ``buzz`` dans la variable ``temp`` si le nombre est divisible "
"par 5.\n"
"- On stocke ``fizzbuzz`` dans la variable ``temp`` si le nombre est "
"divisible par 3 et par 5.\n"
"- On stocke ``non`` dans la variable ``temp`` s'il n'est divisible ni par 3 "
"ni par 5.\n"
"\n"
".. code-block:: java\n"
"\n"
"    int i = // le nombre à vérifier (i >= 1)\n"
"    String temp = \"\" // fizz, buzz, fizzbuzz, non\n"
"\n"
msgstr ""

#. name
#: m01Q6/task.yaml
msgid "Mission 1 : Question supplémentaire : Fizzbuzz"
msgstr ""

#. name, q1, name
#: m01Q6/task.yaml
msgid "Fizzbuzz"
msgstr ""

#. name, q1, header
#: m01Q6/task.yaml
msgid "Écrivez le programme pour jouer au Fizzbuzz"
msgstr ""

#. author
#: m01Q7/task.yaml
msgid "François MICHEL & Ludovic TAFFIN"
msgstr ""

#. context
#: m01Q7/task.yaml
msgid ""
"On vous demande d\\'écrire un programme permettant de calculer la somme des "
"entiers pairs entre 1 et ``n`` (inclus).\n"
"\n"
"*Exemple* :  pour ``n=5`` votre programme retourner 6 (2+4)\n"
"\n"
"Pour vous aider dans cette tâche, il vous est possible d'utiliser le symbole "
"``%`` qui calcule un modulo.\n"
"\n"
"Votre code utilisera la variable ``n`` et placera son résultat dans la "
"variable ``sum``.\n"
"\n"
".. code-block:: java\n"
"\n"
"    int n = // n peut prendre n'importe quelle valeur supérieure à zéro\n"
"    int sum = 0; // sum est la variable dans laquelle vous devez écrire le "
"résultat final\n"
"\n"
msgstr ""

#. name
#: m01Q7/task.yaml
msgid "Mission 1 : Question supplémentaire : Somme d'entiers pairs"
msgstr ""

#. name, q1, name
#: m01Q7/task.yaml
msgid "Somme des entiers pairs entre 1 et n"
msgstr ""

#. name, q1, header
#: m01Q7/task.yaml
msgid ""
"Écrivez ici le bout de programme permettant de calculer la somme des entiers "
"pairs entre 0 et n :"
msgstr ""

#. context
#: m01Q8/task.yaml
msgid ""
"Considérons un programme utilisant trois variables entières : ``int a``, "
"``int b``, ``int c``.\n"
"\n"
"Comment feriez-vous, en utilisant uniquement des instructions conditionelles "
"(``if (...) {...} else {...}`` pour calculer la `médiane <https://fr."
"wikipedia.org/wiki/Médiane_(statistiques)>`_ de ces trois valeurs.\n"
"\n"
"Pour rappel, la médiane est la valeur qui est telle qu’il y a exactement une "
"valeurs inférieure à elle et une valeur supérieure à elle. Les instructions "
"conditionelles sont décrites dans la section `3.1   <http://math.hws.edu/"
"javanotes/c3/s1.html>`_ du livre.\n"
"\n"
"\n"
"\n"
".. code-block:: java\n"
"\n"
"    int a, int b, int c; // Les valeurs entières à comparer\n"
"    int mediane; // La médiane à déterminer\n"
"\n"
msgstr ""

#. name
#: m01Q8/task.yaml
msgid "Mission 1 : Question supplémentaire : Médiane"
msgstr ""

#. name, q1, name
#: m01Q8/task.yaml m03Q4/task.yaml
msgid "Trouver la médiane parmi 3 nombres"
msgstr ""

#. name, q1, header
#: m01Q8/task.yaml
msgid "Écrivez ici le bout de programme permettant de calculer la médiane :"
msgstr ""

#. context
#: m01Q9/task.yaml
msgid ""
"Mettre la variable ``in`` à la valeur ``true`` si ``x`` se trouve dans "
"l’intervalle fermé :math:`[a,b]` et ``false`` sinon.\n"
"\n"
".. code-block:: java\n"
"\n"
"    boolean in; // résultat de votre calcul à placer ici\n"
"    int x; // la valeur à vérifier\n"
"    int a; // borne inférieure de l'intervalle\n"
"    int b; // borne supérieure de l'intervalle"
msgstr ""

#. name
#: m01Q9/task.yaml
msgid "Mission 1 : Question supplémentaire : IN/OUT"
msgstr ""

#. name, q1, name
#: m01Q9/task.yaml
msgid "Définir si x est dans ou en dehors de l'intervalle."
msgstr ""

#. author
#: m01_bf/task.yaml m02_bf/task.yaml m04_bf/task.yaml
msgid "Sébastien Combéfis, Olivier Martin"
msgstr ""

#. context
#: m01_bf/task.yaml
msgid ""
"La `suite de Syracuse <https://fr.wikipedia.org/wiki/"
"Conjecture_de_Syracuse>`_ est une suite de naturels, définie de la manière "
"suivante. Le premier naturel de la suite est n'importe quel naturel non-nul, "
"que nous noterons :math:`s_0`. On peut ensuite calculer les éléments "
"suivants de la suite en appliquant la formule suivante :\n"
"\n"
".. math::\n"
"\n"
"   u_{n+1}= \\dfrac{u_n}{2} \\mbox{ si } u_n \\mbox{ est pair,}\n"
"\n"
"   u_{n+1}= 3u_n + 1  \\mbox{ si } u_n \\mbox{ est impair.}\n"
"\n"
"\n"
"Par exemple, en partant de 11, on obtient : 11 34 17 52 26 13 40 20 10 5 16 "
"8 4 2 1 4 2…\n"
"\n"
"Remarquez qu'une fois que le nombre 1 est atteint, la suite 1 4 2 1 4 2… se "
"répète indéfiniment. La conjecture de Collatz est l'hypothèse mathématique "
"selon laquelle toutes les suites de Syracuse atteignent toujours 1, peu "
"importe le naturel :math:`s_0` choisi. Il s'agit actuellement d’un "
"conjecture, c’est-à-dire qu’aucune preuve mathématique n’a pu être élaborée. "
"Tous les tests effectués actuellement n'ont néanmoins pas permis de trouver "
"un :math:`s_0` tel que la suite de Syracuse en découlant n'atteigne pas 1.\n"
"\n"
"Afin d'aider les mathématiciens à éventuellement trouver un contre-exemple, "
"écrivez un programme Java qui permet de calculer la suite de Syracuse pour "
"n’importe quel naturel non-nul :math:`s_0`. Le programme s'arrête bien "
"entendu lorsque le naturel 1 est atteint.\n"
"\n"
"Vous devez afficher chaque élément de la suite sur la sortie standard, avec "
"``System.out.println()``. La valeur de départ vous est déjà fournie et se "
"trouve dans une variable de type ``int`` nommée ``s0``."
msgstr ""

#. name
#: m01_bf/task.yaml
msgid "Mission 1 : Question de Bilan Final"
msgstr ""

#. name, q1, header
#: m01_bf/task.yaml
msgid ""
"Écrivez ici directement le code à placer dans la méthode ``main``. Vous ne "
"devez pas déclarer, ni initialiser la variable ``s0``\n"
"\n"
msgstr ""

#. author
#: m01_qcm/task.yaml m02_qcm/task.yaml m03_qcm/task.yaml m04_qcm/task.yaml
#: m05_qcm/task.yaml m06_qcm/task.yaml m07_qcm/task.yaml m08_qcm/task.yaml
#: m09_qcm/task.yaml m10_qcm/task.yaml m11_qcm/task.yaml rev_qcm/task.yaml
msgid "Olivier BONAVENTURE"
msgstr ""

#. context
#: m01_qcm/task.yaml
msgid ""
"=========================\n"
"Mission 1 : Mise en Route\n"
"=========================\n"
"\n"
"Ces questions ont pour objectif de vous permettre de tester vous-même votre "
"compréhension de la matière couverte par cette mission de mise en route.\n"
"\n"
"Ces questions supposent que vous avez lu les sections suivantes du livre de "
"référence |jn|_ :\n"
"\n"
"\n"
" - |jn1|_\n"
"\n"
"   - |jn1.1|_\n"
"   - |jn1.2|_\n"
"   - |jn1.3|_\n"
"   - |jn1.4|_\n"
"   - |jn1.5|_\n"
"   - |jn1.7|_\n"
"\n"
" - |jn2|_\n"
"\n"
"   - |jn2.1|_\n"
"   - |jn2.2|_\n"
"   - |jn2.3|_ (sauf |jn2.3.3|_)\n"
"   - |jn2.5|_ (sauf |jn2.5.7|_)\n"
"   - |jn2.6|_ (sauf |jn2.6.3|_)\n"
"\n"
" - |jn3|_\n"
"\n"
"   - |jn3.1|_\n"
"\n"
".. _jn: http://math.hws.edu/javanotes/\n"
".. |jn| replace:: JavaNotes\n"
"\n"
".. _jn1: http://math.hws.edu/javanotes/c1/index.html\n"
".. |jn1| replace:: `1 : Overview: The Mental Landscape`\n"
"\n"
".. _jn1.1: http://math.hws.edu/javanotes/c1/s1.html\n"
".. |jn1.1| replace:: `1.1 : The Fetch and Execute Cycle: Machine Language`\n"
"\n"
".. _jn1.2: http://math.hws.edu/javanotes/c1/s2.html\n"
".. |jn1.2| replace:: `1.2 : Asynchronous Events: Polling Loops and "
"Interrupts`\n"
"\n"
".. _jn1.3: http://math.hws.edu/javanotes/c1/s3.html\n"
".. |jn1.3| replace:: `1.3 : The Java Virtual Machine`\n"
"\n"
".. _jn1.4: http://math.hws.edu/javanotes/c1/s4.html\n"
".. |jn1.4| replace:: `1.4 : Fundamental Building Blocks of Programs`\n"
"\n"
".. _jn1.5: http://math.hws.edu/javanotes/c1/s5.html\n"
".. |jn1.5| replace:: `1.5 : Objects and Object-oriented Programming`\n"
"\n"
".. _jn1.7: http://math.hws.edu/javanotes/c1/s7.html\n"
".. |jn1.7| replace:: `1.7 : The Internet and Beyond`\n"
"\n"
".. _jn2 : http://math.hws.edu/javanotes/c2/index.html\n"
".. |jn2| replace:: `2 : Programming in the Small I: Names and Things`\n"
"\n"
".. _jn2.1: http://math.hws.edu/javanotes/c2/s1.html\n"
".. |jn2.1| replace:: `2.1 : The Basic Java Application`\n"
"\n"
".. _jn2.2: http://math.hws.edu/javanotes/c2/s2.html\n"
".. |jn2.2| replace:: `2.2 : Variables and the Primitive Types`\n"
"\n"
".. _jn2.3: http://math.hws.edu/javanotes/c2/s3.html\n"
".. |jn2.3| replace:: `2.3 : Strings, Objects, Enums, and Subroutines`\n"
"\n"
".. _jn2.3.3: http://math.hws.edu/javanotes/c2/s3.html#basics.3.3\n"
".. |jn2.3.3| replace:: `2.3.3 : Introduction to Enums`\n"
"\n"
".. _jn2.5 : http://math.hws.edu/javanotes/c2/s5.html\n"
".. |jn2.5| replace:: `2.5 : Details of Expressions`\n"
"\n"
".. _jn2.5.7: http://math.hws.edu/javanotes/c2/s5.html#basics.5.7\n"
".. |jn2.5.7| replace:: `2.5.7 : Type Conversion of Strings`\n"
"\n"
".. _jn2.6: http://math.hws.edu/javanotes/c2/s6.html\n"
".. |jn2.6| replace:: `2.6 : Programming Environments`\n"
"\n"
".. _jn2.6.3: http://math.hws.edu/javanotes/c2/s6.html#basics.6.3\n"
".. |jn2.6.3| replace:: `2.6.3 : IDEs and Eclipse`\n"
"\n"
".. _jn3 : http://math.hws.edu/javanotes/c3/index.html\n"
".. |jn3| replace:: `3 : Programming in the Small II: Control`\n"
"\n"
".. _jn3.1: http://math.hws.edu/javanotes/c3/s1.html\n"
".. |jn3.1| replace:: `3.1 : Blocks, Loops, and Branches`\n"
msgstr ""

#. name
#: m01_qcm/task.yaml
msgid "Mission 1: QCM"
msgstr ""

#. name, q1, name
#. name, q2, name
#: m01_qcm/task.yaml
msgid "Initialisation de variables"
msgstr ""

#. name, q1, header
#: m01_qcm/task.yaml
msgid ""
"\n"
"Parmi les fragments de code Java suivants, quels sont ceux qui correspondent "
"à des initialisations correctes de variables entières ?\n"
msgstr ""

#. name, q1, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   int a=12;\n"
"   int b=42352;\n"
msgstr ""

#. name, q1, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   int var1=-12;\n"
"   int var2=42352;\n"
msgstr ""

#. name, q1, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   int var1=-12;\n"
"   int var2=-var1;\n"
msgstr ""

#. name, q1, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"En Java, une variable est initialisée en utilisant une constante ou une "
"expression qui s'évalue avec le type de la variable.\n"
msgstr ""

#. name, q1, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   int var_1=-12100;\n"
"   int var_2=42352;\n"
msgstr ""

#. name, q1, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   int var=1;\n"
"   int ma variable=2;\n"
msgstr ""

#. name, q1, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"En Java, un nom de variable ne peut jamais contenir d'espace.\n"
msgstr ""

#. name, q1, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   int var=1.2;\n"
"   int d=2;\n"
msgstr ""

#. name, q1, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"En Java, l'expression ``1.2`` est un nombre réel et non un nombre entier.\n"
msgstr ""

#. name, q1, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   int var1='1';\n"
"   int var2=2;\n"
msgstr ""

#. name, q1, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"En Java, l'expression ``\\`1\\``` correspond au caractère ``1``. Ce n'est "
"donc pas un nombre entier.\n"
msgstr ""

#. name, q1, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   int a=123456789123456789123456789;\n"
"   int b=2;\n"
msgstr ""

#. name, q1, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"En Java, les entiers ne peuvent représenter que les nombres entre "
"``-2147483648`` et ``2147483647``. Le nombre ``123456789123456789123456789`` "
"est trop grand. Il ne peut être représenté que sous la forme d'un ``long``.\n"
msgstr ""

#. name, q10, name
#. name, q11, name
#: m01_qcm/task.yaml
msgid "Boucles while"
msgstr ""

#. name, q10, header
#: m01_qcm/task.yaml
msgid ""
"\n"
"Lequel des fragments de code Java ci-dessous permet de calculer la somme "
"des :math:`n` premiers entiers positifs ?\n"
msgstr ""

#. name, q10, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   int n=...;  // >0 à initialiser correctement\n"
"   int count=0;\n"
"   int sum=0; // la somme\n"
"   while(count <n) {\n"
"      sum=sum+count;\n"
"      count=count+1;\n"
"   }\n"
"   // la variable sum contient la somme des\n"
"   // n premiers entiers positifs\n"
msgstr ""

#. name, q10, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   int n=...;  // >0 à initialiser correctement\n"
"   int count=n;\n"
"   int sum=0; // la somme\n"
"   while(count>0) {\n"
"      sum=sum+count;\n"
"      count=count-1;\n"
"   }\n"
"   // la variable sum contient la somme des\n"
"   // n premiers entiers positifs\n"
msgstr ""

#. name, q10, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   int n=...;  // >0 à initialiser correctement\n"
"   int count=0;\n"
"   int sum=0; // la somme\n"
"   while(count <n) {\n"
"      sum=sum+count;\n"
"      count=count-1;\n"
"   }\n"
"   // la variable sum contient la somme des\n"
"   // n premiers entiers positifs\n"
msgstr ""

#. name, q10, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Cette boucle ne se termine pas.\n"
msgstr ""

#. name, q10, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   int n=...;  // à initialiser correctement\n"
"   int sum=0; // la somme\n"
"   while( n>1 ) {\n"
"      sum=sum+n;\n"
"      n=n-1;\n"
"   }\n"
msgstr ""

#. name, q10, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Quelle est la somme calculée par cette boucle ``while`` ?\n"
msgstr ""

#. name, q10, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   int n=...;  // à initialiser correctement\n"
"   int sum=0; // la somme\n"
"   while( sum=sum+n ) {\n"
"      n=n-1;\n"
"   }\n"
"   // la variable sum contient la somme des\n"
"   // n premiers entiers positifs\n"
msgstr ""

#. name, q10, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"L'expression qui sert de garde à une boucle ``while`` doit être une "
"expression booléenne. ``sum=sum+n`` n'est pas une expression booléenne et ce "
"programme n'est pas syntaxiquement valide.\n"
msgstr ""

#. name, q10, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   int n=...;  // >0 à initialiser correctement\n"
"   int count=n;\n"
"   int sum=0; // la somme\n"
"   while(count>0)\n"
"      sum=sum+count;\n"
"      count=count-1;\n"
"   // la variable sum contient la somme des\n"
"   // n premiers entiers positifs\n"
msgstr ""

#. name, q10, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Ce programme illustre une subtilité de l'utilisation des blocs avec le "
"langage Java. Sans accolades, la boucle ``while`` porte uniquement sur "
"l'instruction qui la suit. Ce code est donc équivalent au code ci-dessous :\n"
"\n"
".. code:: java\n"
"\n"
"   int n=...;  // >0 à initialiser correctement\n"
"   int count=n;\n"
"   int sum=0; // la somme\n"
"   while(count>0) {\n"
"      sum=sum+count;\n"
"   }\n"
"   count=count-1;\n"
"\n"
"Dans ce fragment de code, la variable ``count`` n'est pas décrémentée dans "
"le corps de la boucle et celle-ci ne se termine done jamais. Pour éviter ce "
"genre de problèmes, il est préférable de *toujours* utiliser des accolades "
"pour délimiter le bloc d'une boucle ``while``.\n"
msgstr ""

#. name, q10, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   int n=...;  // >0 à initialiser correctement\n"
"   int count=0;\n"
"   int sum=0; // la somme\n"
"   while(count<n)\n"
"      sum=sum+count;\n"
"      count=count+1;\n"
"   // la variable sum contient la somme des\n"
"   // n premiers entiers positifs\n"
msgstr ""

#. name, q10, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Ce programme illustre une subtilité de l'utilisation des blocs avec le "
"langage Java. Sans accolades, la boucle ``while`` porte uniquement sur "
"l'instruction qui la suit. Ce code est donc équivalent au code ci-dessous :\n"
"\n"
".. code:: java\n"
"\n"
"   int n=...;  // >0 à initialiser correctement\n"
"   int count=0;\n"
"   int sum=0; // la somme\n"
"   while(count<n) {\n"
"      sum=sum+count;\n"
"   }\n"
"   count=count+1;\n"
"\n"
"Dans ce fragment de code, la variable ``count`` n'est pas incrémentée dans "
"le corps de la boucle et celle-ci ne se termine done jamais. Pour éviter ce "
"genre de problèmes, il est préférable de *toujours* utiliser des accolades "
"pour délimiter le bloc d'une boucle ``while``.\n"
msgstr ""

#. name, q11, header
#: m01_qcm/task.yaml
msgid ""
"\n"
"Les boucles ``while`` sont utiles lorsque l'on doit répéter des opérations "
"similaires à de multiples reprises. En arithmétique, la factorielle d'un "
"entier positif (``n``) et supérieur à ``1`` est définie comme étant le "
"produit de tous les entiers inférieurs ou égaux à ``n``. La factorielle de "
"``n`` se note :math:`n!`. Ainsi :math:`4!=24`. Parmi les boucles ``while`` "
"ci-dessous, laquelle permet de calculer correctement :math:`n!` ?\n"
msgstr ""

#. name, q11, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   long n=17;\n"
"   long fact=1;  // factorielle\n"
"   int count=n;  // compteur pour la boucle\n"
"   while(count>1) {\n"
"      fact=fact*count;\n"
"      count=count-1;\n"
"   }\n"
msgstr ""

#. name, q11, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   long n=17;\n"
"   long fact=1;  // factorielle\n"
"   int count=1;  // compteur pour la boucle\n"
"   while(count<=n) {\n"
"      fact=fact*count;\n"
"      count=count+1;\n"
"   }\n"
msgstr ""

#. name, q11, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   long n=17;\n"
"   long fact=0;  // factorielle\n"
"   int count=n;  // compteur pour la boucle\n"
"   while(count>1) {\n"
"      fact=fact*count;\n"
"      count=count-1;\n"
"   }\n"
msgstr ""

#. name, q11, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Quel est le résultat de :math:`0 \\times n`?\n"
msgstr ""

#. name, q11, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   long n=17;\n"
"   long fact=1;  // factorielle\n"
"   int count=1;  // compteur pour la boucle\n"
"   while(count>1) {\n"
"      fact=fact*count;\n"
"      count=count+1;\n"
"   }\n"
msgstr ""

#. name, q11, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Cette boucle ne s'arrête jamais.\n"
msgstr ""

#. name, q11, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   long n=17;\n"
"   long fact=1;  // factorielle\n"
"   int count=n;  // compteur pour la boucle\n"
"   while(count>1) {\n"
"      fact=count;\n"
"      count=count-1;\n"
"   }\n"
msgstr ""

#. name, q11, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Cette boucle ne fait que placer la valeur ``count`` dans ``fact`` à chaque "
"itération.\n"
msgstr ""

#. name, q11, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   long n=17;\n"
"   long fact=1;  // factorielle\n"
"   int count=1;  // compteur pour la boucle\n"
"   while(count<=n) {\n"
"      count=count+1;\n"
"      fact=fact*count;\n"
"   }\n"
msgstr ""

#. name, q11, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Cette boucle ne calcule pas la factorielle demandée. Que calcule-t-elle ?\n"
msgstr ""

#. name, q2, header
#: m01_qcm/task.yaml
msgid ""
"\n"
"Parmi les fragments de programmes Java ci-dessous, quels sont ceux qui "
"respectent la syntaxe du langage ?\n"
msgstr ""

#. name, q2, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   int i=1;\n"
"   double d=2.0;\n"
"   char c='3';\n"
"   boolean b=false;\n"
"   long l=-1;\n"
msgstr ""

#. name, q2, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   int i=0;\n"
"   double d=3.2e-1;\n"
"   char c='9';\n"
"   boolean b=true;\n"
"   long l=-1;\n"
msgstr ""

#. name, q2, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   int i=0.9;\n"
"   double d=3.2e-1;\n"
"   char c='0';\n"
"   boolean b=false;\n"
"   long l=-1234;\n"
msgstr ""

#. name, q2, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Le type ``int`` ne peut être utilisé que pour stocker des nombres entiers.\n"
msgstr ""

#. name, q2, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   int i=-12345;\n"
"   double d=3;\n"
"   char c='12';\n"
"   boolean b=true;\n"
"   long l=678;\n"
msgstr ""

#. name, q2, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Le type ``char`` ne peut être utilisé que pour stocker un (et un seul) "
"caractère. ``'12'`` n'est pas un caractère valide. ``char c='2';`` serait "
"une déclaration valide.\n"
msgstr ""

#. name, q2, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   int i=-12345;\n"
"   double d=3;\n"
"   char c=\"9\";\n"
"   boolean b=true;\n"
"   long l=678;\n"
msgstr ""

#. name, q2, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Le type ``char`` ne peut être utilisé que pour stocker un (et un seul) "
"caractère. En java, une expression entre guillemets comme ``\"9\"`` est une "
"*chaîne de caractères* (un ``String``)  et non un caractère. ``char c='9';`` "
"(notez l'utilisation des apostrophes au lieu des guillemets) serait une "
"déclaration valide.\n"
msgstr ""

#. name, q2, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   int i=2/3;\n"
"   double d='8';\n"
"   char c='a';\n"
"   boolean b=false;\n"
"   long l=-1;\n"
msgstr ""

#. name, q2, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Le type ``double`` ne peut être utilisé que pour stocker un nombre réel. "
"``'8'`` est le caractère qui correspond au chiffre huit et non un nombre "
"réel. Cette initialisation n'est donc pas valide. Notez que la ligne ``int "
"i=2/3;`` est tout à fait valide. L'initialisation d'une variable peut être "
"faite en utilisant n'importe quelle expression qui retourne une variable de "
"ce type. Cependant, comme ``i`` est une variable de type ``int``, sa valeur "
"sera ``0`` puisque la division ``2/3`` est une division entière.\n"
msgstr ""

#. name, q2, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   int i=7;\n"
"   double d=-2.34;\n"
"   char c='z';\n"
"   boolean b=0;\n"
"   long l=-1;\n"
msgstr ""

#. name, q2, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Le type ``boolean`` ne peut être utilisé que pour stocker une valeur "
"booléenne contrairement à d'autres langages tels que C. Il peut s'agir de "
"``true``, ``false`` ou n'importe quelle expression qui donne une valeur "
"booléenne. Ainsi, l'expression ``i==9`` est une expression booléenne qui a "
"la valeur ``false``. Cette expression aurait pu aussi être utilisée pour "
"initialiser la variable booléenne ``b``.\n"
msgstr ""

#. name, q3, name
#: m01_qcm/task.yaml
msgid "Les commentaires"
msgstr ""

#. name, q3, header
#: m01_qcm/task.yaml
msgid ""
"\n"
"Afin de faciliter la compréhension des programmes écrits dans un langage de "
"programmation tel que Java, il est important de bien le documenter en "
"utilisant des commentaires. Parmi les fragments de code Java ci-dessous, "
"lequel est syntaxiquement correct ?\n"
msgstr ""

#. name, q3, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"  /***********************\n"
"   * Mon programme\n"
"   *\n"
"   ***********************/\n"
"   int count=7; // compteur\n"
"   int n=0;\n"
"   // test\n"
"   if(count>3) {\n"
"      n=count;\n"
"   }\n"
msgstr ""

#. name, q3, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"  /***********************\n"
"   * Mon programme\n"
"   *\n"
"   ***********************/\n"
"   int count=7; // compteur\n"
"   int n=0;\n"
"   // double d;\n"
"   if(count>3) {\n"
"      n=count;\n"
"   }\n"
msgstr ""

#. name, q3, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Un ligne de commentaire est une ligne ignorée par le compilateur Java. "
"Certains programmeurs mettent en commentaire des lignes inutiles comme ci-"
"dessus. Cela peut être utile durant l'écriture de programmes, mais évitez de "
"rendre un programme finalisé avec des lignes de code en commentaires.\n"
msgstr ""

#. name, q3, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"  //\n"
"  // Mon programme\n"
"  //\n"
"  //\n"
"   int count=7; /* compteur */\n"
"   int n=0;\n"
"   // test\n"
"   if(count>3) {\n"
"      n=count;\n"
"   }\n"
msgstr ""

#. name, q3, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"\n"
"Ce fragment de code est correct, mais en général on préfère utiliser ``//`` "
"et non ``/* ... */``  pour un commentaire sur une ligne. Inversement, on "
"préfère utiliser ``/* ... */`` pour un commentaire qui prend plusieurs "
"lignes et non mettre ``//`` au début de chaque ligne de commentaire.\n"
msgstr ""

#. name, q3, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"  /***********************\n"
"   * Mon programme\n"
"   *\n"
"   ***********************/\n"
"   int count=7; // compteur\n"
"   int n=0;\n"
"   /* test\n"
"   if(count>3) {\n"
"      n=count;\n"
"   }\n"
msgstr ""

#. name, q3, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Dans ce fragment de code, la ligne ``/* test`` marque le début d'un "
"commentaire sur plusieurs lignes. Ce commentaire doit se terminer avec ``*/"
"``, ce qui n'est pas le cas dans le code ci-dessus.\n"
msgstr ""

#. name, q3, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"  /***********************\n"
"   * Mon programme\n"
"   *\n"
"   ***********************\n"
"   int count=7; // compteur\n"
"   int n=0;\n"
"   // test\n"
"   if(count>3) {\n"
"      n=count;\n"
"   }\n"
msgstr ""

#. name, q3, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Dans ce fragment de code, la première ligne marque le début d'un commentaire "
"sur plusieurs lignes. Ce commentaire doit normalement se terminer par ``*/"
"``. Ce n'est pas le cas de l'exemple ci-dessus et le compilateur Java va "
"considérer l'entièreté du programme comme étant un commentaire.\n"
msgstr ""

#. name, q3, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"  /***********************\n"
"   * Mon programme\n"
"   *\n"
"   ***********************\n"
"   int count=7; / compteur\n"
"   int n=0;\n"
"   / / test\n"
"   if(count>3) {\n"
"      n=count;\n"
"   }\n"
msgstr ""

#. name, q3, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Un commentaire doit débuter par ``//`` (deux fois caractère ``/``). Si vous "
"utilisez un seul caractère ``/`` ou deux caractères ``/ /`` séparés par un "
"espace, le compilateur Java ne considère par qu'il s'agit d'un marqueur "
"valide de commentaire.\n"
msgstr ""

#. name, q4, name
#: m01_qcm/task.yaml
msgid "Syntaxe de Java"
msgstr ""

#. name, q4, header
#: m01_qcm/task.yaml
msgid ""
"\n"
"\n"
"Un langage de programmation tel que Java utilise une syntaxe bien précise. "
"Il est important que vous sachiez reconnaître rapidement des erreurs de "
"syntaxe dans un programme Java pour éviter de les commettre vous-même. Les "
"programmes ci-dessous ont été écrits par des étudiants pour afficher le "
"message ``Hello, world!`` à l'écran. Chaque programme est stocké dans le "
"fichier ``Hello.java``. Un seul de ces programmes est acceptable par le "
"compilateur Java. Lequel ?\n"
msgstr ""

#. name, q4, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   public class Hello {\n"
"\n"
"    public static void main (String[] args) {\n"
"      System.out.println(\"Hello, world!\");\n"
"    }\n"
"   }\n"
msgstr ""

#. name, q4, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   public class Hello {\n"
"\n"
"    public static void main (String[] args) {\n"
"      System.out.print(\"Hello,\");\n"
"      System.out.println(\"world!\");\n"
"    }\n"
"   }\n"
msgstr ""

#. name, q4, feedback
#: m01_qcm/task.yaml
msgid ""
"Ce code est correct. Il utilise deux instructions pour afficher le messages."
msgstr ""

#. name, q4, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   public class Monprog {\n"
"\n"
"    public static void main (String[] args) {\n"
"      System.out.println(\"Hello, world!\");\n"
"    }\n"
"   }\n"
msgstr ""

#. name, q4, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"En Java, le fichier ``Hello.java`` doit toujours contenir une classe dont le "
"nom est ``Hello``.\n"
msgstr ""

#. name, q4, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   public class hello {\n"
"\n"
"    public static void main (String[] args) {\n"
"      System.out.println(\"Hello, world!\");\n"
"    }\n"
"   }\n"
msgstr ""

#. name, q4, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"En Java, le fichier ``Hello.java`` doit toujours contenir une classe dont le "
"nom est ``Hello``. Les noms de classe commencent toujours par une "
"majuscule.\n"
msgstr ""

#. name, q4, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   public class Hello {\n"
"\n"
"    public main (String[] args) {\n"
"      System.out.println(\"Hello, world!\");\n"
"    }\n"
"   }\n"
msgstr ""

#. name, q4, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"En Java, la méthode qui est exécutée par défaut dans une classe Java a "
"toujours comme signature ``public main (String[] args)``.\n"
msgstr ""

#. name, q4, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   public class Hello {\n"
"\n"
"    public main (String[] args) {\n"
"      System.out.println(\"Hello, world!\")\n"
"    }\n"
"   }\n"
msgstr ""

#. name, q4, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"En Java, la ligne ``System.out.println(\"Hello, world!\")`` doit "
"nécessairement se terminer par un ``;``\n"
msgstr ""

#. name, q5, name
#: m01_qcm/task.yaml
msgid "Echange du contenu de variables"
msgstr ""

#. name, q5, header
#: m01_qcm/task.yaml
msgid ""
"\n"
"Dans un langage de programmation comme Java, il est souvent nécessaire "
"d'échanger le contenu de deux variables. Considérons le programme ci-dessous "
"dans lequel deux variables sont initialisées :\n"
"\n"
".. code:: java\n"
"\n"
"   int a=1401;\n"
"   int b=1101;\n"
"\n"
"Parmi les fragments de Java ci-dessous, lequel permet de correctement "
"échanger le contenu de la variable ``a`` avec le contenu de la variable "
"``b`` ?\n"
msgstr ""

#. name, q5, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   a=b;\n"
msgstr ""

#. name, q5, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Cette instruction place dans la variable ``a`` le contenu de la variable "
"``b`` mais pas l'inverse.\n"
msgstr ""

#. name, q5, text
#: m01_qcm/task.yaml
msgid ""
"\n"
"\n"
".. code:: java\n"
"\n"
"   b==a;\n"
msgstr ""

#. name, q5, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Ce n'est pas une instruction valide en langage Java. Ne confondez-pas ``==`` "
"et ``=``.\n"
msgstr ""

#. name, q5, text
#: m01_qcm/task.yaml
msgid ""
"\n"
"\n"
".. code:: java\n"
"\n"
"   b=a;\n"
msgstr ""

#. name, q5, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Cette instruction place dans la variable ``b`` le contenu de la variable "
"``a`` mais pas l'inverse.\n"
msgstr ""

#. name, q5, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"\n"
"    int c; // variable d'échange\n"
"    c=b;\n"
"    a=c;\n"
"    b=a;\n"
msgstr ""

#. name, q5, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Exécutez pas à pas cette suite d'instructions. Que contiennent les variables "
"``a`` et ``b`` à la fin de cette exécution ?\n"
msgstr ""

#. name, q5, text
#: m01_qcm/task.yaml
msgid ""
"\n"
"\n"
".. code:: java\n"
"\n"
"   int c; // variable d'échange\n"
"   c=a;\n"
"   a=b;\n"
"   b=c;\n"
msgstr ""

#. name, q5, text
#: m01_qcm/task.yaml
msgid ""
"\n"
"\n"
".. code:: java\n"
"\n"
"    int c; // variable d'échange\n"
"    c=b;\n"
"    b=a;\n"
"    a=c;\n"
msgstr ""

#. name, q6, header
#: m01_qcm/task.yaml
msgid ""
"\n"
"Considérons un programme Java qui manipule deux variables : ``a`` et ``b``. "
"Parmi les fragments de code ci-dessous, lequel place correctement dans la "
"variable ``min`` le minimum entre les contenus de ``a`` et ``b`` ?\n"
"\n"
".. code:: java\n"
"\n"
"   double a;\n"
"   double b;\n"
"   double min;\n"
msgstr ""

#. name, q6, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   if(a>b)\n"
"   {\n"
"     min=b;\n"
"   }\n"
"   else\n"
"   {\n"
"     min=a;\n"
"   }\n"
msgstr ""

#. name, q6, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   if(a<b)\n"
"   {\n"
"     min=a;\n"
"   }\n"
"   else\n"
"   {\n"
"     min=b;\n"
"   }\n"
msgstr ""

#. name, q6, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   if(a<=b)\n"
"   {\n"
"     min=a;\n"
"   }\n"
"   else\n"
"   {\n"
"     min=b;\n"
"   }\n"
msgstr ""

#. name, q6, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   if(a<=b)\n"
"   {\n"
"     double min;\n"
" min=a;\n"
"   }\n"
"   else\n"
"   {\n"
"     double min;\n"
"     min=b;\n"
"   }\n"
msgstr ""

#. name, q6, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Ce code ne fonctionne pas et le problème est assez subtil. En redéfinissant "
"la variable ``min`` à l'intérieur de chaque bloc, on définit une variable "
"qui est considérée par le compilateur comme étant différente de la variable "
"min qui a été définie avec les variables ``a`` et ``b``. La nouvelle "
"variable ``min`` est mise à jour à l'intérieur du bloc mais n'est pas "
"accessible en dehors de ce bloc.\n"
msgstr ""

#. name, q6, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   if(a!=b)\n"
"   {\n"
" min=a;\n"
"   }\n"
"   else\n"
"   {\n"
"     min=b;\n"
"   }\n"
msgstr ""

#. name, q6, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Ne confondez pas ``!=`` et ``<=``\n"
msgstr ""

#. name, q6, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   if(a>b)\n"
"   {\n"
" min=a;\n"
"   }\n"
"   else\n"
"   {\n"
"     min=b;\n"
"   }\n"
msgstr ""

#. name, q6, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Ce programme place la valeur maximale dans la variable ``min``.\n"
msgstr ""

#. name, q6, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   if(a<b)\n"
"   {\n"
" min=a;\n"
"   }\n"
msgstr ""

#. name, q6, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Lorsque la valeur de la variable ``a`` est supérieure ou égale à la valeur "
"de la variable ``b``, la variable ``min`` n'est pas initialisée.\n"
msgstr ""

#. name, q7, name
#: m01_qcm/task.yaml
msgid "Valeur absolue"
msgstr ""

#. name, q7, header
#: m01_qcm/task.yaml
msgid ""
"\n"
"Si ``x`` est une variable de type ``double``, lequel de ces fragments de "
"code place dans la variable ``abs`` la valeur absolue de ``x``?\n"
msgstr ""

#. name, q7, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   double abs;\n"
"   if( x<0 ) {\n"
"     abs=-x;\n"
"   }\n"
"   else {\n"
"     abs=x;\n"
"   }\n"
msgstr ""

#. name, q7, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   double abs=x;\n"
"   if( x<=0 ) {\n"
"     abs=-x;\n"
"   }\n"
msgstr ""

#. name, q7, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   double abs=x;\n"
"   if( x>=0 ) {\n"
"     abs=x;\n"
"   }\n"
"   else {\n"
"     abs=-x;\n"
"   }\n"
msgstr ""

#. name, q7, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   double abs=x;\n"
"   if( x>=0 ) {\n"
"     abs=x;\n"
"   }\n"
msgstr ""

#. name, q7, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Ce fragment de code place toujours la valeur ``x`` dans la variable "
"``abs``.\n"
msgstr ""

#. name, q7, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   double abs;\n"
"   if(x!=0) {\n"
"      abs=x;\n"
"   }\n"
"   else {\n"
"      abs=-x;\n"
"   }\n"
msgstr ""

#. name, q7, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Ne confondez pas ``!=`` et ``>=``.\n"
msgstr ""

#. name, q8, name
#: m01_qcm/task.yaml
msgid "Intervalles"
msgstr ""

#. name, q8, header
#: m01_qcm/task.yaml
msgid ""
"\n"
"En mathématiques, on définit des intervalles, fermés, ouverts et semi-"
"ouverts. L'intervalle semi-ouvert :math:`[3,7[` comprend l'ensemble des "
"nombres réels qui sont supérieurs ou égaux à `3` et strictement inférieurs à "
"7. Sachant que ``a``, ``b`` et ``x`` sont des variables de type ``double``, "
"lequel des fragments de code suivants affiche ``vrai`` sur sa sortie "
"standard si et seulement si ``x`` appartient à l'intervalle :math:`[a,b[` ? "
"On supposera pour cette question que la valeur stockée dans la variable "
"``a`` est strictement inférieure à celle stockée dans la variable ``b``.\n"
msgstr ""

#. name, q8, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   if(x>=a) {\n"
"     if(x<b) {\n"
"        System.out.println(\"vrai\");\n"
"    }\n"
"   }\n"
msgstr ""

#. name, q8, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   if(x<b) {\n"
"     if(x>=a) {\n"
"        System.out.println(\"vrai\");\n"
"    }\n"
"   }\n"
msgstr ""

#. name, q8, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   if( (x<b) && (x>=a) ){\n"
"     System.out.println(\"vrai\");\n"
"   }\n"
msgstr ""

#. name, q8, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   if( (x>=a) && (x<b) ){\n"
"     System.out.println(\"vrai\");\n"
"   }\n"
msgstr ""

#. name, q8, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   if( (a>=x) && (x<b) ) {\n"
"     System.out.println(\"vrai\");\n"
"   }\n"
msgstr ""

#. name, q8, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Dans quels cas l'expression ``( (a>=x) && (x<b) )`` est-elle vraie ?\n"
msgstr ""

#. name, q8, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   if( (a<x) && (x<b) ) {\n"
"     System.out.println(\"vrai\");\n"
"   }\n"
msgstr ""

#. name, q8, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"L'expression ``( (a<x) && (x<b) )`` est-elle vraie lorsque ``x==a`` ?\n"
msgstr ""

#. name, q8, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   if( (a<=x) || (x<b) ) {\n"
"     System.out.println(\"vrai\");\n"
"   }\n"
msgstr ""

#. name, q8, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Ne confondez pas la conjonction (`et`) logique représenté par ``&&`` en Java "
"et la disjonction (`ou`) logique représentée en Java par ``||``.\n"
msgstr ""

#. name, q8, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   if(x<a) {\n"
"     if(x<b) {\n"
"        System.out.println(\"vrai\");\n"
"    }\n"
"   }\n"
msgstr ""

#. name, q8, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Affiche-t-elle \"vrai\" lorsque ``x==a``?\n"
msgstr ""

#. name, q8, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   if(x<=b) {\n"
"     if(x>=a) {\n"
"        System.out.println(\"vrai\");\n"
"    }\n"
"   }\n"
msgstr ""

#. name, q8, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Qu'affiche ce fragment de code lorsque ``x==b`` ?\n"
msgstr ""

#. name, q9, name
#: m01_qcm/task.yaml
msgid "Opérations arithmétiques"
msgstr ""

#. name, q9, header
#: m01_qcm/task.yaml
msgid ""
"\n"
"Un seul des fragments de programmes ci-dessous affiche \"ok\" à l'écran ? "
"Pouvez-vous trouver lequel ?\n"
msgstr ""

#. name, q9, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   int i=2;\n"
"   int j=3;\n"
"   int k=i/j;\n"
"   if(k==0) {\n"
"      System.out.println(\"ok\");\n"
"   }\n"
msgstr ""

#. name, q9, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   double a=2;\n"
"   double b=3;\n"
"   double c=a/b;\n"
"   if(c!=0.0) {\n"
"      System.out.println(\"ok\");\n"
"   }\n"
msgstr ""

#. name, q9, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   int i=6;\n"
"   int j=7;\n"
"   int k=i/j;\n"
"   if(k!=0) {\n"
"      System.out.println(\"ok\");\n"
"   }\n"
msgstr ""

#. name, q9, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Dans ce fragment de code, les variables sont de type ``int``. En "
"arithmétique entière, la division ``6/7`` donne comme résultat ``0`` avec un "
"reste de ``6``.\n"
msgstr ""

#. name, q9, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   double a=1;\n"
"   double b=3;\n"
"   double c=a/b;\n"
"   if(c==0.0) {\n"
"      System.out.println(\"ok\");\n"
"   }\n"
msgstr ""

#. name, q9, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Dans ce fragment de code, les variables ``a`` et ``b`` sont de type "
"``double``. Elles permettent donc de stocker un nombre réel. Le résultat de "
"``a/b`` est ``0.33333`` qui est différent de ``0.0``.\n"
msgstr ""

#. name, q9, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   int i=8;\n"
"   int j=7;\n"
"   int k=i/j;\n"
"   if(k==0) {\n"
"      System.out.println(\"ok\");\n"
"   }\n"
msgstr ""

#. name, q9, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Dans ce fragment de code, les variables sont de type ``int``. En "
"arithmétique entière, la division ``8/7`` donne comme résultat ``1`` avec un "
"reste de ``1``.\n"
msgstr ""

#. name, q9, text
#: m01_qcm/task.yaml
msgid ""
"\n"
".. code:: java\n"
"\n"
"   double a=6.0;\n"
"   double b=7.0;\n"
"   double c=a/b;\n"
"   if(c==0.0) {\n"
"      System.out.println(\"ok\");\n"
"   }\n"
msgstr ""

#. name, q9, feedback
#: m01_qcm/task.yaml
msgid ""
"\n"
"Dans ce fragment de code, les variables ``a`` et ``b`` sont de type "
"``double``. Elles permettent donc de stocker un nombre réel. Le résultat de "
"``a/b`` est différent de ``0.0``.\n"
msgstr ""

#. author
#: m01real/task.yaml m02dem1/task.yaml m02real/task.yaml m03real1/task.yaml
#: m04dem5/task.yaml m04real/task.yaml m05real/task.yaml m06dem1/task.yaml
#: m06dem2/task.yaml m06dem3/task.yaml m06dem4/task.yaml m06real/task.yaml
#: m08dem1/task.yaml m08dem2/task.yaml m08real/task.yaml m09dem1/task.yaml
#: m09dem2/task.yaml m10real/task.yaml m12_examj2011q1_online/task.yaml
#: m12_examj2011q3_online/task.yaml m12_examj2011q5_online/task.yaml
#: m12_examj2011q7_online/task.yaml m1real/task.yaml mX12_examj2011q1/task.yaml
#: mX12_examj2011q3/task.yaml mX12_examj2011q5/task.yaml
#: mX12_examj2011q7/task.yaml
msgid "François MICHEL"
msgstr ""

#. context
#: m01real/task.yaml m1real/task.yaml
msgid ""
"Vous pouvez soumettre ici ou via BlueJ votre phase de réalisation pour la "
"Mission 1.\n"
"\n"
"Vous attendons une archive **.zip** contenant uniquement les fichiers :\n"
"\n"
"- MiseEnRoute.java\n"
"- README.txt"
msgstr ""

#. name
#: m01real/task.yaml m1real/task.yaml
msgid "Mission 1: Phase de réalisation: Soumission"
msgstr ""

#. name, q1, name
#: m01real/task.yaml m1real/task.yaml
msgid "Phase de réalisation de la Mission 1"
msgstr ""

#. name, q1, header
#: m01real/task.yaml m02real/task.yaml m04real/task.yaml m05real/task.yaml
#: m06real/task.yaml m07real/task.yaml m08real/task.yaml m09real/task.yaml
#: m11real/task.yaml m1real/task.yaml
msgid "Soumettez ici l'archive zip ou faites-le directement via BlueJ."
msgstr ""

#. author
#: m02Q1/task.yaml m02Q10/task.yaml m02Q8/task.yaml m02Q9/task.yaml
msgid "Ludovic Taffin, Brandon Naitali"
msgstr ""

#. context
#: m02Q1/task.yaml
msgid ""
"Calculez le reste de la division entière entre ``a`` et ``b`` en utilisant "
"uniquement une boucle ``for`` et des soustractions. On supposera ``a>0`` et "
"``b>0``.\n"
"\n"
"Exemple : Le reste de la division entière de 5 par 3 vaut 2\n"
"\n"
".. code-block:: java\n"
"\n"
"    int a; //a un entier strictement positif\n"
"    int b; //b un entier strictement positif\n"
"    int reste; // le reste de la division entière."
msgstr ""

#. name
#: m02Q1/task.yaml
msgid ""
"Mission 2 : Exercice supplémentaire : Calculer le reste d'une division "
"entière"
msgstr ""

#. name, q1, name
#: m02Q1/task.yaml
msgid "Calculer le reste d'une division entière"
msgstr ""

#. context
#: m02Q10/task.yaml
msgid ""
"Calculer le *nombre* de diviseurs distincts d'un entier strictement "
"positif.\n"
"\n"
"\n"
".. code-block:: java\n"
"\n"
"    int a; // l'entier a\n"
"    int resultat = 0;\n"
msgstr ""

#. name
#: m02Q10/task.yaml
msgid ""
"Mission 2 : Question supplémentaire : Calcul du nombre diviseurs distincts"
msgstr ""

#. name, q1, name
#: m02Q10/task.yaml
msgid ""
"Donner le code permettant de calculer le nombre de diviseurs distincts pour "
"a."
msgstr ""

#. author
#: m02Q3/task.yaml m02Q4/task.yaml m02Q5/task.yaml m02Q6/task.yaml
#: m04Q10/task.yaml m04Q11/task.yaml m04Q7/task.yaml m10Q2/task.yaml
#: m10Q4/task.yaml
msgid "Ludovic TAFFIN, Brandon NAITALI"
msgstr ""

#. context
#: m02Q3/task.yaml
msgid ""
"En utilisant des boucle(s) ``for``, écrivez le code permettant d'afficher un "
"triangle rectangle isocèle dont la longueur du côté vous est fournié.\n"
"\n"
"Pour rappel, ``System.out.print('0')`` permet d'afficher le caractère ``0`` "
"à l'écran et ``System.out.println()`` permet d'aller à la ligne.\n"
"\n"
"A titre d'exemple, voici un triangle dont le côté est de ``4`` :\n"
"\n"
".. code-block:: console\n"
"\n"
"   0\n"
"   00\n"
"   000\n"
"   0000\n"
"\n"
"\n"
".. code-block:: java\n"
"\n"
"    int cote = // la longueur du cote"
msgstr ""

#. name
#: m02Q3/task.yaml
msgid "Mission 2 : Question supplémentaire : Dessin d'un triangle"
msgstr ""

#. name, q1, name
#: m02Q3/task.yaml
msgid "Triangle"
msgstr ""

#. name, q1, header
#: m02Q3/task.yaml
msgid "Écrivez ici le bout de programme permettant de dessiner un triangle"
msgstr ""

#. context
#: m02Q4/task.yaml
msgid ""
"Dessiner la lettre H en utilisant de l'ASCII-art avec le caractère ``*``. "
"Votre programme reçoit comme entrée la hauteur de la lettre à dessiner "
"(supposée impaire) et sa largeur. N'affichez pas d'espaces inutiles à droite "
"de votre lettre.\n"
"\n"
"A titre d'exemple, si ``hauteur`` vaut 5 et ``largeur`` 3, vous devez "
"afficher.\n"
"\n"
".. code-block:: console\n"
"\n"
"   * *\n"
"   * *\n"
"   ***\n"
"   * *\n"
"   * *\n"
"\n"
"\n"
".. code-block:: java\n"
"\n"
"    int hauteur; // la hauteur du H\n"
"    int largeur; // la largeur du H\n"
"\n"
msgstr ""

#. name
#: m02Q4/task.yaml
msgid "Mission 2 : Question supplémentaire : Dessin de H"
msgstr ""

#. name, q1, name
#: m02Q4/task.yaml
msgid "Lettre H"
msgstr ""

#. name, q1, header
#: m02Q4/task.yaml
msgid "Écrivez ici le bout de programme permettant de dessiner la lettre H"
msgstr ""

#. context
#: m02Q5/task.yaml
msgid ""
"En utilisant le caractère ``*``, dessinez une lettre ``X`` dont on vous "
"donne la hauteur (supposée impaire). N'affichez pas d'espaces inutiles à "
"droite de votre lettre.\n"
"\n"
"Exemple avec une hauteur de 5, avec \"-\" symbolisant un espace :\n"
"\n"
".. code-block:: console\n"
"\n"
"    *---*\n"
"    -*-*\n"
"    --*\n"
"    -*-*\n"
"    *---*\n"
"\n"
".. code-block:: java\n"
"\n"
"    int hauteur; // la hauteur du X\n"
"\n"
"NB: Même un retour à la ligne est un caractère de trop!\n"
msgstr ""

#. name
#: m02Q5/task.yaml
msgid "Mission 2 : Question supplémentaire : Dessin de X"
msgstr ""

#. name, q1, name
#: m02Q5/task.yaml
msgid "Lettre X"
msgstr ""

#. name, q1, header
#: m02Q5/task.yaml
msgid "Écrivez ici le bout de programme permettant de dessiner la lettre X"
msgstr ""

#. context
#: m02Q6/task.yaml
msgid ""
"Dessinez la lettre S en utilisant le caractère ``*`` lorsque l'on vous donne "
"la ``hauteur``.\n"
"La largeur du S sera toujours de 3 caractères. Les espaces ne sont "
"nécéssaires que s'il y a une étoile après.\n"
"\n"
"\n"
"\n"
"Exemple avec une hauteur de 5, avec \"-\" symbolisant un espace:\n"
"\n"
".. code-block:: console\n"
"\n"
"    ***\n"
"    *\n"
"    ***\n"
"    --*\n"
"    ***\n"
"\n"
".. code-block:: java\n"
"\n"
"    int hauteur; // la hauteur du S"
msgstr ""

#. name
#: m02Q6/task.yaml
msgid "Mission 2 : Question supplémentaire : Dessin de S"
msgstr ""

#. name, q1, name
#: m02Q6/task.yaml
msgid "Lettre S"
msgstr ""

#. name, q1, header
#: m02Q6/task.yaml
msgid "Écrivez ici le bout de programme permettant de dessiner la lettre S"
msgstr ""

#. context
#: m02Q7/task.yaml
msgid ""
"Vous avez aujourd'hui ``base`` € sur votre livret d'épargne. Si vous le "
"laissez ``x`` années à un taux d'intérêt supposé fixe de ``y`` pourcents, "
"quel sera le solde de votre livret après ces ``x`` années ?\n"
"\n"
".. code-block:: java\n"
"\n"
"    int x; // le nombre d'années\n"
"    double y; // le pourcentage\n"
"    double base; // l'argent sur le compte sans les intérêts\n"
"    double resultat; // le resultat du calcul\n"
msgstr ""

#. name
#: m02Q7/task.yaml
msgid "Mission 2 : Question supplémentaire : Calcul d'intérêts"
msgstr ""

#. name, q1, name
#: m02Q7/task.yaml
msgid "Donner le code permettant de calculer les intérêts sur X années."
msgstr ""

#. context
#: m02Q8/task.yaml
msgid ""
"En mathématiques, la factorielle d'un entier ``x``, notée :math:`x!` "
"strictement positif est le produit des entiers strictement positifs "
"inférieurs ou égaux à ``x``. Calculer la factorielle d'un entier et stocker "
"la valeur dans la variable ``resultat``.\n"
"\n"
"Exemple : :math:`5! = 5×4×3×2×1 = 120`\n"
"\n"
".. code-block:: java\n"
"\n"
"    int x; // l'entier\n"
"    int resultat = 0;\n"
"\n"
"Tip : faites attention à la valeur de la variable resultat !\n"
msgstr ""

#. name
#: m02Q8/task.yaml
msgid "Mission 2 : Question supplémentaire : Calcul de factorielle"
msgstr ""

#. name, q1, name
#: m02Q8/task.yaml
msgid "Donner le code permettant de calculer la factorielle."
msgstr ""

#. context
#: m02Q9/task.yaml
msgid ""
"``a`` et ``b`` sont deux entiers tels que :math:`a<b`. Calculez la somme des "
"entiers se trouvant dans l'intervalle fermé :math:`[a,b]`  en utilisant une "
"boucle ``for``.\n"
"\n"
"\n"
".. code-block:: java\n"
"\n"
"    int a; // l'entier a\n"
"    int b; // l'entier b\n"
"    int resultat = 0;\n"
msgstr ""

#. name
#: m02Q9/task.yaml
msgid "Mission 2 : Question supplémentaire : Somme des entiers entre a et b"
msgstr ""

#. name, q1, name
#: m02Q9/task.yaml
msgid ""
"Donner le code permettant de calculer la somme des entiers entre a et b."
msgstr ""

#. context
#: m02_bf/task.yaml
msgid ""
"Soit un naturel non-nul :math:`x`, le naturel non-nul :math:`d` est un "
"**diviseur propre** de :math:`x` s'il est compris entre :math:`x` (exclus) "
"et qu'il divise :math:`x`.\n"
"\n"
"Ce qui va nous intéresser dans le cadre de cette question de bilan final, "
"c'est le nombre de diviseurs propres. Vous devez écrire un programme qui va, "
"étant donné un naturel non-nul ``n``, afficher à l'écran le nombre de "
"diviseurs propres que possède chacun des naturels compris entre :math:`1` "
"et :math:`n` (tous les deux inclus).\n"
"\n"
"Par exemple, si la variable ``n`` vaut :math:`7`, votre programme doit "
"afficher sur la sortie standard, grâce à ``System.out.println()``, ceci :\n"
"\n"
".. code-block:: console\n"
"\n"
"    1:0\n"
"    2:1\n"
"    3:1\n"
"    4:2\n"
"    5:1\n"
"    6:3\n"
"    7:1\n"
"\n"
"Votre programme doit afficher son résultat exactement comme présenté dans "
"l'exemple ci-dessus. Vous ne devez pas déclarer, ni initialiser la variable "
"de type ``int`` nommée ``n``, elle vous sera fournie."
msgstr ""

#. name
#: m02_bf/task.yaml
msgid "Mission 2 : Question de Bilan Final"
msgstr ""

#. name, q1, header
#: m02_bf/task.yaml
msgid ""
"Écrivez ici directement le code de la méthode ``main``. Vous ne devez pas "
"déclarer, ni initialiser la variable ``n``."
msgstr ""

#. context
#: m02_qcm/task.yaml
msgid ""
"============================\n"
"Mission 2. Les bases de Java\n"
"============================\n"
"\n"
"Cette mission a pour objectif de renforcer vos connaissances des concepts de "
"base de la programmation en Java.\n"
"\n"
"Ces questions supposent que vous avez lu les sections suivantes du livre de "
"référence |jn|_ :\n"
"\n"
"\n"
" - |jn2|_\n"
"\n"
"     - |jn2.4|_ (sauf |jn2.4.2|_, |jn2.4.4|_, |jn2.4.5|_, et |jn2.4.6|_).\n"
"\n"
" - |jn3|_\n"
"\n"
"     - |jn3.2|_\n"
"     - |jn3.3|_ (sauf |jn3.3.3|_)\n"
"     - |jn3.4|_ (sauf |jn3.4.4|_)\n"
"     - |jn3.5|_\n"
"\n"
"\n"
"\n"
".. _jn: http://math.hws.edu/javanotes/\n"
".. |jn| replace:: JavaNotes\n"
"\n"
".. _jn2 : http://math.hws.edu/javanotes/c2/index.html\n"
".. |jn2| replace:: `2 : Programming in the Small I: Names and Things`\n"
"\n"
".. _jn2.4: http://math.hws.edu/javanotes/c2/s4.html\n"
".. |jn2.4| replace:: `2.4 : Text Input and Output`\n"
"\n"
".. _jn2.4.2: http://math.hws.edu/javanotes/c2/s4.html#basics.4.2\n"
".. |jn2.4.2| replace:: `2.4.2 : Text Output`\n"
"\n"
".. _jn2.4.4 : http://math.hws.edu/javanotes/c2/s4.html#basics.4.4\n"
".. |jn2.4.4| replace:: `2.4.4 : Formatted Output`\n"
"\n"
".. _jn2.4.5 : http://math.hws.edu/javanotes/c2/s4.html#basics.4.5\n"
".. |jn2.4.5| replace:: `2.4.5 : Introduction to File I/O`\n"
"\n"
".. _jn2.4.6 : http://math.hws.edu/javanotes/c2/s4.html#basics.4.6\n"
".. |jn2.4.6| replace:: `2.4.6 : Using Scanner for Input`\n"
"\n"
".. _jn3 : http://math.hws.edu/javanotes/c3/index.html\n"
".. |jn3| replace:: `3 : Programming in the Small II: Control`\n"
"\n"
".. _jn3.2 : http://math.hws.edu/javanotes/c3/s2.html\n"
".. |jn3.2| replace:: `3.2 : Algorithm Development`\n"
"\n"
".. _jn3.3 : http://math.hws.edu/javanotes/c3/s3.html\n"
".. |jn3.3| replace:: `3.3 : The while and do..while Statements`\n"
"\n"
".. _jn3.3.3 : http://math.hws.edu/javanotes/c3/s3.html#control.3.3\n"
".. |jn3.3.3| replace:: `3.3.3 : break and continue`\n"
"\n"
".. _jn3.4 : http://math.hws.edu/javanotes/c3/s4.html\n"
".. |jn3.4| replace:: `3.4 : The for Statement`\n"
"\n"
".. _jn3.4.4 : http://math.hws.edu/javanotes/c3/s4.html#control.4.4\n"
".. |jn3.4.4| replace:: `3.4.4 : Enums and for-each Loops`\n"
"\n"
".. _jn3.5 : http://math.hws.edu/javanotes/c3/s5.html\n"
".. |jn3.5| replace:: `3.5 : The if Statement`\n"
msgstr ""

#. name
#: m02_qcm/task.yaml
msgid "Mission 2: QCM"
msgstr ""

#. name, q1, name
#: m02_qcm/task.yaml
msgid "Types de données primitifs"
msgstr ""

#. name, q1, header
#: m02_qcm/task.yaml
msgid ""
"\n"
"Java supporte différents types de données primitifs : ``byte``, ``int``, "
"``short``, ``long``, ``float``, ``double``, ``char`` et ``boolean``. Dans le "
"cadre du cours, nous n'utiliserons pas les types ``byte`` et ``short``. Dans "
"un programme Java, vous devez stocker les informations suivantes :\n"
"\n"
" - le nombre d'étudiants en première année (variable ``etudiants``)\n"
" - le budget de l'état américain en dollars (variable ``budget``)\n"
" - le nombre :math:`\\pi` (variable ``pi``)\n"
" - une mesure de température (variable ``temp``)\n"
" - la présence d'un étudiant dans un local (variable ``present``)\n"
" - un caractère tapé sur un clavier (variable ``caractere``)\n"
"\n"
"Parmi les déclarations de variables suivantes, quelle est celle qu'il est "
"préférable\n"
"d'utiliser pour ces données ?\n"
msgstr ""

#. name, q1, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   int etudiants;\n"
"   float budget;\n"
"   double pi;\n"
"   double temp;\n"
"   boolean present;\n"
"   char caractere;\n"
msgstr ""

#. name, q1, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   int etudiants;\n"
"   double budget;\n"
"   double pi;\n"
"   float temp;\n"
"   boolean present;\n"
"   char caractere;\n"
msgstr ""

#. name, q1, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   double etudiants;\n"
"   double budget;\n"
"   double pi;\n"
"   double temp;\n"
"   boolean present;\n"
"   char caractere;\n"
msgstr ""

#. name, q1, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Y-a-t-il des fractions d'étudiants en première année ? Si non, pourquoi "
"représenter ce nombre en utilisant un réel et non un entier ?\n"
msgstr ""

#. name, q1, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   int etudiants;\n"
"   double budget;\n"
"   double pi;\n"
"   float temp;\n"
"   int present;\n"
"   char caractere;\n"
msgstr ""

#. name, q1, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"La présence d'un étudiant est typiquement une donnée dont la valeur peut "
"être vraie ou fausse. C'est dans ce cas que l'on utilise un ``boolean``\n"
msgstr ""

#. name, q1, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   int etudiants;\n"
"   long budget;\n"
"   double pi;\n"
"   float temp;\n"
"   boolean present;\n"
"   char caractere;\n"
msgstr ""

#. name, q1, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Les américains utilisent des dollars et des cents. Vous devez donc pouvoir "
"représenter un budget de 3.45$, ce que le type ``long`` ne permet pas.\n"
msgstr ""

#. name, q1, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   int etudiants;\n"
"   int budget;\n"
"   double pi;\n"
"   float temp;\n"
"   boolean present;\n"
"   char caractere;\n"
msgstr ""

#. name, q1, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Les américains utilisent des dollars et des cents. Vous devez donc pouvoir "
"représenter un budget de 3.45$, ce que le type ``int`` ne permet pas. De "
"plus, le type ``int`` ne peut stocker que des nombres allant de "
"``-2147483648`` et ``2147483647``, ce qui est insuffisant pour le budget (et "
"le déficit) américain.\n"
msgstr ""

#. name, q10, name
#: m02_qcm/task.yaml
msgid "Boucles for et while"
msgstr ""

#. name, q10, header
#: m02_qcm/task.yaml
msgid ""
"\n"
"Java supporte à la fois les boucles ``for`` et les boucles ``while``. "
"Souvent, on peut utiliser une boucle ``for`` à la place d'une boucle "
"``while`` et inversement. Considérons la boucle ``for`` ci-dessous :\n"
"\n"
"\n"
"\n"
".. code-block:: java\n"
"\n"
"    for(int i=0; i<n; i=i+2) {\n"
"       //faire quelque chose\n"
"    }\n"
"\n"
"A laquelle des boucles ``while`` ci-dessous cette boucle est-elle "
"équivalente ?\n"
msgstr ""

#. name, q10, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   int i=0;\n"
"   while(i<n) {\n"
"    // faire quelque chose\n"
"    i=i+2;\n"
"   }\n"
msgstr ""

#. name, q10, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   int i;\n"
"   i=0;\n"
"   while( !(i>=n) ) {\n"
"    // faire quelque chose\n"
"    i=i+2;\n"
"   }\n"
msgstr ""

#. name, q10, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   int i=0;\n"
"   while(i<n) {\n"
"    i=i+2;\n"
"    // faire quelque chose\n"
"   }\n"
msgstr ""

#. name, q10, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Notez que dans ce cas, première itération de la boucle se fait avec ``2`` "
"comme valeur pour la variable ``i``.\n"
msgstr ""

#. name, q10, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   int i=0;\n"
"   while(i!=n) {\n"
"    i=i+2;\n"
"    // faire quelque chose\n"
"   }\n"
msgstr ""

#. name, q10, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Que se passe-t-il si la variable ``n`` est impaire ?\n"
msgstr ""

#. name, q10, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   int i;\n"
"   i=0;\n"
"   while( !(i>=n) ) {\n"
"    i=i+2;\n"
"    // faire quelque chose\n"
"   }\n"
msgstr ""

#. name, q11, name
#: m02_qcm/task.yaml
msgid "Boucles imbriquées"
msgstr ""

#. name, q11, header
#: m02_qcm/task.yaml
msgid ""
"\n"
"Laquelle des boucles ci-dessous permet d'afficher à l'écran un rectangle  "
"composé de ``l`` lignes contenant chacune ``c`` caractères ? Par exemple, le "
"rectangle ci-dessous est un rectangle de 3x7\n"
"\n"
".. code-block:: java\n"
"\n"
" XXXXXXX\n"
" XXXXXXX\n"
" XXXXXXX\n"
"\n"
"\n"
"On supposera pour répondre à cette question que les variables ``l`` et ``c`` "
"ont été correctement initialisées.\n"
msgstr ""

#. name, q11, text
#: m02_qcm/task.yaml
#, python-format
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   char s='X';\n"
"   for(int i=1;i<=(l*c);i++) {\n"
"      System.out.print(s);\n"
"      int reste=i%c;\n"
"      if(reste==0) {\n"
"        System.out.println();\n"
"      }\n"
"   }\n"
msgstr ""

#. name, q11, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   char s='X';\n"
"   for(int i=0:i<l;i=i+1) {\n"
"      for(int j=0;j<c;j=j+1) {\n"
"         System.out.print(s);\n"
"      }\n"
"      System.out.println();\n"
"   }\n"
msgstr ""

#. name, q11, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   char s='X';\n"
"   for(int i=0:i<c;i=i+1) {\n"
"      for(int j=0;j<l;j=j+1) {\n"
"         System.out.print(s);\n"
"      }\n"
"      System.out.println();\n"
"   }\n"
msgstr ""

#. name, q11, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Dans quel ordre les caractères ``X`` sont-ils affichés ? Le rectangle a-t-il "
"bien ``l`` lignes et ``c`` colonnes ?\n"
msgstr ""

#. name, q11, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   char c='X';\n"
"   for(int i=0:i<l;i=i+1) {\n"
"      for(int j=0;j<c;i=i+1) {\n"
"         System.out.print(c);\n"
"      }\n"
"   }\n"
msgstr ""

#. name, q11, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Ce programme affiche-t-il vraiment un rectangle ?\n"
msgstr ""

#. name, q12, name
#: m02_qcm/task.yaml
msgid "Calcul de la somme des diviseurs premiers d'un nombre"
msgstr ""

#. name, q12, header
#: m02_qcm/task.yaml
msgid ""
"\n"
"En arithmétique, certaines propriétés sur les nombres entiers dépendent de "
"la somme des diviseurs entiers de ce nombre. Ainsi, un nombre :math:`n` est "
"dit `parfait <http://fr.wikipedia.org/wiki/Nombre_parfait>`_ si :math:`"
"\\sigma(n)=2n` où :math:`\\sigma(n)` est la somme des diviseurs de ce "
"nombre. Lequel des fragments de programmes ci-dessous place dans la variable "
"``sum`` la somme des diviseurs de ``n`` ?\n"
msgstr ""

#. name, q12, text
#: m02_qcm/task.yaml
#, python-format
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   int sum=n+1;\n"
"   for(int i=2;i<n;i=i+1) {\n"
"      int reste=n%i;\n"
"      if(reste==0) {\n"
"         sum=sum+i;\n"
"      }\n"
"   }\n"
msgstr ""

#. name, q12, text
#: m02_qcm/task.yaml
#, python-format
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   int sum=0;\n"
"   for(int i=1;i<=n;i=i+1) {\n"
"      int reste=n%i;\n"
"      if(reste==0) {\n"
"         sum=sum+i;\n"
"      }\n"
"   }\n"
msgstr ""

#. name, q12, text
#: m02_qcm/task.yaml
#, python-format
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   int sum=0;\n"
"   for(int i=n;i>=1;i=i-1) {\n"
"      int reste=n%i;\n"
"      if(reste==0) {\n"
"         sum=sum+i;\n"
"      }\n"
"   }\n"
msgstr ""

#. name, q12, text
#: m02_qcm/task.yaml
#, python-format
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   int sum=0;\n"
"   for(int i=2;i<n;i=i+1) {\n"
"      int reste=n%i;\n"
"      if(reste==0) {\n"
"         sum=sum+i;\n"
"      }\n"
"   }\n"
msgstr ""

#. name, q12, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Attention à l'initialisation de la variable ``sum``. ``1`` et ``n`` sont "
"toujours diviseurs entiers de ``n``.\n"
msgstr ""

#. name, q12, text
#: m02_qcm/task.yaml
#, python-format
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   int sum=0;\n"
"   for(int i=1;i<=n;i=i+1) {\n"
"      int reste=n%i;\n"
"      if(reste==0) {\n"
"         sum=sum+reste;\n"
"      }\n"
"   }\n"
msgstr ""

#. name, q12, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Ce fragment de programme modifie-il la valeur de ``sum``  ?\n"
msgstr ""

#. name, q12, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   int sum=0;\n"
"   for(int i=1;i<=n;i=i+1) {\n"
"      sum=sum+i;\n"
"   }\n"
msgstr ""

#. name, q12, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Ce programme calcule la somme des entiers de ``1`` à ``n`` et non la somme "
"des diviseurs entiers de ``n``.\n"
msgstr ""

#. name, q12, text
#: m02_qcm/task.yaml
#, python-format
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   int sum=0;\n"
"   for(int i=1;i<=n;i=i+1) {\n"
"      int reste=n%i;\n"
"      if(reste==0) {\n"
"         sum=reste;\n"
"      }\n"
"   }\n"
msgstr ""

#. name, q12, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Ce programme calcule en fait le plus grand diviseur de ``n``. Voyez-vous "
"pourquoi ?\n"
msgstr ""

#. name, q2, name
#: m02_qcm/task.yaml
msgid "Vocabulaire"
msgstr ""

#. name, q2, header
#: m02_qcm/task.yaml
msgid ""
"\n"
"Considérons le fragment de programme ci-dessous.\n"
"\n"
"\n"
"\n"
".. code-block:: java\n"
"\n"
"    int i;  // ligne 1\n"
"    int j;  // ligne 2\n"
"    i=12;   // ligne 3\n"
"    j=i;    // ligne 4\n"
"    double k=0.0; // ligne 5\n"
"    if( i==j ) {  // ligne 6\n"
"       k=k+1.0;   // ligne 7\n"
"    }             // ligne 8\n"
"    else {        // ligne 9\n"
"       k=k-2.0;   // ligne 10\n"
"    }             // ligne 11\n"
"\n"
"Lesquelles des affirmations ci-dessous utilisent une terminologie "
"correcte ?\n"
msgstr ""

#. name, q2, text
#: m02_qcm/task.yaml
msgid ""
"``j`` est une variable de type ``int`` (entière)\n"
" La ligne ``1`` contient une déclaration de variable\n"
" La ligne ``3`` contient une affectation d'une valeur à une variable\n"
" La ligne ``6`` est une instruction conditionnelle\n"
" ``i==j`` est une expression qui a une valeur booléenne\n"
msgstr ""

#. name, q2, text
#: m02_qcm/task.yaml
msgid ""
"``k`` est une variable de type ``double`` (réel)\n"
" La ligne ``1`` contient une déclaration de variable\n"
" La ligne ``4`` contient une affectation de la valeur d'une expression "
"(``i``) à une variable\n"
" La ligne ``6`` est une instruction conditionnelle\n"
" ``k+1.0`` est une expression qui a une valeur réelle\n"
msgstr ""

#. name, q2, text
#: m02_qcm/task.yaml
msgid ""
"``j`` est une variable de type ``double`` (réelle)\n"
" La ligne ``1`` contient une déclaration de variable\n"
" La ligne ``5`` contient une affectation d'une valeur à une variable\n"
" La ligne ``6`` est une instruction conditionnelle\n"
" ``i==j`` est une expression qui a une valeur booléenne\n"
msgstr ""

#. name, q2, text
#: m02_qcm/task.yaml
msgid ""
"``k`` est une variable de type ``double`` (réel)\n"
" La ligne ``1`` contient une déclaration de variable\n"
" La ligne ``4`` contient une affectation de la valeur d'une expression "
"(``i``) à une variable\n"
" La ligne ``6`` est une instruction conditionnelle\n"
" ``k+1.0`` est une expression qui a une valeur booléenne\n"
msgstr ""

#. name, q2, text
#: m02_qcm/task.yaml
msgid ""
"``j`` est une variable de type ``int`` (entière)\n"
" La ligne ``1`` contient une déclaration de variable\n"
" La ligne ``6`` est une instruction conditionnelle\n"
" ``i==j`` est une expression qui a une valeur entière\n"
msgstr ""

#. name, q2, text
#: m02_qcm/task.yaml
msgid ""
"``k`` est une variable de type ``double`` (réel)\n"
" La ligne ``1`` contient une déclaration de variable\n"
" La ligne ``4`` contient une affectation de la valeur d'une expression "
"(``i``) à une variable\n"
" La ligne ``6`` est une boucle\n"
" ``k+1.0`` est une expression qui a une valeur réelle\n"
msgstr ""

#. name, q3, name
#: m02_qcm/task.yaml
msgid "Instructions conditionnelles"
msgstr ""

#. name, q3, header
#: m02_qcm/task.yaml
msgid ""
"\n"
"Les instructions conditionnelles peuvent parfois comporter des conditions "
"plus compliquées dans lesquelles des conditions simples sont combinées en "
"utilisant la négation (``!``), la conjonction (``&&``) ou la disjonction "
"logique (``||``). Parmi les instructions conditionnelles suivantes, quelle "
"est celle dont la condition est vérifiée lorsque la valeur de la variable "
"``x`` se trouve dans l'intervalle :math:`[min,max[` ? On supposera que :math:"
"`min<max`.\n"
msgstr ""

#. name, q3, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   if( (x>=min) && (x<max) ) {   }\n"
msgstr ""

#. name, q3, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   if( (x<max) && (x>=min) ) {   }\n"
msgstr ""

#. name, q3, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   if( !(x<min) && !(x>=max) ) {   }\n"
msgstr ""

#. name, q3, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   if(! ( (x<min) && (x>=max) ) ){   }\n"
msgstr ""

#. name, q3, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   if( (x>=min) || (x<max) ) {   }\n"
msgstr ""

#. name, q3, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Ne confondez pas la conjonction logique (``&&``)  et la disjonction logique "
"(``||``).\n"
msgstr ""

#. name, q3, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   if( (x<max) || (x>=min) ) {   }\n"
msgstr ""

#. name, q3, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   if( !(x<min) || !(x>=max) ) {   }\n"
msgstr ""

#. name, q3, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   if(! ( (x<min) || (x>=max) ) ){   }\n"
msgstr ""

#. name, q3, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   if( (x<min) && (x<max) ) {   }\n"
msgstr ""

#. name, q3, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Sachant que :math:`min<max`, cette condition est équivalente à une condition "
"plus simple.\n"
msgstr ""

#. name, q3, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   if( (x>max) || (x>=min) ) {   }\n"
msgstr ""

#. name, q3, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   if( ! ( (x>min) && (x<=max) ) ) {   }\n"
msgstr ""

#. name, q3, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Ne confondez pas la conjonction logique (``&&``)  et la disjonction logique "
"(``||``). Cette condition ne peut jamais être vraie si :math:`min<max`\n"
msgstr ""

#. name, q4, name
#: m02_qcm/task.yaml
msgid "Instructions conditionnelles imbriquées"
msgstr ""

#. name, q4, header
#: m02_qcm/task.yaml
msgid ""
"\n"
"Dans un programme Java, il est parfois nécessaire d'avoir une instruction "
"conditionnelle qui contient elle-même une ou plusieurs autres instructions "
"conditionnelles. Laquelle des instructions conditionnelles suivantes affiche-"
"t-elle le message ``ok`` à l'écran lorsque la valeur de la variable de type "
"``double`` ``x`` est comprise entre ``2.0`` et ``5.0`` ?\n"
msgstr ""

#. name, q4, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   if (x>=2.0) {\n"
"     if (x<=5.0) {\n"
"       System.out.println(\"ok\");\n"
"     }\n"
"   }\n"
msgstr ""

#. name, q4, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   if (x<=5.0) {\n"
"     if (x>=2.0) {\n"
"       System.out.println(\"ok\");\n"
"     }\n"
"   }\n"
msgstr ""

#. name, q4, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   if (x<2.0) {\n"
"    // vide\n"
"   } else {\n"
"     if (x<=5.0) {\n"
"       System.out.println(\"ok\");\n"
"     }\n"
"   }\n"
msgstr ""

#. name, q4, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Ce code est correct, mais il n'est pas très lisible. Mieux vaut éviter ce "
"genre de code. Il est préférable d'écrire plutôt.\n"
"\n"
".. code-block:: java\n"
"\n"
"   if (x>=2.0) {\n"
"     if (x<=5.0) {\n"
"       System.out.println(\"ok\");\n"
"     }\n"
"   }\n"
msgstr ""

#. name, q4, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   if (x>=2.0) {\n"
"     System.out.println(\"ok\");\n"
"   }\n"
msgstr ""

#. name, q4, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Ce code est incomplet.\n"
msgstr ""

#. name, q4, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   if (x<=5.0) {\n"
"     System.out.println(\"ok\");\n"
"   }\n"
msgstr ""

#. name, q4, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"      if (x<2.0) {\n"
"        if (x<=5.0) {\n"
"          System.out.println(\"ok\");\n"
"        }\n"
"      }\n"
msgstr ""

#. name, q4, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"      if (x>=2.0) {\n"
"        if (x>5.0) {\n"
"          System.out.println(\"ok\");\n"
"        }\n"
"      }\n"
msgstr ""

#. name, q5, name
#. name, q6, name
#. name, q7, name
#: m02_qcm/task.yaml
msgid "Boucles for"
msgstr ""

#. name, q5, header
#: m02_qcm/task.yaml
msgid ""
"\n"
"Les boucles ``for`` sont très fréquemment utilisées dans des programmes "
"Java. Vous devez pouvoir utiliser facilement de telles boucles dans vos "
"programmes. Parmi les boucles ``for`` ci-dessous, quelle est celle qui "
"affiche cinq fois le caractère ``*`` à l'écran ?\n"
msgstr ""

#. name, q5, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  for(int i=0; i<5; i=i+1) {\n"
"      System.out.print(\"*\");\n"
"  }\n"
"  System.out.println();\n"
msgstr ""

#. name, q5, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  for(int i=5; i>0; i=i-1) {\n"
"      System.out.print(\"*\");\n"
"  }\n"
"  System.out.println();\n"
msgstr ""

#. name, q5, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  for(double i=0.0; i<1.0; i=i+0.2) {\n"
"      System.out.print(\"*\");\n"
"  }\n"
"  System.out.println();\n"
msgstr ""

#. name, q5, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  for(int i=10; i<=50; i=i+10) {\n"
"      System.out.print(\"*\");\n"
"  }\n"
"  System.out.println();\n"
msgstr ""

#. name, q5, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  for(int i=0; i<=5; i=i+1) {\n"
"      System.out.print(\"*\");\n"
"  }\n"
"  System.out.println();\n"
msgstr ""

#. name, q5, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Cette boucle ``for`` commence à la valeur ``0`` et se termine à la valeur "
"``5``. Elle affiche donc six fois le caractère ``\\*``.\n"
msgstr ""

#. name, q5, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  for(int i=0; i==5; i=i+1) {\n"
"      System.out.print(\"*\");\n"
"  }\n"
"  System.out.println();\n"
msgstr ""

#. name, q5, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Cette boucle ``for`` ne s'exécute jamais. La condition ``i==5`` n'est pas "
"vérifiée au début de la boucle.\n"
msgstr ""

#. name, q5, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  for(int i=5; i>=0; i=i-1) {\n"
"      System.out.print(\"*\");\n"
"  }\n"
"  System.out.println();\n"
msgstr ""

#. name, q5, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Cette boucle ``for`` commence à la valeur ``5`` et se termine à la valeur "
"``0``. Elle affiche donc six fois le caractère ``\\*``.\n"
msgstr ""

#. name, q5, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  for(double i=0.0; i<1.0; i=i-0.2) {\n"
"      System.out.print(\"*\");\n"
"  }\n"
"  System.out.println();\n"
msgstr ""

#. name, q5, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Cette boucle ne se termine jamais.\n"
msgstr ""

#. name, q5, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  for(int i=0; i<=50; i=i+10) {\n"
"      System.out.print(\"*\");\n"
"  }\n"
"  System.out.println();\n"
msgstr ""

#. name, q5, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Cette boucle commence à la valeur ``0`` et se termine à la valeur\n"
msgstr ""

#. name, q6, header
#: m02_qcm/task.yaml
msgid ""
"\n"
"Laquelle des boucles ``for`` ci-dessous affiche correctement tous les "
"diviseurs entiers du nombre ``n`` (supposé strictement positif) ?\n"
msgstr ""

#. name, q6, text
#: m02_qcm/task.yaml
#, python-format
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  for(int i=1; i<=n; i=i+1) {\n"
"     int reste=n%i;\n"
"     if(reste==0) {\n"
"        System.out.println(i);\n"
"     }\n"
"  }\n"
msgstr ""

#. name, q6, text
#: m02_qcm/task.yaml
#, python-format
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  int reste;\n"
"  for(int i=n; i>=1; i=i-1) {\n"
"     reste=n%i;\n"
"     if(reste==0) {\n"
"        System.out.println(i);\n"
"     }\n"
"  }\n"
msgstr ""

#. name, q6, text
#: m02_qcm/task.yaml
#, python-format
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"\n"
"  System.out.println(1);\n"
"  System.out.println(n);\n"
"  for(int i=2; i<n; i=i+1) {\n"
"     int reste=n%i;\n"
"     if(reste==0) {\n"
"        System.out.println(i);\n"
"     }\n"
"  }\n"
msgstr ""

#. name, q6, text
#: m02_qcm/task.yaml
#, python-format
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  for(int i=1; i<=n; i=i+1) {\n"
"     int reste=n%i;\n"
"     if(reste) {\n"
"        System.out.println(i);\n"
"     }\n"
"  }\n"
msgstr ""

#. name, q6, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"La variable ``reste`` est de type ``int``. Elle ne peut donc pas être "
"utilisée comme condition dans un ``if``.\n"
msgstr ""

#. name, q6, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  for(int i=1; i<=n; i=i+1) {\n"
"     int reste=n/i;\n"
"     if(reste==0) {\n"
"        System.out.println(i);\n"
"     }\n"
"  }\n"
msgstr ""

#. name, q6, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Ne confondez pas le reste de la division entière (symbole ``%``) avec la "
"division entière elle-même (symbole ``/``)\n"
msgstr ""

#. name, q6, text
#: m02_qcm/task.yaml
#, python-format
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  int reste;\n"
"  for(int i=n; i>1; i=i-1) {\n"
"     reste=n%i;\n"
"     if(reste==0) {\n"
"        System.out.println(i);\n"
"     }\n"
"  }\n"
msgstr ""

#. name, q6, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Un nombre entier est toujours divisible par 1.\n"
msgstr ""

#. name, q6, text
#: m02_qcm/task.yaml
#, python-format
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"\n"
"  System.out.println(1);\n"
"  System.out.println(n);\n"
"  for(int i=1; i<n; i=i+1) {\n"
"     int reste=n%i;\n"
"     if(reste==0) {\n"
"        System.out.println(i);\n"
"     }\n"
"  }\n"
msgstr ""

#. name, q6, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Ce programme affiche deux fois la valeur ``1``.\n"
msgstr ""

#. name, q7, header
#: m02_qcm/task.yaml
msgid ""
"\n"
"Laquelle des boucles ``for`` ci-dessous affiche correctement les carrés des "
"n premiers entiers positifs ?\n"
msgstr ""

#. name, q7, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   for(int i=1;i<=n;i++) {\n"
"      System.out.println(i*i);\n"
"   }\n"
msgstr ""

#. name, q7, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   for(int i=1;i<=n;i=i+1) {\n"
"      int carre=i*i;\n"
"      System.out.println(carre);\n"
"   }\n"
msgstr ""

#. name, q7, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   for(int i=1;i<=n;i++) {\n"
"      System.out.println(n*n);\n"
"   }\n"
msgstr ""

#. name, q7, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Qu'affiche ce programme ? La valeur de ``n`` change-t-elle durant son "
"exécution ?\n"
msgstr ""

#. name, q7, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   for(int i=1;i<n;i=i+1) {\n"
"      int carre=i*i;\n"
"      System.out.println(carre);\n"
"   }\n"
msgstr ""

#. name, q7, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Combien de nombres sont-il affichés si la boucle démarre à ``1`` et se "
"termine à ``n`` ?\n"
msgstr ""

#. name, q7, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   for(int i=1;i<=n;n++) {\n"
"      System.out.println(i*i);\n"
"   }\n"
msgstr ""

#. name, q7, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Qu'affiche ce programme ? La boucle se termine-t-elle ?\n"
msgstr ""

#. name, q7, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   for(int i=1; i<=n*n;i++) {\n"
"      System.out.println(i);\n"
"   }\n"
msgstr ""

#. name, q7, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Combien de nombres sont affichés par ce fragment de programme. S'agit-il "
"bien des carrés des ``n`` premiers entiers ?\n"
msgstr ""

#. name, q8, name
#. name, q9, name
#: m02_qcm/task.yaml
msgid "Boucles for imbriquées"
msgstr ""

#. name, q8, header
#: m02_qcm/task.yaml
msgid ""
"\n"
"Sachant que ``System.out.print(\"X\");`` affiche le caractère ``X`` à "
"l'écran et que ``System.out.println()`` force un retour à la ligne à "
"l'écran, laquelle des boucles ci-dessous affiche-t-elle le carré de 4x4 ci-"
"dessous\n"
"\n"
".. code-block:: java\n"
"\n"
"  XXXX\n"
"  XXXX\n"
"  XXXX\n"
"  XXXX\n"
msgstr ""

#. name, q8, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   for(int i=0;i<16;i++) {\n"
"      System.out.print(\"X\");\n"
"      int d=i%4;\n"
"      if(d==0) {\n"
"         System.out.println();\n"
"      }\n"
"   }\n"
msgstr ""

#. name, q8, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   for(int i=0;i<4;i++) {\n"
"      for(int j=0;j<4;j++) {\n"
"         System.out.print(\"X\");\n"
"      }\n"
"      System.out.println();\n"
"   }\n"
msgstr ""

#. name, q8, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   for(int i=1;i<=4;i++) {\n"
"      for(int j=1;j<=4;j++) {\n"
"         System.out.print(\"X\");\n"
"      }\n"
"      System.out.println();\n"
"   }\n"
msgstr ""

#. name, q8, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   for(int i=0;i<16;i++) {\n"
"      System.out.print(\"X\");\n"
"   }\n"
msgstr ""

#. name, q8, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Ce fragment de programme affiche 16 caractères sur la même ligne, ce n'est "
"pas ce qui est demandé.\n"
msgstr ""

#. name, q8, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   for(int i=0;i<=4;i++) {\n"
"      for(int j=0;j<=4;j++) {\n"
"         System.out.print(\"X\");\n"
"      }\n"
"      System.out.println();\n"
"   }\n"
msgstr ""

#. name, q8, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Ce fragment de programme affiche 5 caractères par ligne et 5 lignes. "
"Vérifiez les bornes de la boucle ``for``.\n"
msgstr ""

#. name, q8, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   for(int i=1;i<4;i++) {\n"
"      for(int j=1;j<4;j++) {\n"
"         System.out.print(\"X\");\n"
"      }\n"
"      System.out.println();\n"
"   }\n"
msgstr ""

#. name, q8, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Ce fragment de programme affiche 3 caractères par ligne et 3 lignes. "
"Vérifiez les bornes de la boucle ``for``.\n"
msgstr ""

#. name, q9, header
#: m02_qcm/task.yaml
msgid ""
"\n"
"Il est souvent nécessaire dans des programmes informatiques de construire "
"des boucles imbriquées, c'est-à-dire des boucles qui contiennent elles-même "
"d'autres boucles. Laquelle des boucles ci-dessous affiche-t-elle à l'écran "
"le texte suivant\n"
"\n"
".. code-block:: java\n"
"\n"
"  X\n"
"  XX\n"
"  XXX\n"
"  XXXX\n"
"  XXXXX\n"
msgstr ""

#. name, q9, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   for(int i=1;i<=5;i++) {\n"
"      for(int j=1;j<=i;j++) {\n"
"         System.out.print(\"X\");\n"
"      }\n"
"      System.out.println();\n"
"   }\n"
msgstr ""

#. name, q9, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   for(int i=0;i<5;i++) {\n"
"      for(int j=0;j<=i;j++) {\n"
"         System.out.print(\"X\");\n"
"      }\n"
"      System.out.println();\n"
"   }\n"
msgstr ""

#. name, q9, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   for(int i=0;i<5;i++) {\n"
"      for(int j=1;j<=(i+1);j++) {\n"
"         System.out.print(\"X\");\n"
"      }\n"
"      System.out.println();\n"
"   }\n"
msgstr ""

#. name, q9, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   for(int i=1;i<=5;i++) {\n"
"      for(int j=1;j<=i;i++) {\n"
"         System.out.print(\"X\");\n"
"      }\n"
"      System.out.println();\n"
"   }\n"
msgstr ""

#. name, q9, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Quelle est la variable incrémentée dans la boucle imbriquée ?\n"
msgstr ""

#. name, q9, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   for(int i=5;i>0;i=i-1) {\n"
"      for(int j=y;j>=i;j=j-1) {\n"
"         System.out.print(\"X\");\n"
"      }\n"
"      System.out.println();\n"
"   }\n"
msgstr ""

#. name, q9, feedback
#: m02_qcm/task.yaml
msgid ""
"\n"
"Ce fragment de programme affiche d'abord ``XXXXX``, ensuite ``XXXX``, ...\n"
msgstr ""

#. name, q9, text
#: m02_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   for(int i=1;i<=5;i++) {\n"
"      for(int j=i;j<=5;j++) {\n"
"         System.out.print(\"X\");\n"
"      }\n"
"      System.out.println();\n"
"   }\n"
msgstr ""

#. context
#: m02dem1/task.yaml
msgid ""
"Voici quelques questions QCM pour vérifier votre compréhension de la Mission "
"2 du cours, après lecture du livre de référence."
msgstr ""

#. name
#: m02dem1/task.yaml
msgid "Mission 2: Question de démarrage 1: Les bases"
msgstr ""

#. name, q1, name
#. name, q2, name
#. name, q3, name
#. name, q4, name
#: m02dem1/task.yaml
msgid "Choix multiple"
msgstr ""

#. name, q1, header
#: m02dem1/task.yaml
msgid "Quelle est la définition la plus appropriée pour une variable ?"
msgstr ""

#. name, q1, text
#. name, q2, text
#: m02dem1/task.yaml
msgid "Une partie de la mémoire réservée pour contenir des données"
msgstr ""

#. name, q1, text
#. name, q2, text
#: m02dem1/task.yaml
msgid "Un morceau d'information qui peut être manipulé par un programme"
msgstr ""

#. name, q1, text
#: m02dem1/task.yaml
msgid ""
"Un ensemble de valeurs contigues dans la mémoire auxquelles on peut accéder "
"en fonction de leur position dans la mémoire"
msgstr ""

#. name, q1, text
#. name, q2, text
#: m02dem1/task.yaml
msgid ""
"Une entité abstraite qui possède un ensemble d'attributs et d'opérations qui "
"lui sont propres."
msgstr ""

#. name, q1, text
#: m02dem1/task.yaml
msgid ""
"Une liste d'entités qui disposent chacune de la référence vers l'entité "
"suivante de la liste"
msgstr ""

#. name, q1, text
#: m02dem1/task.yaml
msgid ""
"Une chaine de caractères, dans le code du programme, qui se situe devant le "
"caractère \"=\""
msgstr ""

#. name, q2, header
#: m02dem1/task.yaml
msgid "Quelle est la définition la plus appropriée pour une valeur ?"
msgstr ""

#. name, q2, text
#: m02dem1/task.yaml
msgid "Une suite d'instructions exécutables ou non par un programme"
msgstr ""

#. name, q2, text
#: m02dem1/task.yaml
msgid "Un entier ou un caractère"
msgstr ""

#. name, q3, header
#: m02dem1/task.yaml
msgid ""
"Selon vous, quelle portion de code correspond le mieux à une boucle en Java ?"
msgstr ""

#. name, q3, text
#: m02dem1/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    int a = 1;\n"
"    int b = 2;\n"
"    int c = 3;\n"
"    a = c;\n"
"    b = a;\n"
"    c = b;\n"
"    a = c;\n"
"    // ...\n"
msgstr ""

#. name, q3, text
#: m02dem1/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    int a = 1;\n"
"    while(a < 10){\n"
"        // do something\n"
"        a++;\n"
"    }"
msgstr ""

#. name, q3, text
#: m02dem1/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    int a = 1;\n"
"    while(a < 10) do {\n"
"        // do something\n"
"        a++;\n"
"    }"
msgstr ""

#. name, q3, feedback
#: m02dem1/task.yaml
msgid "\"while ... do\" n'existe pas en Java. "
msgstr ""

#. name, q3, text
#: m02dem1/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    for(int i = 0 ; i < 37 ; i++){\n"
"        // do something iterative\n"
"    }"
msgstr ""

#. name, q3, text
#: m02dem1/task.yaml
msgid ""
".. code-block:: bash\n"
"\n"
"    for i in 1..15\n"
"    do\n"
"        # do something in bash\n"
"    done\n"
msgstr ""

#. name, q3, feedback
#: m02dem1/task.yaml
msgid "Cette boucle n'est pas écrite en Java"
msgstr ""

#. name, q3, text
#: m02dem1/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    int a = 1;\n"
"    if(a < 10){\n"
"        // do something conditionnaly\n"
"    }\n"
"    else{\n"
"        // do something otherwise\n"
"    }"
msgstr ""

#. name, q3, feedback
#: m02dem1/task.yaml
msgid "Ce n'est pas une boucle mais un branchement ``if``"
msgstr ""

#. name, q4, header
#: m02dem1/task.yaml
msgid ""
"Lequel de ces bouts de programmes ne va causer aucune erreur de compilation ?"
msgstr ""

#. name, q4, text
#: m02dem1/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    int pi = 3.1415;\n"
"    int rayon = 3;\n"
"    int perimetre = 2*pi*r;\n"
"    // ..."
msgstr ""

#. name, q4, feedback
#: m02dem1/task.yaml
msgid "La variable pi est de type ``int`` et ne peut contenir que des entiers."
msgstr ""

#. name, q4, text
#: m02dem1/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    for(int i = 0 ; i < 10 ; i++){\n"
"        // affiche i à l'écran\n"
"        println(i);\n"
"    }"
msgstr ""

#. name, q4, feedback
#: m02dem1/task.yaml
msgid "Il faut utiliser ``System.out.println()`` et non ``println()``"
msgstr ""

#. name, q4, text
#: m02dem1/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    for(int i = 0 , i < 10 , i++){\n"
"        System.out.println(i);\n"
"    }"
msgstr ""

#. name, q4, feedback
#: m02dem1/task.yaml
msgid ""
"Dans les parenthèses du ``for``, il faut mettre des \";\" et non des \",\"."
msgstr ""

#. name, q4, text
#: m02dem1/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    int i = 1\n"
"    while(i < 10){\n"
"        System.out.println(i)\n"
"        i++\n"
"    }"
msgstr ""

#. name, q4, text
#: m02dem1/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    int a = 1;\n"
"    int b = 2;\n"
"    if (a - b < 0){\n"
"        System.out.println(-(a-b));\n"
"    }\n"
"    else{\n"
"        System.out.println(a-b);\n"
"    }"
msgstr ""

#. name, q4, text
#: m02dem1/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    for(int i = 1 ; i <= 10 ; i++){\n"
"        System.out.print(i);\n"
"    }"
msgstr ""

#. name, q4, feedback
#: m02dem1/task.yaml
msgid ""
"Correct. System.out.print permet d'afficher sans mettre un retour à la ligne "
"à la fin."
msgstr ""

#. name, q4, text
#: m02dem1/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    int a;\n"
"    int b = 2;\n"
"    if (a - b < 0){\n"
"        System.out.println(-(a-b));\n"
"    }\n"
"    else{\n"
"        System.out.println(a-b);\n"
"    }"
msgstr ""

#. name, q4, feedback
#: m02dem1/task.yaml
msgid "Ne compile pas car ``a`` n'est pas initialisée."
msgstr ""

#. author
#: m02dem2/task.yaml
msgid "François MICHEL, Clémentine MUNYABARENZI, Brandon NAITALI"
msgstr ""

#. context
#: m02dem2/task.yaml
msgid ""
"Les boucles, notamment les boucles ``for``, sont un concept clé en "
"programmation. Pour vous entraîner à l'utilisation de boucles ``for``, "
"écrivez une boucle for qui permettra de calculer la somme des n premiers "
"entier PAIRS supérieurs à zéro, en fonction de la variable n, déjà définie à "
"une valeur supérieure ou égale à zéro. Le résultat final doit être stocké "
"dans la variable ``sum`` à la fin de la boucle, elle aussi déjà définie. "
"Lorsque n est négatif, le résultat doit valoir zéro.\n"
"\n"
".. code-block:: java\n"
"\n"
"    int n = // n peut prendre n'importe quelle valeur\n"
"    int sum = 0;"
msgstr ""

#. name
#: m02dem2/task.yaml
msgid "Mission 2 : Question de démarrage 2 : Somme d'entiers"
msgstr ""

#. name, q1, name
#: m02dem2/task.yaml
msgid "Somme des n premiers entiers pairs"
msgstr ""

#. name, q1, header
#: m02dem2/task.yaml
msgid ""
"Écrivez ici le bout de programme permettant de calculer la somme des ``n`` "
"premiers entiers pairs"
msgstr ""

#. author
#: m02dem3/task.yaml m02dem4/task.yaml m02dem5/task.yaml m04dem1/task.yaml
#: m04dem2/task.yaml m04dem3/task.yaml m04dem4/task.yaml m10dem1/task.yaml
#: m10dem2/task.yaml
msgid "François MICHEL, Brandon NAITALI"
msgstr ""

#. context
#: m02dem3/task.yaml
msgid ""
"Les langages de programmation sont souvent utilisés à des fins mathématiques "
"et il est intéressant de savoir implémenter certaines fonctions "
"mathématiques simples.\n"
"\n"
"Dans cet exercice, il vous est demandé d'implémenter à l'aide d'une boucle "
"une portion de programme qui permet de calculer un entier ``a`` élevé à la "
"puissance ``n``.\n"
"\n"
"Notez que ``n`` est plus grand ou égal à zéro et vous ne devez donc pas "
"gérer le cas où ``n`` est négatif. Le résultat final doit être stocké dans "
"la variable ``valeur``, qui est déjà initialisée à 1 pour vous.\n"
"\n"
".. code-block:: java\n"
"\n"
"    int n = // n est non-négatif\n"
"    int a = // a peut prendre n'importe quelle valeur\n"
"    int valeur = 1;\n"
"\n"
msgstr ""

#. name
#: m02dem3/task.yaml
msgid "Mission 2 : Question de démarrage 3 : Puissances"
msgstr ""

#. name, q1, name
#: m02dem3/task.yaml
msgid "Puissance d'un entier"
msgstr ""

#. name, q1, header
#: m02dem3/task.yaml
msgid ""
"Écrivez ici le bout de programme permettant de calculer l'entier ``a`` élevé "
"à la puissance ``n``."
msgstr ""

#. context
#: m02dem4/task.yaml
msgid ""
"En programmation, il est souvent intéressant de connaitre le reste de la "
"divison euclidienne de deux nombres, notamment pour savoir si un nombre est "
"pair ou non. En java, pour connaître le reste d'une division, on utilise "
"l'instruction \"modulo\" (se note \"``%``\"), ainsi ``5 % 3`` vaut ``2``. En "
"sachant cela, utilisez une boucle ``for`` pour déterminer le plus grand "
"diviseur entier de n (hormis lui-même).\n"
"\n"
"Pensez aux cas \"border lines\" : quand ``n`` vaut ``0`` ou ``1``, on attend "
"une réponse égale à ``0``. La réponse finale doit-être stockée dans la "
"variable ``biggest``.\n"
"\n"
".. code-block:: java\n"
"\n"
"    int n = // n est plus grand ou égal à 0\n"
"    int biggest = 0;\n"
msgstr ""

#. name
#: m02dem4/task.yaml
msgid "Mission 2 : Question de démarrage 4 : Plus grand diviseur"
msgstr ""

#. name, q1, name
#: m02dem4/task.yaml
msgid "Plus grand diviseur"
msgstr ""

#. name, q1, header
#: m02dem4/task.yaml
msgid ""
"Écrivez ici le bout de programme permettant de calculer le plus grand "
"diviseur entier de ``n`` "
msgstr ""

#. context
#: m02dem5/task.yaml
msgid ""
"Les nombres premiers sont un concept important en mathématiques. Un nombre "
"premier est un nombre entier qui n'a pour diviseurs que 1 et lui-même. Notez "
"que 0 et 1 ne sont pas des nombres premiers. En utilisant une boucle for, "
"écrivez un petit bout de code permettant de vérifier si le nombre n est "
"premier ou non. Vous devez stocker votre réponse dans la variable booléenne "
"``prime`` une fois la boucle terminée, déjà initialisée à ``true`` pour "
"vous. Une fois votre programme terminé, prime vaudra ``true`` si n est "
"premier, et ``false`` si n n'est pas premier.\n"
"\n"
".. code-block:: java\n"
"\n"
"    int n = // n est plus grand ou égal à zéro\n"
"    boolean prime = true;\n"
msgstr ""

#. name
#: m02dem5/task.yaml
msgid "Mission 2 : Question de démarrage 5 : Nombres premiers"
msgstr ""

#. name, q1, name
#: m02dem5/task.yaml
msgid "Nombres premiers"
msgstr ""

#. name, q1, header
#: m02dem5/task.yaml
msgid "Écrivez ici le bout de programme :"
msgstr ""

#. author
#: m02ec1/task.yaml
msgid "Clémentine Munyabarenzi"
msgstr ""

#. context
#: m02ec1/task.yaml
msgid ""
"Pouvez-vous prédire la sortie du code suivant en moins de 5 secondes?\n"
"\n"
".. code-block:: java\n"
"\n"
"    for( int i = 0 ; i < 5; i++)\n"
"    {\n"
"        System.out.println(\"∗∗∗∗∗\") ;\n"
"    }"
msgstr ""

#. name
#: m02ec1/task.yaml
msgid "Mission 2 : Exercice complémentaire 1 : Exercice rapide"
msgstr ""

#. name, Question1, name
#: m02ec1/task.yaml
msgid "choix multiple"
msgstr ""

#. name, Question1, text
#: m02ec1/task.yaml
msgid ""
"∗∗∗∗∗\n"
"\n"
"∗∗∗∗∗\n"
"\n"
"∗∗∗∗∗\n"
"\n"
"∗∗∗∗∗"
msgstr ""

#. name, Question1, text
#: m02ec1/task.yaml
msgid ""
"∗∗∗∗∗\n"
"\n"
"∗∗∗∗∗\n"
"\n"
"∗∗∗∗∗\n"
"\n"
"∗∗∗∗∗\n"
"\n"
"∗∗∗∗∗"
msgstr ""

#. name, Question1, text
#: m02ec1/task.yaml
msgid "∗∗∗∗∗"
msgstr ""

#. context
#: m02real/task.yaml
msgid ""
"Vous pouvez soumettre ici ou via BlueJ votre phase de réalisation pour la "
"Mission 2.\n"
"\n"
"Vous attendons une archive **.zip** contenant uniquement les fichiers :\n"
"\n"
"- Equation.java\n"
"- EquationSimple.java\n"
"- TextIO.java\n"
"- README.txt"
msgstr ""

#. name
#: m02real/task.yaml
msgid "Mission 2: Phase de réalisation: Soumission"
msgstr ""

#. name, q1, name
#: m02real/task.yaml
msgid "Phase de réalisation de la Mission 2"
msgstr ""

#. author
#: m03Q1/task.yaml m04Q1/task.yaml m04Q2/task.yaml m04Q3/task.yaml
#: m04Q4/task.yaml m04Q5/task.yaml m04Q6/task.yaml m04Q8/task.yaml
#: m04Q9/task.yaml m06Q1/task.yaml m06Q10/task.yaml m06Q11/task.yaml
#: m06Q2/task.yaml m06Q3/task.yaml m06Q4/task.yaml m06Q5/task.yaml
#: m06Q6/task.yaml m06Q7/task.yaml m06Q8/task.yaml m06Q9/task.yaml
#: m07Q1/task.yaml m07Q10/task.yaml m07Q11/task.yaml m07Q2/task.yaml
#: m07Q3/task.yaml m07Q4/task.yaml m07Q5/task.yaml m07Q6/task.yaml
#: m07Q7/task.yaml m07Q8/task.yaml m07Q9/task.yaml m08Q1/task.yaml
#: m08Q2/task.yaml m08Q3/task.yaml m08Q4/task.yaml m08Q5/task.yaml
#: m08Q6/task.yaml m08Q7/task.yaml m09Q1/task.yaml m09Q2/task.yaml
#: m09Q3/task.yaml m09Q4/task.yaml m09Q5/task.yaml m09Q6/task.yaml
#: m09Q7/task.yaml m10Q1/task.yaml m10Q3/task.yaml m10Q5/task.yaml
#: m10Q6/task.yaml m11Q5/task.yaml
msgid "Ludovic TAFFIN"
msgstr ""

#. context
#: m03Q1/task.yaml
msgid ""
"On vous demande d'écrire une méthode permettant de dire si un nombre se "
"trouve dans l'intervalle fermé :math:`[a,b]` dont les spécifications sont "
"les suivantes:\n"
"\n"
"\n"
"\n"
".. code-block:: java\n"
"\n"
"   /*\n"
"    * @pre a < b\n"
"    * @post retourne true si x est dans [a,b] false sinon\n"
"    */\n"
"\n"
"\n"
"Votre méthode devra s'appeler ``intervalle`` et prendra comme premier "
"argument ``a``, la borne inférieure de l'intervalle, comme deuxième "
"argument, ``b``, la borne supérieure et comme dernier argument la valeur à "
"tester. Ces trois arguments sont des entiers.\n"
"\n"
"\n"
msgstr ""

#. name
#: m03Q1/task.yaml
msgid "Mission 3 :  Q* intervalle fermé"
msgstr ""

#. name, q1, name
#: m03Q1/task.yaml
msgid "Méthode intervalle"
msgstr ""

#. name, q1, header
#: m03Q1/task.yaml
msgid "Écrivez ici la signature et le corps de la méthode intervalle."
msgstr ""

#. context
#: m03Q2/task.yaml
msgid ""
"On vous demande d'écrire la méthode ``surface`` qui permet de calculer la "
"surface d'un rectangle. On supposera que la ``longueur`` et la ``largeur`` "
"qui sont passées en arguments sont des entiers positifs.\n"
"\n"
"\n"
".. code-block:: java\n"
"\n"
"   /*\n"
"    * @pre largeur > 0, longueur > 0\n"
"    * @post retourne la surface du rectangle dont les\n"
"    *       largeur et longueur sont données.\n"
"    */\n"
msgstr ""

#. name
#: m03Q2/task.yaml
msgid "Mission 3 : Q* Calculer la surface d'un rectangle"
msgstr ""

#. name, q1, name
#: m03Q2/task.yaml
msgid "Surface"
msgstr ""

#. context
#: m03Q3/task.yaml
msgid ""
"Ecrivez la signature et le corps de la méthode ``max`` qui prend comme  "
"paramètres les entiers ``a``, ``b`` , ``c`` qui retourne le maximum de 3 "
"nombres et dont la spécification est:\n"
"\n"
".. code-block:: java\n"
"\n"
"   /*\n"
"    * @pre\n"
"    * @post retourne le maximum entre les entiers a, b et c\n"
"    */\n"
"\n"
"Vous pouvez réutiliser votre code de la question supplémentaire maximum de "
"la mission 1."
msgstr ""

#. name
#: m03Q3/task.yaml
msgid "Mission 3 :  Q*  Maximum"
msgstr ""

#. name, q1, name
#: m03Q3/task.yaml
msgid "Ecrivez la signature et le corps de la méthode max."
msgstr ""

#. author
#: m03Q4/task.yaml m05Q10/task.yaml m05Q11/task.yaml m05Q2/task.yaml
#: m05Q3/task.yaml m05Q5/task.yaml m05Q6/task.yaml m05Q7/task.yaml
#: m05Q8/task.yaml m11Q1/task.yaml m11Q2/task.yaml m11Q3/task.yaml
#: m11Q4/task.yaml m11Q6/task.yaml
msgid "Ludovic TAFFIN, Olivier Martin"
msgstr ""

#. context
#: m03Q4/task.yaml
msgid ""
"Ecrivez la méthode ``mediane`` qui prend comme arguments trois entiers et "
"retourne la `médiane <https://fr.wikipedia.org/wiki/"
"Médiane_(statistiques)>`_ entre ces nombres.\n"
"\n"
"Pour vous aider on vous donne les méthodes ``public static int min(int x, "
"int y)`` et ``public static int max(int x, int y)`` que vous pouvez utiliser "
"dans votre code. Leurs spécifications sont :\n"
"\n"
"\n"
".. code-block:: java\n"
"\n"
"   /*\n"
"    * @pre -\n"
"    * @post retourne le minimum entre a et b\n"
"    */\n"
"   public static int min(int a, int b);\n"
"\n"
"   /*\n"
"    * @pre -\n"
"    * @post retourne le maximum entre a et b\n"
"    */\n"
"   public static int max(int a, int b);\n"
"\n"
"\n"
"\n"
msgstr ""

#. name
#: m03Q4/task.yaml
msgid "Mission 3 : Q** Médiane"
msgstr ""

#. name, q1, header
#: m03Q4/task.yaml
msgid "Écrivez ici la méthode permettant de calculer la médiane"
msgstr ""

#. context
#: m03Q5/task.yaml
msgid ""
"Ecrivez la méthode ``volume`` qui calcule le volume d'une `sphère <https://"
"fr.wikipedia.org/wiki/Sphère>`_.\n"
"Elle prend en paramètre le rayon de la sphère (nombre réel).\n"
"\n"
"Pour rappel, le volume d'une sphère de rayon r est :math:`\\frac{4\\times\\pi"
"\\times{r^{3}}}{3}`\n"
"\n"
"En Java, la constante :math:`\\pi` est définie dans la classe `Math <https://"
"docs.oracle.com/javase/7/docs/api/java/lang/Math.html>`_ comme la constante "
"``Math.PI``\n"
"\n"
msgstr ""

#. name
#: m03Q5/task.yaml
msgid "Mission 3 : Q*  Calcul du volume d'une sphère"
msgstr ""

#. name, q1, name
#: m03Q5/task.yaml
msgid "Ecrivez la signature et le corps de votre méthode."
msgstr ""

#. context
#: m03Q6/task.yaml
msgid ""
"La `factorielle <https://fr.wikipedia.org/wiki/Factorielle>`_ d'un entier "
"``n`` est le produit des nombres entiers strictement positifs inférieurs ou "
"égaux à ``n``.\n"
"\n"
"Ecrivez la signature et le corps de la méthode ``fact`` dont les "
"spécifications sont :\n"
"\n"
".. code-block:: java\n"
"\n"
"   /*\n"
"    * @pre n > 0\n"
"    * @post retourne la valeur de la factorielle de n\n"
"    */"
msgstr ""

#. name
#: m03Q6/task.yaml
msgid "Mission 3 : Q** Calcul de la factorielle"
msgstr ""

#. name, q1, name
#: m03Q6/task.yaml
msgid "Signature et corps de la méthode fact"
msgstr ""

#. context
#: m03Q7/task.yaml
msgid ""
"En mathématiques, un nombre entier est un `carré parfait <https://fr."
"wikipedia.org/wiki/Carré_parfait>`_ si il est le carré d'un autre nombre "
"entier.\n"
"\n"
"Ecrivez la méthode ``carparf`` dont les spécifications sont (``x`` est un "
"entier) :\n"
"\n"
".. code-block :: java\n"
"\n"
"   /*\n"
"    * @pre -\n"
"    * @post retourne true si l'entier x est\n"
"    * un carré parfait, false sinon\n"
"    */"
msgstr ""

#. name
#: m03Q7/task.yaml
msgid "Mission 3 : Q** Carré parfait"
msgstr ""

#. name, q1, header
#: m03Q7/task.yaml
msgid "Ecrivez ici la méthode carparf"
msgstr ""

#. author
#: m03_bf/task.yaml m05_bf/task.yaml m05dem1/task.yaml
msgid "Olivier Martin"
msgstr ""

#. context
#: m03_bf/task.yaml
msgid ""
"Un étudiant a écrit le programme Java suivant qui permet de compter le "
"nombre de chiffres de la représentation décimale d'un nombre naturel donné.\n"
"\n"
".. code-block :: java\n"
"\n"
"    public static void main(String[] args) {\n"
"        String strPair = \" a un nombre pair de chiffres dans sa "
"représentation décimale\";\n"
"        String strImpair = \" a un nombre impair de chiffres dans sa "
"représentation décimale\";\n"
"        int n = 0;\n"
"        while (n != -1) {\n"
"            System.out.print(\"Entrez un nombre (-1 pour arrêter) :\");\n"
"            n = TextIO.getlnInt();\n"
"            if (n != -1) {\n"
"                System.out.print(n);\n"
"                if (chiffresPairs(n)) {\n"
"                    System.out.println(strPair);\n"
"                } else {\n"
"                    System.out.println(strImpair);\n"
"                }\n"
"            }\n"
"        }\n"
"    }\n"
"\n"
"Vous devez définir la méthode ``chiffresPairs`` qui renvoie ``true`` si le "
"nombre de chiffres de son paramètre est pair et ``false`` sinon. N'hésitez "
"pas à décomposer le problème en sous-problèmes et de définir des méthodes "
"privées complémentaires.\n"
"\n"
"Voici un exemple :\n"
"\n"
"- ``chiffresPairs(5555)`` doit retourner ``true``\n"
"- ``chiffresPairs(555)`` doit retourner ``false``\n"
"- ``chiffresPairs(-555)`` doit retourner ``false``\n"
msgstr ""

#. name
#: m03_bf/task.yaml
msgid "Mission 3 : Question de Bilan Final"
msgstr ""

#. name, q1, header
#: m03_bf/task.yaml
msgid ""
"Complétez ici le corps de la méthode ``chiffresPairs``.\n"
"\n"
".. code-block :: java\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post Renvoie true si le nombre de chiffres n est pair et false "
"sinon\n"
"     */\n"
"    public static boolean chiffresPairs(int n)"
msgstr ""

#. name, q2, header
#: m03_bf/task.yaml
msgid ""
"Déclarez ici les méthodes que vous souhaitez utiliser pour décomposer le "
"problème en sous-problèmes. Attention, veillez à n'utiliser que des méthodes "
"de classe ``static``.\n"
msgstr ""

#. context
#: m03_qcm/task.yaml
msgid ""
"====================================\n"
"Mission 3. Méthodes et sous-routines\n"
"====================================\n"
"\n"
"Ces questions supposent que vous avez lu les sections suivantes du livre de "
"référence |jn|_\n"
"\n"
" - |jn4|_\n"
"\n"
"    - |jn4.1|_\n"
"    - |jn4.2|_\n"
"\n"
"    - |jn4.2.1|_\n"
"    - |jn4.2.2|_\n"
"    - |jn4.2.3|_\n"
"    - |jn4.2.4|_\n"
"\n"
"    - |jn4.3|_\n"
"\n"
"        - |jn4.3.1|_\n"
"        - |jn4.3.2|_\n"
"        - |jn4.3.3|_\n"
"        - |jn4.3.4|_\n"
"        - |jn4.3.6|_\n"
"\n"
"    - |jn4.4|_\n"
"\n"
"        - |jn4.4.1|_\n"
"        - |jn4.4.2|_\n"
"        - |jn4.4.3|_\n"
"\n"
"    - |jn4.6|_\n"
"\n"
"    - |jn4.6.1|_\n"
"\n"
"\n"
"\n"
".. _jn: http://math.hws.edu/javanotes/\n"
".. |jn| replace:: JavaNotes\n"
"\n"
".. _jn4 : http://math.hws.edu/javanotes/c4/index.html\n"
".. |jn4| replace:: `4 : Programming in the Large I: Subroutines`\n"
"\n"
".. _jn4.1 : http://math.hws.edu/javanotes/c4/s1.html\n"
".. |jn4.1| replace:: `4.1 : Black Boxes`\n"
"\n"
".. _jn4.2 : http://math.hws.edu/javanotes/c4/s2.html\n"
".. |jn4.2| replace:: `4.2 : Static Subroutines and Static Variables`\n"
"\n"
".. _jn4.2.1 : http://math.hws.edu/javanotes/c4/s2.html#subroutines.2.1\n"
".. |jn4.2.1| replace:: `4.2.1: Subroutine Definitions`\n"
"\n"
".. _jn4.2.2 : http://math.hws.edu/javanotes/c4/s2.html#subroutines.2.2\n"
".. |jn4.2.2| replace:: `4.2.2 : Calling Subroutines`\n"
"\n"
".. _jn4.2.3 : http://math.hws.edu/javanotes/c4/s2.html#subroutines.2.3\n"
".. |jn4.2.3| replace:: `4.2.3 : Subroutines in Programs`\n"
"\n"
".. _jn4.2.4 : http://math.hws.edu/javanotes/c4/s2.html#subroutines.2.4\n"
".. |jn4.2.4| replace:: `4.2.4 : Member Variables`\n"
"\n"
".. _jn4.3 : http://math.hws.edu/javanotes/c4/s3.html\n"
".. |jn4.3| replace:: `4.3 : Parameters`\n"
"\n"
".. _jn4.3.1 : http://math.hws.edu/javanotes/c4/s3.html#subroutines.3.1\n"
".. |jn4.3.1| replace:: `4.3.1 : Using Parameters`\n"
"\n"
".. _jn4.3.2 : http://math.hws.edu/javanotes/c4/s3.html#subroutines.3.2\n"
".. |jn4.3.2| replace:: `4.3.2 : Formal and Actual Parameters`\n"
"\n"
".. _jn4.3.3 : http://math.hws.edu/javanotes/c4/s3.html#subroutines.3.3\n"
".. |jn4.3.3| replace:: `4.3.3 : Overloading`\n"
"\n"
".. _jn4.3.4 : http://math.hws.edu/javanotes/c4/s3.html#subroutines.3.4\n"
".. |jn4.3.4| replace:: `4.3.4 : Subroutine Examples`\n"
"\n"
".. _jn4.3.6 : http://math.hws.edu/javanotes/c4/s3.html#subroutines.3.6\n"
".. |jn4.3.6| replace:: `4.3.6 : Global and Local Variables`\n"
"\n"
".. _jn4.4 : http://math.hws.edu/javanotes/c4/s4.html\n"
".. |jn4.4| replace:: `4.4 : Return Values`\n"
"\n"
".. _jn4.4.1 : http://math.hws.edu/javanotes/c4/s4.html#subroutines.4.1\n"
".. |jn4.4.1| replace:: `4.4.1 : The return statement`\n"
"\n"
".. _jn4.4.2 : http://math.hws.edu/javanotes/c4/s4.html#subroutines.4.2\n"
".. |jn4.4.2| replace:: `4.4.2 : Function Examples`\n"
"\n"
".. _jn4.4.3 : http://math.hws.edu/javanotes/c4/s4.html#subroutines.4.3\n"
".. |jn4.4.3| replace:: `4.4.3 : 3N+1 Revisited`\n"
"\n"
".. _jn4.6 : http://math.hws.edu/javanotes/c4/s6.html\n"
".. |jn4.6| replace:: `4.6 : More on Program Design`\n"
"\n"
".. _jn4.6.1 : http://math.hws.edu/javanotes/c4/s6.html#subroutines.6.1\n"
".. |jn4.6.1| replace:: `4.6.1 : Preconditions and Postconditions`\n"
msgstr ""

#. name
#: m03_qcm/task.yaml
msgid "Mission 3: QCM"
msgstr ""

#. name, q1, name
#: m03_qcm/task.yaml
msgid "Appel de méthodes de la classe Math"
msgstr ""

#. name, q1, header
#: m03_qcm/task.yaml
msgid ""
"\n"
"La classe ``Math``, décrite dans la section |jn2.3.1|_ du livre contient "
"différentes méthodes de calcul. Celles-ci sont définies plus en détails dans "
"http://docs.oracle.com/javase/6/docs/api/java/lang/Math.html. Parmi les "
"fragments de programme ci-dessous, quels sont ceux qui sont corrects :\n"
"\n"
"\n"
".. _jn2.3.1: http://math.hws.edu/javanotes/c2/s3.html#basics.3.1\n"
".. |jn2.3.1| replace:: `2.3.1 : Built-in Subroutines and Functions`\n"
msgstr ""

#. name, q1, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   int i=1;\n"
"   int j=-1;\n"
"   double d=2.0;\n"
"   double e=3.0;\n"
"   int k=Math.abs(j);\n"
"   double f=Math.exp(d);\n"
"   double r=Math.rint(e);\n"
"   double w=Math.random();\n"
msgstr ""

#. name, q1, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   int i=1;\n"
"   int j=-1;\n"
"   double d=2.0;\n"
"   double e=3.0;\n"
"   int k=Math.abs(d);\n"
"   double f=Math.exp(e);\n"
"   double r=Math.rint(d);\n"
"   double x=Math.random();\n"
msgstr ""

#. name, q1, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   int i=1;\n"
"   int j=-1;\n"
"   double d=2.0;\n"
"   double e=3.0;\n"
"   int k=Math.abs(j);\n"
"   double f=Math.exp(e);\n"
"   int r=Math.rint(d);\n"
"   double w=Math.random();\n"
msgstr ""

#. name, q1, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"La méthode ``Math.rint`` prend comme argument un réel et retourne un réel "
"(même si celui-ci a une valeur entière). Ceci vous est indiqué par le type "
"retourné par la méthode ``Math.rint`` dans la documentation.\n"
msgstr ""

#. name, q1, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   int i=1;\n"
"   int j=-1;\n"
"   double d=2.0;\n"
"   double e=3.0;\n"
"   int k=Math.abs(j);\n"
"   double f=Math.exp(i);\n"
"   double r=Math.rint(e);\n"
"   double w=Math.random();\n"
msgstr ""

#. name, q1, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"La méthode ``Math.exp`` prend comme argument un réel.\n"
msgstr ""

#. name, q1, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   int i=1;\n"
"   int j=-1;\n"
"   double d=2.0;\n"
"   double e=3.0;\n"
"   int k=Math.abs(j);\n"
"   double f=Math.exp(d);\n"
"   double r=Math.rint(e);\n"
"   int w=Math.random();\n"
msgstr ""

#. name, q1, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"La méthode ``Math.random`` retourne toujours une valeur de type ``double``.\n"
msgstr ""

#. name, q1, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   int i=1;\n"
"   int j=-1;\n"
"   double d=2.0;\n"
"   double e=3.0;\n"
"   int k=Math.abs(i);\n"
"   double h=Math.exp(e);\n"
"   double r=Math.rint(d);\n"
"   Math.random();\n"
msgstr ""

#. name, q1, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"La méthode ``Math.random`` retourne toujours une valeur de type ``double``. "
"Elle ne peut donc jamais être utilisée comme une méthode ``void``.\n"
msgstr ""

#. name, q10, name
#: m03_qcm/task.yaml
msgid "Les nombres amicaux"
msgstr ""

#. name, q10, header
#: m03_qcm/task.yaml
msgid ""
"\n"
"\n"
"Deux nombres entiers positifs sont dits `amicaux <http://fr.wikipedia.org/"
"wiki/Nombre_amical>`_ si la somme des diviseurs entiers de l'un est égal à "
"la somme des diviseurs entiers de l'autre. Pour vérifier si deux nombres "
"sont amicaux, le plus simple est d'utiliser une méthode qui calcule la somme "
"des diviseurs entiers d'un nombre et d'ensuite comparer les deux sommes. "
"Supposons que cette méthode existe et est définie comme suit :\n"
"\n"
"\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     * @pre : n>0\n"
"     * @post : retourne la somme des diviseurs entiers de n\n"
"     */\n"
"    public static int sdiv(int n) {\n"
"      // code non fourni\n"
"    }\n"
"\n"
"Laquelle des méthodes ci-dessous retourne-t-elle ``true`` lorsque les deux "
"nombres passés en argument sont amicaux et ``false``  sinon ?\n"
msgstr ""

#. name, q10, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static boolean amical(int a, int b) {\n"
"      int sdiv1=sdiv(a);\n"
"      int sdiv2=sdiv(b);\n"
"      return (sdiv1==sdiv2);\n"
"   }\n"
msgstr ""

#. name, q10, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static boolean amical(int a, int b) {\n"
"      return (sdiv(a)==sdiv(b));\n"
"   }\n"
msgstr ""

#. name, q10, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static int amical(int a, int b) {\n"
"      int sdiv1=sdiv(a);\n"
"      int sdiv2=sdiv(b);\n"
"      return (sdiv1==sdiv2);\n"
"   }\n"
msgstr ""

#. name, q10, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Cette méthode est définie comme retournant un entier alors qu'elle retourne "
"en fait un booléen. Elle ne se compile pas.\n"
msgstr ""

#. name, q10, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static boolean amical(int a, int b) {\n"
"      int sdiv1=sdiv(a);\n"
"      int sdiv2=sdiv(b);\n"
"   }\n"
msgstr ""

#. name, q10, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Cette méthode est définie comme retournant un booléen alors qu'elle retourne "
"rien. Elle ne se compile pas.\n"
msgstr ""

#. name, q10, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static boolean amical(int c, int d) {\n"
"      sdiv1=sdiv(d);\n"
"      sdiv2=sdiv(c);\n"
"      return (sdiv1==sdiv2);\n"
"   }\n"
msgstr ""

#. name, q10, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Cette méthode ne se compile pas. Les variables ``sdiv1`` et ``sdiv2`` "
"doivent être déclarées avant de pouvoir être utilisées.\n"
msgstr ""

#. name, q2, name
#. name, q1, name
#: m03_qcm/task.yaml rev_qcm/task.yaml
msgid "Utilisation de méthodes"
msgstr ""

#. name, q2, header
#: m03_qcm/task.yaml
msgid ""
"\n"
"Un étudiant écrit dans un programme Java le code suivant :\n"
"\n"
"\n"
"\n"
".. code-block:: java\n"
"\n"
"    double d=123.45;\n"
"    int i=12;\n"
"    if( f(d,i) ) { ... }\n"
"\n"
"Quelle doit être la déclaration de la méthode ``f`` pour que ce fragment de "
"programme soit valide ?\n"
msgstr ""

#. name, q2, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static boolean f( double d, int i) {\n"
"    // code non fourni\n"
"   }\n"
msgstr ""

#. name, q2, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static boolean f( double a, int b) {\n"
"    // code non fourni\n"
"   }\n"
msgstr ""

#. name, q2, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static int f( int a, int b) {\n"
"    // code non fourni\n"
"   }\n"
msgstr ""

#. name, q2, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Pour pouvoir être utilisée dans une condition, la méthode ``f`` doit "
"retourner une valeur de type ``boolean``. La déclaration ci-dessus retourne "
"une valeur de type ``int``. En outre, le premier argument de la méthode "
"``f`` est un ``int`` alors que l'étudiant passe un ``double``.\n"
msgstr ""

#. name, q2, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static double f( double x, double y) {\n"
"    // code non fourni\n"
"   }\n"
msgstr ""

#. name, q2, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Pour pouvoir être utilisée dans une condition, la méthode ``f`` doit "
"retourner une valeur de type ``boolean``. La déclaration ci-dessus retourne "
"une valeur de type ``double``. En outre, le second argument de la méthode "
"``f`` est un ``double`` alors que l'étudiant passe un ``int``.\n"
msgstr ""

#. name, q3, name
#: m03_qcm/task.yaml
msgid "Méthodes permettant d'afficher"
msgstr ""

#. name, q3, header
#: m03_qcm/task.yaml
msgid ""
"\n"
"Un étudiant souhaite une méthode ``affiche`` permettant d'afficher ``n`` "
"fois le caractère ``X`` à l'écran. La spécification de cette méthode est\n"
"\n"
".. code-block:: java\n"
"\n"
" /*\n"
"  * @pre n>0\n"
"  * @post affiche n fois le caractère 'X' sur une ligne\n"
"  */\n"
"\n"
"\n"
"Il souhaite pouvoir utiliser cette méthode de la façon suivante :\n"
"\n"
"\n"
"\n"
".. code-block:: java\n"
"\n"
"    int n=17;\n"
"    affiche(n);\n"
"\n"
"Lors de son exécution, cette méthode affiche à l'écran\n"
"\n"
".. code-block:: java\n"
"\n"
"    XXXXXXXXXXXXXXXXX\n"
"\n"
"Parmi les méthodes définies ci-dessous, laquelle est une implémentation "
"(signature et corps) correct de cette méthode ``affiche`` ?\n"
msgstr ""

#. name, q3, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static void affiche(int n) {\n"
"      for (int i=0;i<n;i=i+1) {\n"
"          System.out.print('X');\n"
"      }\n"
"      System.out.println();\n"
"   }\n"
msgstr ""

#. name, q3, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static void affiche(int n) {\n"
"      for (int i=1;i<=n;i=i+1) {\n"
"          System.out.print('X');\n"
"      }\n"
"      System.out.println();\n"
"   }\n"
msgstr ""

#. name, q3, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static void affiche(int n) {\n"
"      for (int i=n;i>0;i=i-1) {\n"
"          System.out.print('X');\n"
"      }\n"
"      System.out.println();\n"
"   }\n"
msgstr ""

#. name, q3, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static int affiche(int nombre) {\n"
"      for (int j=0;j<nombre;j++) {\n"
"          System.out.print('X');\n"
"      }\n"
"      System.out.println();\n"
"   }\n"
msgstr ""

#. name, q3, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Cette méthode ne se compile pas. Elle est déclarée comme retournant un "
"``int`` et ne contient pas d'instruction ``return``.\n"
msgstr ""

#. name, q3, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static void affiche( nombre) {\n"
"      for (int j=0;j<nombre;j++) {\n"
"          System.out.print('X');\n"
"      }\n"
"      System.out.println();\n"
"   }\n"
msgstr ""

#. name, q3, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Cette méthode ne se compile pas. Le type de son premier argument n'est pas "
"spécifié.\n"
msgstr ""

#. name, q3, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static void affiche(int n) {\n"
"      for (int i=1;i<=n;) {\n"
"          System.out.print('X');\n"
"      }\n"
"      System.out.println();\n"
"   }\n"
msgstr ""

#. name, q3, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Ce méthode boucle indéfiniment. Pouvez-vous voir pourquoi ?\n"
msgstr ""

#. name, q3, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static int affiche(int n) {\n"
"      for (int i=n;;i--) {\n"
"          System.out.print('X');\n"
"      }\n"
"      System.out.println();\n"
"   }\n"
msgstr ""

#. name, q3, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Cette méthode boucle indéfiniment. Pouvez-vous voir pourquoi ?\n"
msgstr ""

#. name, q4, name
#: m03_qcm/task.yaml
msgid "Méthodes void"
msgstr ""

#. name, q4, header
#: m03_qcm/task.yaml
msgid ""
"\n"
"En Java, les méthodes de type ``void`` sont souvent utilisées lorsqu'il faut "
"exécuter une suite d'instructions qui ne doit pas retourner de valeur. On "
"souhaite écrire une méthode ``afficheSomme`` qui affiche à l'écran la somme "
"entre deux nombres entiers. Par exemple, en exécutant ``afficheSomme(3,4)``, "
"la valeur ``7`` est affichée à l'écran. La spécification de cette méthode "
"est\n"
"\n"
".. code-block:: java\n"
"\n"
" /*\n"
"  * @pre -\n"
"  * @post Affiche à l'écran la somme des deux entiers passés en arguments\n"
"  */\n"
msgstr ""

#. name, q4, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static void afficheSomme(int a, int b)\n"
"   {\n"
"      int somme=a+b;\n"
"      System.out.println(somme);\n"
"   }\n"
msgstr ""

#. name, q4, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static void afficheSomme(int x, int y)\n"
"   {\n"
"      System.out.println(x+y);\n"
"   }\n"
msgstr ""

#. name, q4, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"L'expression ``x+y`` est une expression qui a comme valeur un entier. Elle "
"peut donc bien être utilisée comme argument de la méthode ``System.out."
"println()``.\n"
msgstr ""

#. name, q4, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static void afficheSomme(a, b)\n"
"   {\n"
"      int s=a+b;\n"
"      System.out.println(s);\n"
"   }\n"
msgstr ""

#. name, q4, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Lors de la déclaration d'une méthode, il est nécessaire de spécifier le type "
"de chacun de ses arguments. Cette déclaration n'est pas valide.\n"
msgstr ""

#. name, q4, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static void afficheSomme(int c, int d)\n"
"   {\n"
"      int sum=c+d;\n"
"   }\n"
msgstr ""

#. name, q4, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Cette méthode calcule la somme de ses deux arguments mais ne l'affiche pas à "
"l'écran comme demandé.\n"
msgstr ""

#. name, q4, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static void afficheSomme(double c, double d)\n"
"   {\n"
"      System.out.println(x+y);\n"
"   }\n"
msgstr ""

#. name, q4, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Cette méthode prend comme arguments deux nombres réels et non deux entiers "
"comme demandé dans l'énoncé.\n"
msgstr ""

#. name, q5, name
#: m03_qcm/task.yaml
msgid "Déclarations de méthodes"
msgstr ""

#. name, q5, header
#: m03_qcm/task.yaml
msgid ""
"\n"
"En Java, la déclaration d'une méthode nous renseigne sur le type de valeur "
"qui est retourné par cette méthode. Considérons les définitions de méthodes "
"ci-dessous.\n"
"\n"
"\n"
"\n"
".. code-block:: java\n"
"\n"
"   public static void v(int i)  {\n"
"     // code non fourni\n"
"   }\n"
"   public static void w()  {\n"
"     // code non fourni\n"
"   }\n"
"   public static int f(int i)  {\n"
"     // code non fourni\n"
"   }\n"
"   public static int g(boolean b)  {\n"
"     // code non fourni\n"
"   }\n"
"   public static int h()  {\n"
"     // code non fourni\n"
"   }\n"
"\n"
"Une seule des séquences d'instructions ci-dessous est valide. Pourriez-vous "
"indiquer laquelle ?\n"
msgstr ""

#. name, q5, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   int a=f(2);\n"
"   int b=g(false);\n"
"   int c=h();\n"
"   w();\n"
msgstr ""

#. name, q5, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   int a=g(true);\n"
"   int b=f(-2);\n"
"   int c=h();\n"
"   v(a);\n"
msgstr ""

#. name, q5, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   int a=g(false);\n"
"   int b=f(a-2);\n"
"   int c=h();\n"
"   v(a);\n"
msgstr ""

#. name, q5, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Ce fragment de code est valide. Notez que l'argument de la méthode ``f`` "
"peut être n'importe quelle expression qui retourne une valeur de type "
"``int``. C'est bien le cas pour l'expression ``a-2`` puisque la variable "
"``a`` est de type ``int``.\n"
msgstr ""

#. name, q5, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   int b=f(-2);\n"
"   int a=g(b==1);\n"
"   int c=h();\n"
"   v(a);\n"
msgstr ""

#. name, q5, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Ce fragment de code est valide. Notez que l'argument de la méthode ``g`` "
"peut être n'importe quelle expression qui retourne une valeur de type "
"``boolean``. C'est bien le cas pour l'expression ``b==1``.\n"
msgstr ""

#. name, q5, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   int a=g(false);\n"
"   int b=f(-2);\n"
"   int c=w();\n"
"   h();\n"
msgstr ""

#. name, q5, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Ce fragment de code contient deux erreurs. Relisez la définition des "
"méthodes ``h`` et ``w``. La première (``h``) retourne une valeur entière. "
"Elle ne peut donc être utilisée que dans une expression qui donne un "
"résultat entier.  La seconde (``w``) est de type ``void``, elle ne retourne "
"donc aucune valeur et ne peut pas être utilisée comme membre de droite d'une "
"instruction d'affectation.\n"
msgstr ""

#. name, q5, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   int a=g(false);\n"
"   int b=f(-2.0);\n"
"   int d=h();\n"
"   v(d);\n"
msgstr ""

#. name, q5, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Quel est le type de la valeur ``2.0`` en Java ? La méthode ``f`` prend un "
"argument de type `ìnt``.\n"
msgstr ""

#. name, q5, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   int a=g(1);\n"
"   int b=f(7);\n"
"   int c=h();\n"
"   w();\n"
msgstr ""

#. name, q6, name
#: m03_qcm/task.yaml
msgid "Méthodes retournant un nombre"
msgstr ""

#. name, q6, header
#: m03_qcm/task.yaml
msgid ""
"\n"
"\n"
"La classe ``Math`` de java contient la méthode ``Math.min``. Celle-ci prend "
"deux arguments de type ``double`` et retourne le plus petit des deux nombres "
"passés en argument.\n"
"Laquelle de ces méthodes reprises ci-dessous est-elle une implémentation "
"correcte de cette méthode ``min`` dont la spécification est\n"
"\n"
".. code-block:: java\n"
"\n"
" /*\n"
"  * @pre -\n"
"  * @post retourne le minimum entre les deux arguments\n"
"  */\n"
msgstr ""

#. name, q6, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static double min (double a, double b) {\n"
"     if (a<b) {\n"
"         return a;\n"
"     }\n"
"     return b;\n"
"   }\n"
msgstr ""

#. name, q6, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Cette implémentation est correct. Lorsque ``a<b``, la méthode se termine par "
"``return a;``. L'instruction ``return b;`` n'est exécutée que si ``b>=a``.\n"
msgstr ""

#. name, q6, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static double min (double a, double b) {\n"
"     if (a<b) {\n"
"         return a;\n"
"     }\n"
"     else {\n"
"         return b;\n"
"     }\n"
"   }\n"
msgstr ""

#. name, q6, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static double min (double a, double b) {\n"
"     if (b<a) {\n"
"         return b;\n"
"     }\n"
"     else {\n"
"         return a;\n"
"     }\n"
"   }\n"
msgstr ""

#. name, q6, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static double min (double a, double b) {\n"
"     if (b<a) {\n"
"         System.out.println(b);\n"
"     }\n"
"     else {\n"
"         System.out.println(a);\n"
"     }\n"
"   }\n"
msgstr ""

#. name, q6, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Ne confondez pas une méthode qui \"affiche\" (en utilisant ``System.out."
"println``) avec une méthode qui retourne une valeur. Un méthode qui retourne "
"une valeur doit toujours se termine par ``return``. ``javac`` n'acceptera "
"pas de compiler cette méthode qui ne retourne pas de valeur.\n"
msgstr ""

#. name, q6, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static double min (double a, double b) {\n"
"     if (b<a) {\n"
"         return b;\n"
"     }\n"
"   }\n"
msgstr ""

#. name, q6, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Cette méthode ne se compile pas. En Java, une méthode ``double`` doit "
"toujours retourner, via l'instruction ``return``, une valeur de type "
"``double``, quel que soit l'exécution de cette méthode. Cette version ne "
"retourne de valeur que lorsque ``b<a``.\n"
msgstr ""

#. name, q6, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static void min (double a, double b) {\n"
"     if (b<a) {\n"
"         return b;\n"
"     }\n"
"     return a;\n"
"   }\n"
msgstr ""

#. name, q6, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Une méthode ``void`` ne retourne aucun résultat. Ce code ne correspond pas à "
"ce qui est demandé.\n"
msgstr ""

#. name, q7, name
#: m03_qcm/task.yaml
msgid "Méthodes retournant un booléen"
msgstr ""

#. name, q7, header
#: m03_qcm/task.yaml
msgid ""
"\n"
"\n"
"Lorsque l'on doit manipuler des conditions complexes dans une instruction "
"conditionnelle ou une boucle, il peut être intéressant d'écrire des méthodes "
"qui retournent un booléen. Sachant que l'expression ``a%b`` retourne le "
"reste de la division euclidienne de la valeur de la variable entière ``a`` "
"par ``b``, laquelle des méthodes ci-dessous est-elle une implémentation de "
"la spécification suivante\n"
"\n"
".. code-block:: java\n"
"\n"
" /*\n"
"  * @pre n>0\n"
"  * @post retourne true lorsque le nombre passé en argument est pair et "
"false dans le cas contraire\n"
"  */\n"
msgstr ""

#. name, q7, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static boolean pair(int n) {\n"
"     int reste=n%2;\n"
"     return (reste==0);\n"
"   }\n"
msgstr ""

#. name, q7, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static boolean pair(int n) {\n"
"     int reste=n%2;\n"
"     boolean pair=(reste==0);\n"
"     return pair;\n"
"   }\n"
msgstr ""

#. name, q7, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static boolean pair(int n) {\n"
"     int reste=n%2;\n"
"     if (reste!=0) {\n"
"         return false;\n"
"     }\n"
"     else {\n"
"         return true;\n"
"     }\n"
"   }\n"
msgstr ""

#. name, q7, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Ce code est correct, mais il est inutilement long. Sachant que l'instruction "
"conditionnelle évalue une condition qui a déjà une valeur booléenne, il est "
"préférable de retourner directement une telle expression. Comme dans le code "
"ci-dessous .. code-block:: java\n"
"\n"
"   public static boolean pair(int n) {\n"
"    int reste=n%2;\n"
"    return (reste==0);\n"
"   }\n"
msgstr ""

#. name, q7, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static boolean pair(int n) {\n"
"     int reste=n%2;\n"
"     return (reste!=0);\n"
"   }\n"
msgstr ""

#. name, q7, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Cette méthode retourne ``true`` lorsque x est impair et ``false`` sinon.\n"
msgstr ""

#. name, q7, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static boolean pair(double n) {\n"
"     int reste=n%2;\n"
"     return (reste=0);\n"
"   }\n"
msgstr ""

#. name, q7, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"L'argument de la méthode doit nécessairement être de type ``int`` pour "
"pouvoir utiliser le reste de la division euclidienne. En outre, ``reste=0`` "
"est une affectation et non une expression booléenne que l'on peut passer "
"comme argument à ``return``.\n"
msgstr ""

#. name, q7, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static boolean pair(int n) {\n"
"     int reste=n%2;\n"
"     return reste;\n"
"   }\n"
msgstr ""

#. name, q7, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Ce fragment de code est incorrect. La définition de la méthode spécifie "
"qu'elle retourne une valeur booléenne. Or, ``reste`` est une variable de "
"type ``int``.\n"
msgstr ""

#. name, q7, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static boolean pair(int n) {\n"
"     int reste=n%2;\n"
"     if (reste!=0) {\n"
"         return false;\n"
"     }\n"
"   }\n"
msgstr ""

#. name, q7, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Cette méthode ne se compile pas. Elle ne définit pas correctement la valeur "
"qu'il faut retourner lorsque ``reste==0``.\n"
msgstr ""

#. name, q8, name
#: m03_qcm/task.yaml
msgid "Calcul du maximum"
msgstr ""

#. name, q8, header
#: m03_qcm/task.yaml
msgid ""
"\n"
"La classe ``Math`` contient de nombreuses méthodes. Vous trouverez notamment "
"la méthode ``Math.max(double a, double b)`` qui calcule le maximum entre les "
"deux nombres passés en argument. Laquelle des méthodes ci-dessous est-elle "
"une implémentation de la spécification suivante\n"
"\n"
".. code-block:: java\n"
"\n"
" /*\n"
"  * @pre -\n"
"  * @post retourne le maxium entre les deux réels passés en arguments\n"
"  */\n"
msgstr ""

#. name, q8, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static double max(double a, double b)\n"
"   {\n"
"     if(a>b) {\n"
"        return a;\n"
"     }\n"
"     else\n"
"     {\n"
"        return b;\n"
"     }\n"
"   }\n"
msgstr ""

#. name, q8, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static double max(double a, double b)\n"
"   {\n"
"     if(a<=b) {\n"
"        return b;\n"
"     }\n"
"     else\n"
"     {\n"
"        return a;\n"
"     }\n"
"   }\n"
msgstr ""

#. name, q8, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static double max(double a, double b)\n"
"   {\n"
"     if(a<=b) {\n"
"        return b;\n"
"     }\n"
"     return a;\n"
"   }\n"
msgstr ""

#. name, q8, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Ce code est correct. Il est cependant un peu moins lisible qu'un programme "
"dans lequel ``return a;`` se trouverait à l'intérieur d'un bloc ``else``.\n"
msgstr ""

#. name, q8, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static double max(double a, double b)\n"
"   {\n"
"     if(a>b) {\n"
"        return a;\n"
"     }\n"
"     else\n"
"     {\n"
"        return a;\n"
"     }\n"
"   }\n"
msgstr ""

#. name, q8, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Ce code retourne toujours la même valeur.\n"
msgstr ""

#. name, q8, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static double max(double a, double b)\n"
"   {\n"
"        return a;\n"
"   }\n"
msgstr ""

#. name, q8, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static double max(double a, double b)\n"
"   {\n"
"     if(a>=b) {\n"
"        return a;\n"
"     }\n"
"   }\n"
msgstr ""

#. name, q8, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Ce code ne compile pas. La méthode ``max`` proposée ne retourne pas de "
"valeur lorsque ``a<b``.\n"
msgstr ""

#. name, q8, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static double max(double a, double b)\n"
"   {\n"
"     if(a>=b) {\n"
"        return b;\n"
"     }\n"
"     return a;\n"
"   }\n"
msgstr ""

#. name, q8, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Ce code retourne en fait le ``minimum`` entre les nombres ``a`` et ``b`` "
"passés en arguments.\n"
msgstr ""

#. name, q9, name
#: m03_qcm/task.yaml
msgid "Calcul de la valeur absolue"
msgstr ""

#. name, q9, header
#: m03_qcm/task.yaml
msgid ""
"\n"
"\n"
"Dans le programme Java suivant, un étudiant souhaite utiliser une méthode "
"``abs`` permettant de calculer la valeur absolue d'un nombre.\n"
"\n"
"\n"
"\n"
".. code-block:: java\n"
"\n"
"    int i=1401;\n"
"    double d=-112.4;\n"
"    double j=d+abs(2*d);\n"
msgstr ""

#. name, q9, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static double abs(double c) {\n"
"      double r=c;\n"
"      if(c<0) {\n"
"        r=-c;\n"
"      }\n"
"      return r;\n"
"   }\n"
msgstr ""

#. name, q9, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static double abs(double c) {\n"
"      if(c>=0) {\n"
"        return c;\n"
"      }\n"
"      return (-c);\n"
"   }\n"
"\n"
"\n"
msgstr ""

#. name, q9, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static int abs(double c) {\n"
"      if(c<0) {\n"
"        return (-c);\n"
"      }\n"
"      return c;\n"
"   }\n"
msgstr ""

#. name, q9, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Le code utilisé par l'étudiant s'attend à recevoir un ``double``. La méthode "
"doit également retourner un ``double`` et non un ``int`` comme ci-dessus.\n"
msgstr ""

#. name, q9, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static double abs(int a) {\n"
"      if(a>0) {\n"
"        return a;\n"
"      }\n"
"      return (-a);\n"
"   }\n"
msgstr ""

#. name, q9, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"La méthode proposée prend comme argument un entier alors que l'étudiant "
"fournit un réel.\n"
msgstr ""

#. name, q9, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static double abs(double c) {\n"
"      double r;\n"
"      if(c<0) {\n"
"        r=-c;\n"
"      }\n"
"      return r;\n"
"   }\n"
msgstr ""

#. name, q9, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Cette méthode ne compile pas. La variable ``r`` peut être utilisée sans "
"avoir été initialisée. C'est le cas par exemple lorsque ``c>0``. Le "
"compilateur Java refusera de compiler cette méthode.\n"
msgstr ""

#. name, q9, text
#: m03_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static double abs(double c) {\n"
"      if(c>=0) {\n"
"        return;\n"
"      }\n"
"      return (-c);\n"
"   }\n"
msgstr ""

#. name, q9, feedback
#: m03_qcm/task.yaml
msgid ""
"\n"
"Cette méthode ne compile pas. La première invocation de ``return`` ne "
"retourne par de valeur tandis que la seconde retourne un réel.\n"
msgstr ""

#. context
#: m03dem1/task.yaml
msgid ""
"Considérez les déclaratons suivantes :\n"
"\n"
".. code-block ::\n"
"\n"
"    double money = 210.7 ;\n"
"    int euro = 25 ;\n"
"    double wallet_d;\n"
"    int wallet_i;\n"
"\n"
"L'on souhaite faire en sorte que d'une part la valeur le la variable *money* "
"se retrouve dans la variable *wallet_i* et que d'autre part la valeur de la "
"variable *euro* se retrouve dans la variable *wallet_d*.\n"
msgstr ""

#. name
#: m03dem1/task.yaml
msgid "Mission 3 : Question de Démarrage 1: Conversions"
msgstr ""

#. name, q1, header
#. name, q2, header
#: m03dem1/task.yaml
msgid "Indiquez les instructions acceptées par le compilateur:"
msgstr ""

#. name, q1, text
#: m03dem1/task.yaml
msgid "wallet_i = (int) money ;"
msgstr ""

#. name, q1, text
#: m03dem1/task.yaml
msgid "wallet_i = 210.7"
msgstr ""

#. name, q1, text
#: m03dem1/task.yaml
msgid "wallet_i = money ;"
msgstr ""

#. name, q2, text
#: m03dem1/task.yaml
msgid "wallet_d = euro;"
msgstr ""

#. name, q2, text
#: m03dem1/task.yaml
msgid "wallet_d = 25"
msgstr ""

#. name, q2, text
#: m03dem1/task.yaml
msgid "wallet_d = (double) euro;"
msgstr ""

#. name, q3, header
#: m03dem1/task.yaml
msgid ""
"Les instructions correctes des questions 1 et 2 servent régulièrement à "
"\"remplir\" *wallet_i* et *wallet_d*. L'on voudrait vous offrir l'un de ces "
"deux \"wallets\", lequel devriez-vous préférer au cas où vous tennez à votre "
"argent et pourquoi?"
msgstr ""

#. name, q3, text
#: m03dem1/task.yaml
msgid "wallet_d parcequ'il contient des valeurs de type double"
msgstr ""

#. name, q3, text
#: m03dem1/task.yaml
msgid "wallet_i parceque je ne perds rien"
msgstr ""

#. name, q3, text
#: m03dem1/task.yaml
msgid "wallet_d parceque je ne perds rien"
msgstr ""

#. author
#: m03dem2/task.yaml m03dem3/task.yaml
msgid "Clémentine Munyabarenzi, Olivier Martin"
msgstr ""

#. context
#: m03dem2/task.yaml
msgid ""
"Ecrivez *la signature* et *le corps* d’une methode baptisée\n"
"``afficheMax`` qui prend deux nombres entiers comme arguments et\n"
"**affiche** le plus grand de ces nombres. La spécification de cette\n"
"méthode est :\n"
"\n"
"\n"
".. code-block :: java\n"
"\n"
"   /**\n"
"    ∗ @pre -\n"
"    ∗ @post affiche le maximum entre les nombres entiers a et b\n"
"    ∗ /"
msgstr ""

#. name
#: m03dem2/task.yaml
msgid "Mission 3 : Question de Démarrage 2 : Le Nombre Maximum"
msgstr ""

#. name, q1, header
#: m03dem2/task.yaml
msgid ""
"Ecrivez ci-dessous la *signature* et le *corps* de la méthode ``afficheMax``."
msgstr ""

#. context
#: m03dem3/task.yaml
msgid ""
"Ecrivez la signature et le corps d'une méthode baptisée ``impair`` qui prend "
"comme argument un entier **n** positif et retourne ``true`` si **n** est "
"impair et ``false`` sinon. Pour rappel, si **n** est un entier positif ``n % "
"2`` vaut le reste de la division entière de **n** par 2. La spécification de "
"cette méthode est:\n"
"\n"
".. code-block :: java\n"
"\n"
"    /**\n"
"     ∗ @pre n > 0\n"
"     ∗ @post retourne true lorsque n est un nombre entier impair et false "
"sinon.\n"
"     ∗ /"
msgstr ""

#. name
#: m03dem3/task.yaml
msgid "Mission 3 : Question de Démarrage 3 : Nombres impairs"
msgstr ""

#. name, q1, header
#: m03dem3/task.yaml
msgid ""
"Ecrivez ici la *signature* (sur une seule ligne) et le *corps* de votre "
"méthode."
msgstr ""

#. context
#: m03dem4/task.yaml
msgid ""
"Un étudiant montre à son tuteur la méthode main ci-dessous :\n"
"\n"
".. code-block :: java\n"
"\n"
"\n"
"   public static void main(String[] args){\n"
"       int hauteur;\n"
"       int largeur;\n"
"       char c = 'X';\n"
"       System.out.println(\"Hauteur du L\");\n"
"       hauteur = TextIO.getInt();\n"
"       System.out.println(\"Largeur du L \");\n"
"       largeur = TextIO.getInt();\n"
"       System.out.println();\n"
"       lettre_l(c, hauteur, largeur);\n"
"   }\n"
"\n"
"Lors de son exécution elle affiche les caractères suivants à l'écran:\n"
"\n"
"  ::\n"
"\n"
"      Hauteur du L\n"
"      7\n"
"      Largeur du L\n"
"      5\n"
"\n"
"      X\n"
"      X\n"
"      X\n"
"      X\n"
"      X\n"
"      X\n"
"      XXXXX\n"
"\n"
msgstr ""

#. name
#: m03dem4/task.yaml
msgid "Mission 3 : Question de démarrage 4 : Lettre L"
msgstr ""

#. name, q1, header
#: m03dem4/task.yaml
msgid ""
"Réécrivez **la signature**, **et le corps** de la\n"
"méthode ``lettre_l`` utilisée par cet étudiant."
msgstr ""

#. author
#: m03dem5/task.yaml
msgid "Clémentine Zaninka, Olivier Martin"
msgstr ""

#. context
#: m03dem5/task.yaml
msgid ""
"La section *3.4.2* du livre présente un programme qui permet de calculer et "
"d’afficher le nombre de diviseurs entiers d’un nombre entier. Réutilisez ce "
"code de façon à construire la méthode ``nDiv``\n"
"répondant à la spécification et la signature suivante :\n"
"\n"
"\n"
".. code-block :: java\n"
"\n"
"    /**\n"
"     * @pre n > 0\n"
"     * @post retourne le nombre de diviseurs entiers du nombre entier n.\n"
"     */\n"
"     public static int nDiv(int n) {\n"
"         // Votre code ici\n"
"     }"
msgstr ""

#. name
#: m03dem5/task.yaml
msgid "Mission 3 : Question de Démarage 5 : Diviseurs Entiers"
msgstr ""

#. name, q1, header
#: m03dem5/task.yaml
msgid "Ecrivez ici le **corps** de la méthode ``nDiv``."
msgstr ""

#. context
#: m03real1/task.yaml
msgid "Soumettez l'archive zip contenant le fichier LibMath.java et README.txt"
msgstr ""

#. name
#: m03real1/task.yaml
msgid "Mission 3: Phase de réalisation: Soumission"
msgstr ""

#. name, q1, name
#: m03real1/task.yaml
msgid "Archive zip"
msgstr ""

#. name, q1, header
#: m03real1/task.yaml
msgid "Soumettez ici l'archive zip"
msgstr ""

#. context
#: m04Q1/task.yaml
msgid ""
"Ecrivez la méthode ``int countChar(String s, char c)`` permettant de compter "
"le nombre d'occurences du caractère ``c`` dans ``s`` et dont\n"
"la spécification est :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     * @pre s != null\n"
"     * @post retourne le nombre d’occurrences du caractère c dans la chaîne "
"s\n"
"     */"
msgstr ""

#. name
#: m04Q1/task.yaml
msgid "Mission 4 : Question supplémentaire : Occurences de c dans s"
msgstr ""

#. name, q1, name
#: m04Q1/task.yaml
msgid "Occurence"
msgstr ""

#. name, q1, header
#: m04Q1/task.yaml m04Q10/task.yaml m04Q3/task.yaml m04Q7/task.yaml
#: m04Q9/task.yaml m05Q1/task.yaml m05Q10/task.yaml m05Q11/task.yaml
#: m05Q2/task.yaml m05Q3/task.yaml m05Q4/task.yaml m05Q5/task.yaml
#: m05Q6/task.yaml m05Q7/task.yaml m05Q8/task.yaml m05Q9/task.yaml
msgid "Écrivez ici la méthode"
msgstr ""

#. context
#: m04Q10/task.yaml
msgid ""
"Ecrivez la méthode ``int d2i(String s)`` qui retourne la représentation "
"entière d'un nombre entier fourni sous la forme d'un String. Par exemple, "
"\"012345\" doit renvoyer 1235. N'utilisez pas de méthode de parsing comme "
"``parseInt`` ou ``parseDouble``.\n"
"\n"
"La spécification est:\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     * @pre s != null et s est la représentation d'un nombre entier dans "
"le \n"
"     *      système décimal (il contient uniquement des chiffres)\n"
"     * @post retourne la représentation du nombre sous forme d'un entier\n"
"     */\n"
"\n"
"La méthode ci-dessous pourrait vous aider à résoudre facilement cette "
"question : `<http://docs.oracle.com/javase/6/docs/api/java/lang/Character."
"html#getNumericValue(char)>`_\n"
"\n"
msgstr ""

#. name
#: m04Q10/task.yaml
msgid "Mission 4 : Q** représentation entière"
msgstr ""

#. name, q1, name
#: m04Q10/task.yaml
msgid "d2i"
msgstr ""

#. context
#: m04Q11/task.yaml
msgid ""
"Ecrivez la méthode ``char plusFrequent(String s)`` qui permet de déterminer "
"le caractère le plus présent dans la chaine de caractères ``s``.\n"
"\n"
"A titre d'exemple, le caractère le plus fréquent de la chaîne ``abbDDaa`` "
"est ``a``. Si la chaîne contient des caractères avec le même nombre "
"d'occurences maximal, renvoyez le premier trouvé de gauche à droite.\n"
"\n"
"La spécification est:\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     * @pre s!=null\n"
"     * @post retourne le caractère qui se trouve le plus grand\n"
"     *      nombre de fois dans la chaîne s\n"
"     */"
msgstr ""

#. name
#: m04Q11/task.yaml
msgid "Mission 4 : Q***  Caractère le plus fréquent"
msgstr ""

#. name, q1, name
#: m04Q11/task.yaml
msgid "le plus fréquent"
msgstr ""

#. name, q1, header
#: m04Q11/task.yaml m04Q4/task.yaml m04Q6/task.yaml
msgid "Écrivez ici la signature et le corps de cette méthode."
msgstr ""

#. context
#: m04Q2/task.yaml
msgid ""
"Ecrivez la méthode ``boolean isIn(char c, String s)`` dont la spécification "
"est :\n"
"\n"
".. code-block:: java\n"
"\n"
"   /*\n"
"    * @pre s!=null\n"
"    * @post retourne true si le caractère c est dans s, false sinon\n"
"    */"
msgstr ""

#. name
#: m04Q2/task.yaml
msgid "Mission 4 : Q* Caractère dans String "
msgstr ""

#. name, q1, name
#: m04Q2/task.yaml
msgid "Présence"
msgstr ""

#. name, q1, header
#: m04Q2/task.yaml
msgid "Écrivez la signature et le corps de la méthode isIn"
msgstr ""

#. context
#: m04Q3/task.yaml
msgid ""
"Ecrivez la méthode ``boolean entierValide(String s)`` permettant de "
"retourner ``true`` uniquement si la chaine de caractères ``s`` ne contient "
"que des chiffres.\n"
"la spécification est :\n"
"\n"
".. code-block:: java\n"
"\n"
"   /*\n"
"     * @pre s != null\n"
"     * @post retourne true uniquement si la chaine de caractères\n"
"     *       s ne contient que des chiffres\n"
"     */\n"
"\n"
"Il y a une méthode dans la classe Character\n"
"qui devrait vous aider à vérifier qu'un caractère est un chiffre, voir "
"https://docs.oracle.com/javase/7/docs/api/java/lang/Character.html"
msgstr ""

#. name
#: m04Q3/task.yaml
msgid "Mission 4 : Q* chaîne composée de chiffres"
msgstr ""

#. name, q1, name
#: m04Q3/task.yaml
msgid "Chaîne de chiffres"
msgstr ""

#. context
#: m04Q4/task.yaml
msgid ""
"De nombreux sites web imposent des contraintes sur les mots de passe que les "
"utilisateurs peuvent utiliser. L'objectif est généralement de forcer les "
"utilisateurs à choisir des mots de passe difficiles à trouver par des "
"attaquants éventuels.\n"
"\n"
"Ecrivez la méthode ``boolean motDePasseValide(String s)`` permettant de "
"vérifier la validité d'un mot de passe ``s``. La contrainte imposée à un tel "
"mot de passe est qu'il doit au moins contenir 8 caractères, un chiffre. La "
"spécification de cette méthode est :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     * @pre s!=null\n"
"     * @post retourne true uniquement si la chaine de caractères\n"
"     *       s est un mot de passe valide, c-a-d qu'elle\n"
"     *       contient au moins 8 caractères, au moins une lettre\n"
"     *       minuscule, au moins un chiffre et au moins une lettre "
"majuscule\n"
"     */\n"
"\n"
"\n"
"Vous trouverez dans la classe `Character <https://docs.oracle.com/javase/7/"
"docs/api/java/lang/Character.html>`_ des méthodes utiles pour cette tâche.\n"
msgstr ""

#. name
#: m04Q4/task.yaml
msgid "Mission 4 : Q** Vérification de mot de passe"
msgstr ""

#. name, q1, name
#: m04Q4/task.yaml
msgid "Mot de passe"
msgstr ""

#. context
#: m04Q5/task.yaml
msgid ""
"Ecrivez la méthode ``boolean binaire(String s)`` qui retourne ``true`` "
"uniquement si la chaine de caractères ``s`` ne contient que les caractères "
"``0`` ou ``1``\n"
"\n"
"La spécification est :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     * @pre s != null, s.length() >= 1\n"
"     * @post retourne true uniquement si la chaine de caractères\n"
"     *       s ne contient que les caractères 0 ou 1\n"
"     */"
msgstr ""

#. name
#: m04Q5/task.yaml
msgid "Mission 4 : Question supplémentaire : binaire"
msgstr ""

#. name, q1, name
#: m04Q5/task.yaml
msgid "Binaire"
msgstr ""

#. name, q1, header
#: m04Q5/task.yaml m04Q8/task.yaml
msgid "Écrivez ici la signature et le corps de cette méthode"
msgstr ""

#. context
#: m04Q6/task.yaml
msgid ""
"Ecrivez la méthode ``boolean containsOnly(String s, String c)`` qui retourne "
"``true`` si la chaine ``s`` contient uniquement des caractères se trouvant "
"dans la chaine ``c``, ``false`` sinon.\n"
"\n"
"La spécification est :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     * @pre s != null, c != null, tous les caractères de la chaine c sont "
"différents\n"
"     * @post retourne true si la chaine s contient uniquement des\n"
"     *       caracteres se trouvant la chaine c, false sinon\n"
"     */"
msgstr ""

#. name
#: m04Q6/task.yaml
msgid "Mission 4 : Q** containsOnly"
msgstr ""

#. name, q1, name
#: m04Q6/task.yaml
msgid "containsOnly"
msgstr ""

#. context
#: m04Q7/task.yaml
msgid ""
"Ecrivez la méthode ``boolean palindrome(String s)`` qui vérifie si une "
"chaine de caractères ``s`` est un palindrome. Pour rappel, vous trouverez "
"plus d'informations sur les palindromes sur `Wikipedia <https://en.wikipedia."
"org/wiki/Palindrome>`_.\n"
"\n"
"Pour simplifier les choses, votre programme prend en compte les signes "
"diacritiques (accents, trémas, cédilles) et les espaces. Par exemple "
"\"camilleellimaç\" ou encore \"la mariée ira mal\" ne doivent pas être "
"considérés comme des palindromes.\n"
"\n"
"La spécification de cette méthode est :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     * @pre s != null\n"
"     * @post retourne true si s est un palindrome, false sinon\n"
"     */"
msgstr ""

#. name
#: m04Q7/task.yaml
msgid "Mission 4 : Question supplémentaire : le palindrome"
msgstr ""

#. name, q1, name
#: m04Q7/task.yaml
msgid "Palindrome"
msgstr ""

#. context
#: m04Q8/task.yaml
msgid ""
"Ecrivez la méthode ``boolean contains(String s, String in)`` qui retourne "
"true si la chaine de caractère ``in`` se trouve dans la chaine de caractères "
"``s``. N'utilisez pas la méthode ``contains()`` ou ``indexOf()`` de String.\n"
"La spécification est :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     * @pre s != null, in != null\n"
"     * @post retourne true si la chaine de caractère in se trouve\n"
"     *     dans la chaîne de caractères s\n"
"     */"
msgstr ""

#. name
#: m04Q8/task.yaml
msgid "Mission 4 : Q*  méthode contains"
msgstr ""

#. name, q1, name
#: m04Q8/task.yaml m09Q4/task.yaml m10Q4/task.yaml
msgid "Contains"
msgstr ""

#. context
#: m04Q9/task.yaml
msgid ""
"Les ordinateurs manipulent les nombres en utilisant le `système binaire "
"<https://fr.wikipedia.org/wiki/Système_binaire>`_.\n"
"\n"
"Ecrivez la méthode ``int b2i(String s)`` qui permet de transformer un nombre "
"en notation binaire en sa représentation sous forme d'entier .\n"
"\n"
"La spécification de cette méthode est :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     * @pre s != null\n"
"     *      s est la représentation d'un nombre binaire\n"
"     *      s contient uniquement des 1 et des 0\n"
"     * @post retourne la représentation entière du nombre binaire\n"
"     *      correspondant à cette chaîne\n"
"     */"
msgstr ""

#. name
#: m04Q9/task.yaml
msgid "Mission 4 : Q* notation binaire"
msgstr ""

#. name, q1, name
#: m04Q9/task.yaml
msgid "b2i"
msgstr ""

#. context
#: m04_bf/task.yaml
msgid ""
"La classe **String** contient de nombreuses méthodes permettant de manipuler "
"les chaînes de caractères. Parmi celles-ci, on peut citer ``length()`` qui "
"retourne la longueur de la chaîne de caractères, ``charAt(int i)`` qui "
"retourne le caractère de la ième position ou ``substring(int begin, int "
"end)`` qui retourne la sous-chaîne de caractères démarrant à la position "
"``begin`` et se terminant à la position ``end - 1``.\n"
"\n"
"En utilisant ces méthodes, vous devez écrire une méthode dont la "
"spécification est la suivante :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     * @pre - p != null, s != null\n"
"     *      - p est un pattern, c’est-à-dire une chaîne de caractères "
"composées de\n"
"     *        lettres, de chiffres et de zéro, une ou plusieurs fois le "
"caractère ?\n"
"     *      - s contient des lettres et des chiffres, mais pas le "
"caractère ?\n"
"     * @post - retourne le nombre d’occurrences du pattern p à l’intérieur "
"de la chaîne\n"
"     *         de caractères s.\n"
"     *       - Une occurrence est une sous-chaîne de s de même longueur\n"
"     *         que p qui contient les mêmes caractères que p à toutes les "
"positions\n"
"     *         où p ne contient pas de caractère ?\n"
"     */\n"
"    public static int count (String p, String s);\n"
"\n"
"\n"
"À titre d’exemple, le code ci-dessous :\n"
"\n"
".. code-block:: java\n"
"\n"
"    System.out.println(count(\"AB\",\"CDEF\"));\n"
"    System.out.println(count(\"?B\",\"CABDEF\"));\n"
"    System.out.println(count(\"A?\",\"CABDEACF\"));\n"
"    System.out.println(count(\"AA\",\"CAAABDEAAF\"));\n"
"    System.out.println(count(\"??\",\"CAAAB\"));\n"
"\n"
"Affiche les valeurs 0, 1, 2, 3 et 4.\n"
"\n"
"Pour résoudre ce problème, pensez à la découper en sous-problèmes et "
"n’hésitez pas à utiliser une ou plusieurs méthodes privées supplémentaires."
msgstr ""

#. name
#: m04_bf/task.yaml
msgid "Mission 4 : Question de bilan final"
msgstr ""

#. name, q1, header
#: m04_bf/task.yaml
msgid ""
"Complétez ici le corps de la méthode\n"
"\n"
".. code-block:: java\n"
"\n"
"    public static int count (String p, String s)\n"
"\n"
msgstr ""

#. name, q2, header
#: m04_bf/task.yaml
msgid ""
"Déclarez ici les méthodes privées que vous souhaitez utiliser pour "
"décomposer le problème en sous-problèmes. Attention, veillez à n'utiliser "
"que des méthodes de classe ``static``. Si une exception survient dans ce "
"code, le feedback sera indiqué dans la question 1.\n"
"\n"
msgstr ""

#. context
#: m04_qcm/task.yaml
msgid ""
"================================================\n"
"Mission 4. Manipulation de chaînes de caractères\n"
"================================================\n"
"\n"
"\n"
"Ces questions supposent que vous avez lu les sections suivantes du livre de "
"référence |jn|_\n"
"\n"
" - |jn2.3|_\n"
"\n"
"   - |jn2.3.1|_\n"
"   - |jn2.3.2|_\n"
"   - |jn2.3.3|_ n'est pas vu dans le cadre de ce cours\n"
"\n"
" - |jn4.7|_\n"
"\n"
"   - |jn4.7.1|_\n"
"   - |jn4.7.2|_\n"
"   - |jn4.7.3|_\n"
"\n"
"\n"
"Les sections vues précédemment restent bien entendu d'actualité.\n"
"\n"
".. _jn: http://math.hws.edu/javanotes/\n"
".. |jn| replace:: JavaNotes\n"
"\n"
".. _jn2.3: http://math.hws.edu/javanotes/c2/s3.html\n"
".. |jn2.3| replace:: `2.3 : Strings, Objects, Enums, and Subroutines`\n"
"\n"
".. _jn2.3.1: http://math.hws.edu/javanotes/c2/s3.html#basics.3.1\n"
".. |jn2.3.1| replace:: `2.3.1 : Built-in Subroutines and Functions`\n"
"\n"
".. _jn2.3.2: http://math.hws.edu/javanotes/c2/s3.html#basics.3.2\n"
".. |jn2.3.2| replace:: `2.3.2 : Operations on Strings`\n"
"\n"
".. _jn2.3.3: http://math.hws.edu/javanotes/c2/s3.html#basics.3.3\n"
".. |jn2.3.3| replace:: `2.3.3 : Introduction to Enums`\n"
"\n"
".. _jn4.7 : http://math.hws.edu/javanotes/c4/s7.html\n"
".. |jn4.7| replace:: `4.7 : The Truth About Declarations`\n"
"\n"
".. _jn4.7.1 : http://math.hws.edu/javanotes/c4/s7.html#subroutines.7.1\n"
".. |jn4.7.1| replace:: `4.7.1 : Initialization in Declarations`\n"
"\n"
".. _jn4.7.2 : http://math.hws.edu/javanotes/c4/s7.html#subroutines.7.2\n"
".. |jn4.7.2| replace:: `4.7.2 : Named Constants`\n"
"\n"
".. _jn4.7.3 : http://math.hws.edu/javanotes/c4/s7.html#subroutines.7.3\n"
".. |jn4.7.3| replace:: `4.7.3 : Naming and Scope Rules`\n"
msgstr ""

#. name
#: m04_qcm/task.yaml
msgid "Mission 4: QCM"
msgstr ""

#. name, q1, name
#. name, q2, name
#: m04_qcm/task.yaml
msgid "Portée des variables"
msgstr ""

#. name, q1, header
#: m04_qcm/task.yaml
msgid ""
"\n"
"\n"
"En Java, une déclaration de variable a comme portée la zone qui sépare la "
"déclaration de la variable de la fin du bloc dans lequel elle apparaît. Une "
"règle de bonne pratique est de déclarer chaque variable au début du bloc de "
"la méthode dans laquelle elle est utilisée ou dans un bloc d'une boucle par "
"exemple. Considérons la méthode définie comme suit\n"
"\n"
".. code-block:: java\n"
"\n"
"    public static void showScope (int a, double r)\n"
"    {\n"
"      int j=0;\n"
"      ... // ligne a\n"
"      for (int i = 0; ... ) {\n"
"      double y=0.0;\n"
"      ... // ligne c\n"
"      if(i>0) {\n"
"         boolean b=false;\n"
"         ... // ligne e\n"
"      }\n"
"      }\n"
"      ... // ligne f\n"
"\n"
"    }\n"
"\n"
"\n"
"Les propositions ci-dessous sont relatives à des instructions placées à "
"certains lignes identifiées ci-dessus. Laquelle de ces propositions est-elle "
"correcte ?\n"
msgstr ""

#. name, q1, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  System.out.print(a); // ligne a\n"
"  System.out.print(r); // ligne c\n"
"  System.out.print(b); // ligne e\n"
"  System.out.print(j); // ligne f\n"
msgstr ""

#. name, q1, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  System.out.print(j); // ligne a\n"
"  System.out.print(y); // ligne c\n"
"  System.out.print(b); // ligne e\n"
"  System.out.print(a); // ligne f\n"
msgstr ""

#. name, q1, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  System.out.print(a); // ligne a\n"
"  System.out.print(y); // ligne c\n"
"  System.out.print(b); // ligne e\n"
"  System.out.print(i); // ligne f\n"
msgstr ""

#. name, q1, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"La variable ``i`` n'est utilisable qu'à l'intérieur de la boucle ``for``. "
"Elle ne peut pas être utilisée en dehors de cette boucle.\n"
msgstr ""

#. name, q1, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  System.out.print(i); // ligne a\n"
"  System.out.print(y); // ligne c\n"
"  System.out.print(b); // ligne e\n"
"  System.out.print(i); // ligne f\n"
msgstr ""

#. name, q1, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  System.out.print(a); // ligne a\n"
"  System.out.print(i); // ligne c\n"
"  System.out.print(r); // ligne e\n"
"  System.out.print(y); // ligne f\n"
msgstr ""

#. name, q1, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"La variable ``y`` n'est utilisable qu'après sa déclaration dans le bloc "
"``for``. En dehors de ce bloc, elle ne peut pas être utilisée.\n"
msgstr ""

#. name, q10, name
#: m04_qcm/task.yaml
msgid "Méthode contains"
msgstr ""

#. name, q10, header
#: m04_qcm/task.yaml
msgid ""
"\n"
"\n"
"Laquelle des implémentations de la méthode ``contains`` dont la "
"spécification et la signature sont reprises ci-dessous est-elle valide ?\n"
"\n"
".. code-block:: java\n"
"\n"
" /*\n"
"  * @pre s non vide\n"
"  * @post retourne true si le caractère c est présent dans la chaîne s et "
"false sinon\n"
"  */\n"
"\n"
" public static boolean contains(String s, char c)\n"
msgstr ""

#. name, q10, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  {\n"
"   for(int i=0;i<s.length();i=i+1) {\n"
"     if(s.charAt(i)==c) {\n"
"        return true;\n"
"     }\n"
"   }\n"
"   return false;\n"
"  }\n"
msgstr ""

#. name, q10, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  {\n"
"   for(int j=s.length()-1;j>=0;j=j-1) {\n"
"     if(s.charAt(j)!=c) {\n"
"        return true;\n"
"     }\n"
"   }\n"
"   return false;\n"
"  }\n"
msgstr ""

#. name, q10, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  {\n"
"   for(int i=0;i<s.length();i=i+1) {\n"
"     if(s.charAt(i)!=c) {\n"
"        return false;\n"
"     }\n"
"   }\n"
"   return true;\n"
"  }\n"
msgstr ""

#. name, q10, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"Cette méthode retourne ``false`` dès qu'un caractère diffère du caractère "
"passé en argument, mais elle ne teste pas toute la chaîne de caractères.\n"
msgstr ""

#. name, q10, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  {\n"
"   for(int j=s.length();j>=0;j=j-1) {\n"
"     if(s.charAt(j)==c) {\n"
"        return true;\n"
"     }\n"
"   }\n"
"   return false;\n"
"  }\n"
msgstr ""

#. name, q10, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"Cette méthode commence par essayer d'accéder au caractère à l'indice ``s."
"length()``, mais celui-ci n'existe pas puisque les indices des caractères "
"d'une chaînes démarrent à ``0``.\n"
msgstr ""

#. name, q10, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  {\n"
"   for(int j=s.length()-1;j>0;j=j-1) {\n"
"     if(s.charAt(j)==c) {\n"
"        return true;\n"
"     }\n"
"   }\n"
"   return false;\n"
"  }\n"
msgstr ""

#. name, q10, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"Cette méthode ne teste pas le caractère se trouvant à l'indice ``0`` de la "
"chaîne de caractères ``s``. Elle ne fonctionne donc pas dans tous les cas.\n"
msgstr ""

#. name, q10, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  {\n"
"   for(int i=0;i<=s.length();i=i+1) {\n"
"     if(s.charAt(i)==c) {\n"
"        return true;\n"
"     }\n"
"   }\n"
"   return false;\n"
"  }\n"
msgstr ""

#. name, q10, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"Cette méthode essaye de tester le caractère à l'indice ``s.length()`` de la "
"chaîne de caractères, mais ce caractère n'existe pas. Cela provoquera une "
"erreur à l'exécution.\n"
msgstr ""

#. name, q10, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  {\n"
"   for(int i=0;i<s.length();i=i+1) {\n"
"     if(s.charAt(i)==c) {\n"
"        return true;\n"
"     }\n"
"     else {\n"
"        return false;\n"
"     }\n"
"   }\n"
"\n"
"  }\n"
msgstr ""

#. name, q10, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"Cette méthode teste uniquement la valeur du premier caractère. Voyez-vous "
"pourquoi ?\n"
msgstr ""

#. name, q2, header
#: m04_qcm/task.yaml
msgid ""
"\n"
"Parmi les définitions de méthodes ci-dessous, quelle est celle qui affichera "
"correctement ``2012`` à l'écran ?\n"
msgstr ""

#. name, q2, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  public static void main(String[] args) {\n"
"\n"
"    int i=2011;\n"
"    int b=1;\n"
"    if(b==0) {\n"
"       i=b;\n"
"    }\n"
"    else {\n"
"       i++;\n"
"    }\n"
"    System.out.println(i);\n"
"\n"
"  }\n"
msgstr ""

#. name, q2, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"Dans cette méthode, ``b`` vaut ``1`` et donc le bloc ``else`` est exécuté et "
"la valeur de ``i`` est incrémentée.\n"
msgstr ""

#. name, q2, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  public static int f(int b) {\n"
"    for(int i=1;i<10;i=i+1) {\n"
"     b=b+i;\n"
"    }\n"
"\n"
"    return b;\n"
"  }\n"
"\n"
"  public static void main(String[] args) {\n"
"\n"
"    int i=2012;\n"
"    int b=1;\n"
"    b=f(i);\n"
"    System.out.println(i);\n"
"\n"
"  }\n"
msgstr ""

#. name, q2, feedback
#: m04_qcm/task.yaml
msgid ""
"Notez que la variable ``i`` déclarée dans la méthode ``f`` est différente de "
"la variable ``i`` déclarée dans la méthode ``main``.\n"
msgstr ""

#. name, q2, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  public static void main(String[] args) {\n"
"\n"
"    int i=2012;\n"
"    int b=1;\n"
"    if(b==0) {\n"
"       int i=1;\n"
"    }\n"
"    else {\n"
"        i=1234;\n"
"    }\n"
"    System.out.println(i);\n"
"\n"
"  }\n"
msgstr ""

#. name, q2, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"``javac`` refuse de compiler ce code car on cherche à déclarer deux fois la "
"variable ``i`` ce qui est interdit dans la même méthode.\n"
msgstr ""

#. name, q2, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  public static void main(String[] args) {\n"
"\n"
"    int i=2012;\n"
"    int b=1;\n"
"    for(i=1; i<10; i=i+1) {\n"
"       b=b+i;\n"
"    }\n"
"    System.out.println(i);\n"
"\n"
"  }\n"
msgstr ""

#. name, q2, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"Cette méthode ``main`` modifie la valeur de la variable ``i`` dans la boucle "
"``for``. La valeur affichée est ``10``.\n"
msgstr ""

#. name, q2, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  public static void main(String[] args) {\n"
"\n"
"    int i=2012;\n"
"    int b=1;\n"
"    while(b!=0) {\n"
"      i=i+1;\n"
"      b=b-1;\n"
"    }\n"
"    System.out.println(i);\n"
"\n"
"  }\n"
msgstr ""

#. name, q2, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"Cette méthode ``main`` met à jour la variable i dans le bloc ``while``. "
"C'est donc 2013 qui est affiché.\n"
msgstr ""

#. name, q2, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  public static void main(String[] args) {\n"
"\n"
"    int i=2012;\n"
"    int b=1;\n"
"    if(b!=0) {\n"
"      i=i+1;\n"
"      b=b-1;\n"
"    }\n"
"    else {\n"
"      i=2012;\n"
"    }\n"
"\n"
"    System.out.println(i);\n"
"\n"
"  }\n"
msgstr ""

#. name, q2, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"Cette méthode ``main`` met à jour la variable i dans le bloc ``if``. C'est "
"donc 2013 qui est affiché.\n"
msgstr ""

#. name, q3, name
#: m04_qcm/task.yaml
msgid "Surcharge de méthodes"
msgstr ""

#. name, q3, header
#: m04_qcm/task.yaml
msgid ""
"\n"
"\n"
"En Java, il est possible de définir plusieurs méthodes qui ont le même nom "
"pour autant qu'elles diffèrent par le nombre ou le type de leurs arguments. "
"La méthode ``System.out.print`` par exemple est une méthode qui existe avec "
"comme argument un entier, un caractères, une chaîne de caractères, un "
"booléen. Considérons les déclarations de méthodes ci-dessous\n"
"\n"
".. code-block:: java\n"
"\n"
"\n"
" public static void affiche(char c, int i) {\n"
"  System.out.println(\"char, int\");\n"
" }\n"
"\n"
" public static void affiche(int i, int j) {\n"
"  System.out.println(\"int, int\");\n"
" }\n"
"\n"
" public static void affiche(String s, double j) {\n"
"  System.out.println(\"String, double\");\n"
" }\n"
"\n"
" public static void affiche(String s, boolean b) {\n"
"  System.out.println(\"String, boolean\");\n"
" }\n"
"\n"
"Laquelle des séquences d'invocation suivantes affiche à l'écran\n"
"\n"
".. code-block:: java\n"
"\n"
"  char, int\n"
"  String, double\n"
"  int, int\n"
"  String, boolean\n"
msgstr ""

#. name, q3, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  affiche('0',-4);\n"
"  affiche(\"abc\",3.23);\n"
"  affiche(0,0);\n"
"  affiche(\"3.12\",false);\n"
msgstr ""

#. name, q3, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  affiche('c',0);\n"
"  affiche(\"3.12\",3.23);\n"
"  affiche(-1,1);\n"
"  affiche(\"abc\",false);\n"
msgstr ""

#. name, q3, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  affiche('c',-2);\n"
"  affiche(\"abc\",3.23);\n"
"  affiche(2,8);\n"
"  affiche(\"abc\",\"true\");\n"
msgstr ""

#. name, q3, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"La dernière ligne appelle une méthode qui prend comme arguments deux "
"``String`` et non un ``String`` et un ``boolean``\n"
msgstr ""

#. name, q3, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  affiche('8',-2);\n"
"  affiche(3.12,3.231);\n"
"  affiche(3,-12);\n"
"  affiche(\"3.1\",false);\n"
msgstr ""

#. name, q3, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"La deuxième ligne appelle une méthode qui prend comme arguments deux "
"``double`` et non un ``String`` et un ``double``.\n"
msgstr ""

#. name, q3, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  affiche(\"8\",-2);\n"
"  affiche(\"3.12\",3.231);\n"
"  affiche(6,-2);\n"
"  affiche(\"true\",false);\n"
msgstr ""

#. name, q3, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"La première ligne appelle une méthode qui prend comme arguments un "
"``String`` et un ``int`` et non un caractère et un ``int``.\n"
msgstr ""

#. name, q3, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  affiche('7',0);\n"
"  affiche(\"3.12\",3.231);\n"
"  affiche(6,\"-2\");\n"
"  affiche(\"false\",true);\n"
msgstr ""

#. name, q3, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"La troisième ligne appelle une méthode qui prend comme arguments un ``int`` "
"et un ``String`` et non deux ``int``.\n"
msgstr ""

#. name, q4, name
#. name, q5, name
#: m04_qcm/task.yaml
msgid "Conversion de types"
msgstr ""

#. name, q4, header
#: m04_qcm/task.yaml
msgid ""
"\n"
"En Java, il existe différentes solutions pour convertir un nombre réel en un "
"nombre entier. Considérons la variable ``p`` déclarée comme suit\n"
"\n"
".. code-block:: java\n"
"\n"
"\n"
"    double p=3.84;\n"
"\n"
"Laquelle des instructions ci-dessous affiche-t-elle ``3`` à l'écran ?\n"
msgstr ""

#. name, q4, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"    System.out.println((int) p);\n"
msgstr ""

#. name, q4, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"En Java, ``(int) p`` permet de convertir le contenu de la variable ``p`` en "
"une valeur entière.\n"
msgstr ""

#. name, q4, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   System.out.println(Math.round(p));\n"
msgstr ""

#. name, q4, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"La méthode ``Math.round`` retourne la valeur arrondie. Dans ce cas, le "
"résultat est ``4``. Voir http://docs.oracle.com/javase/7/docs/api/java/lang/"
"Math.html#round(double)\n"
msgstr ""

#. name, q4, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   System.out.println(p);\n"
msgstr ""

#. name, q4, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"Cette instruction affiche la valeur de ``p``, c'est-à-dire ``3.84``.\n"
msgstr ""

#. name, q4, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   System.out.println(Math.ceil(p));\n"
msgstr ""

#. name, q4, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"La méthode  ``Math.ceil`` retourne un ``double`` et non un entier. "
"L'instruction affiche ``4.0`` à l'écran. Voir http://docs.oracle.com/"
"javase/7/docs/api/java/lang/Math.html#ceil(double)\n"
msgstr ""

#. name, q4, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   System.out.println(Math.floor(p));\n"
"\n"
"\n"
msgstr ""

#. name, q4, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"La méthode ``Math.floor`` retourne un ``double`` et non un entier. "
"L'instruction affiche ``3.0`` à l'écran. Voir http://docs.oracle.com/"
"javase/7/docs/api/java/lang/Math.html#floor(double)\n"
msgstr ""

#. name, q5, header
#: m04_qcm/task.yaml
msgid ""
"\n"
"Comme décrit dans la section |jn2.5.6|_ du livre de référence, il est "
"possible en Java de réaliser des conversions entre les nombres réels et les "
"nombres entiers. Certaines de ces conversions sont explicites, d'autres sont "
"implicites. Considérons le fragment de code ci-dessous\n"
"\n"
".. code-block:: java\n"
"\n"
" double f;\n"
" f=...; // ligne 1\n"
" System.out.println(f);\n"
"\n"
"Lorsqu'il est exécuté, il affiche la valeur ``2.0`` à l'écran. Parmi les "
"assignations ci-dessous, quelle est celle qui a placé la valeur ``2.0`` dans "
"la variable ``f`` ?\n"
"\n"
"\n"
".. _jn2.5.6: http://math.hws.edu/javanotes/c2/s5.html#basics.5.6\n"
".. |jn2.5.6| replace:: `2.5.6 : Assignment Operators and Type-Casts`\n"
msgstr ""

#. name, q5, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  f=125/(40+10);\n"
msgstr ""

#. name, q5, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"Dans cette expression, le dénominateur est une somme de nombres entiers, "
"c'est donc lui-même un entier. Le numérateur est un entier également. Donc, "
"l'opération de division est une division *entière*. Le résultat de cette "
"division entière est ``2`` qui est automatiquement converti par Java en la "
"valeur réelle ``2.0``.  Pour Java, cette assignation équivaut en fait à .. "
"code-block:: java\n"
"\n"
" f=(double) (125/(40+10));\n"
msgstr ""

#. name, q5, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  f=125/(40+10.0);\n"
msgstr ""

#. name, q5, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"Dans cette assignation, Java effectue une conversion de type implicite. Le "
"dénominateur devient automatiquement de type ``double`` et le calcul est une "
"division de réels.  Pour Java, cette assignation équivaut en fait à .. code-"
"block:: java\n"
"\n"
" f=((double) 125) / ((double) 40+10.0));\n"
msgstr ""

#. name, q5, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   f=125/(double) (40+10);\n"
msgstr ""

#. name, q5, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"Dans cette assignation, le dénominateur est obligatoirement un ``double``. "
"La division est donc une division entre nombres réels.\n"
msgstr ""

#. name, q5, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   f=125.0 / (40.0+10.0);\n"
msgstr ""

#. name, q5, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"Dans cette assignation, le numérateur et le dénominateur sont de type "
"``double``. La division est donc une division entre nombres réels.\n"
msgstr ""

#. name, q6, name
#: m04_qcm/task.yaml
msgid "Chaînes de caractères"
msgstr ""

#. name, q6, header
#: m04_qcm/task.yaml
msgid ""
"\n"
"Considérons le code Java ci-dessous qui déclare et initialise des chaînes de "
"caractères.\n"
"\n"
".. code-block:: java\n"
"\n"
" String s1=\"abcdefghijklmnopqrstuvwxyz\";\n"
"\n"
"Laquelle des séquences d'instructions ci-dessous affiche-t-elle ``OK`` à "
"l'écran ?\n"
msgstr ""

#. name, q6, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  char c=s1.charAt(5);\n"
"  if(c=='f') {\n"
"     System.out.println(\"OK\");\n"
"  }\n"
msgstr ""

#. name, q6, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"Voir http://docs.oracle.com/javase/7/docs/api/java/lang/String."
"html#charAt(int) pour la documentation de la méthode ``charAt``.\n"
msgstr ""

#. name, q6, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  char c=s1.charAt(0);\n"
"  if(c=='a') {\n"
"     System.out.println(\"OK\");\n"
"  }\n"
msgstr ""

#. name, q6, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  char c=s1.charAt(s1.length()-1);\n"
"  if(c=='z') {\n"
"     System.out.println(\"OK\");\n"
"  }\n"
msgstr ""

#. name, q6, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  char c=s1.charAt(4);\n"
"  if(c=='f') {\n"
"     System.out.println(\"OK\");\n"
"  }\n"
msgstr ""

#. name, q6, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"En Java, les caractères d'un chaîne de caractères sont numérotés à partir de "
"l'indice ``0``. L'indice ``4`` de la chaîne de caractères ``s1`` correspond "
"donc au caractère ``e``. Voir http://docs.oracle.com/javase/7/docs/api/java/"
"lang/String.html#charAt(int) pour la documentation de la méthode "
"``charAt``.\n"
msgstr ""

#. name, q6, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  char c=s1.charAt(6);\n"
"  if(c=='f') {\n"
"     System.out.println(\"OK\");\n"
"  }\n"
msgstr ""

#. name, q6, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"En Java, les caractères d'un chaîne de caractères sont numérotés à partir de "
"l'indice ``0``. L'indice ``6`` de la chaîne de caractères ``s1`` correspond "
"donc au caractère ``g``. Voir http://docs.oracle.com/javase/7/docs/api/java/"
"lang/String.html#charAt(int) pour la documentation de la méthode "
"``charAt``.\n"
msgstr ""

#. name, q6, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  char c=s1.charAt(1);\n"
"  if(c=='a') {\n"
"     System.out.println(\"OK\");\n"
"  }\n"
msgstr ""

#. name, q6, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"En Java, les caractères d'un chaîne de caractères sont numérotés à partir de "
"l'indice ``0``. L'indice ``1`` de la chaîne de caractères ``s1`` correspond "
"donc au caractère ``b``. Voir http://docs.oracle.com/javase/7/docs/api/java/"
"lang/String.html#charAt(int) pour la documentation de la méthode "
"``charAt``.\n"
msgstr ""

#. name, q6, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  char c=s1.charAt(s1.length());\n"
"  if(c=='z') {\n"
"     System.out.println(\"OK\");\n"
"  }\n"
msgstr ""

#. name, q6, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"En Java, les caractères d'un chaîne de caractères sont numérotés à partir de "
"l'indice ``0``. ``s1.length()`` est le nombre de caractères dans la chaîne "
"``s1``.  Le dernier caractère de cette chaîne a donc l'indice ``s1."
"length()-1``. Il n'y a pas de caractère à la position ``s1.length()``. Voir "
"http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#charAt(int) "
"pour la documentation de la méthode ``charAt``.\n"
msgstr ""

#. name, q7, name
#: m04_qcm/task.yaml
msgid "Extraction de chaînes de caractères"
msgstr ""

#. name, q7, header
#: m04_qcm/task.yaml
msgid ""
"\n"
"Dans la classe ``String``, la méthode ``substring`` est une méthode efficace "
"pour extraire une sous-chaîne d'une chaîne de caractères. En vous basant sur "
"la description de ``substring`` dans le livre et dans la documentation Java "
"http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/String.html, lequel "
"des fragments de code ci-dessous affiche-t-il la chaîne ``OK`` à l'écran ?\n"
msgstr ""

#. name, q7, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  String s1=\"OOOO\";\n"
"  String s2=\"KKKK\";\n"
"  String s3=s1+s2;\n"
"  System.out.println(s3.substring(3,5));\n"
msgstr ""

#. name, q7, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  String s1=\"KOKOKO\";\n"
"  String s3=s1+s1;\n"
"  System.out.println(s3.substring(5,7));\n"
msgstr ""

#. name, q7, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  String s1=\"OOOO\";\n"
"  String s2=\"KKKK\";\n"
"  String s3=s1+s2;\n"
"  System.out.println(s1.substring(4,2));\n"
msgstr ""

#. name, q7, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"La chaîne de caractère ``s1`` ne contient que ``OOOO``. Il n'existe pas de "
"caractère à l'indice ``4`` dans cette chaîne.\n"
msgstr ""

#. name, q7, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  String s1=\"OKOKO\";\n"
"  String s2=\"OKOKO\";\n"
"  String s3=s1+s2;\n"
"  System.out.println(s3.substring(4,2));\n"
msgstr ""

#. name, q7, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"La chaîne ``s3`` contient ``OKOKOOKOKO``. La chaîne de caractères extraite "
"est donc ``OO``.\n"
msgstr ""

#. name, q8, name
#: m04_qcm/task.yaml
msgid "Méthode indexOf"
msgstr ""

#. name, q8, header
#: m04_qcm/task.yaml
msgid ""
"\n"
"En Java, la méthode ``indexOf`` peut être utilisée pour déterminer si une "
"chaîne de caractères est comprise dans une autre chaîne de caractères. "
"Considérons les déclarations suivantes\n"
"\n"
".. code-block:: java\n"
"\n"
" String s1=\"abcdef\";\n"
" String s2=\"mnopq\";\n"
" String s3=\"abcdefijklmnopqrstuvwxyz\";\n"
"\n"
"Laquelle des séquences d'instructions ci-dessous affiche ``OK`` à l'écran ?\n"
msgstr ""

#. name, q8, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  if(s3.indexOf(s2)>=0) {\n"
"     System.out.println(\"OK\");\n"
"  }\n"
msgstr ""

#. name, q8, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  if(s3.indexOf(s1)>=0) {\n"
"     System.out.println(\"OK\");\n"
"  }\n"
msgstr ""

#. name, q8, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  if(s1.indexOf(s2)>=0) {\n"
"     System.out.println(\"OK\");\n"
"  }\n"
msgstr ""

#. name, q8, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"Dans ce code, la méthode ``indexOf`` est appliquée à la chaîne de caractères "
"``s1`` et prend comme argument la chaîne de caractères ``s2``. Elle "
"détermine donc si la chaîne ``s2`` est une sous-chaîne de ``s1``. Comme ce "
"n'est pas le cas, elle retourne donc ``-1``.\n"
msgstr ""

#. name, q8, text
#: m04_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"  if(s2.indexOf(s3)>=0) {\n"
"     System.out.println(\"OK\");\n"
"  }\n"
msgstr ""

#. name, q8, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"Dans ce code, la méthode ``indexOf`` est appliquée à la chaîne de caractères "
"``s2`` et prend comme argument la chaîne de caractères ``s3``. Elle "
"détermine donc si la chaîne ``s3`` est une sous-chaîne de ``s2``. Comme ce "
"n'est pas le cas, elle retourne donc ``-1``.\n"
msgstr ""

#. name, q9, name
#: m04_qcm/task.yaml
msgid "Méthodes de la classe String"
msgstr ""

#. name, q9, header
#: m04_qcm/task.yaml
msgid ""
"\n"
"La classe ``String`` contient de nombreuses méthodes utiles de manipulation "
"des chaînes de caractères. Certains retournent un booléen, d'autres "
"retournent un caractère, d'autres encore retourne un ``String``. En "
"considérant les déclarations ci-dessous, quelle est la suite d'affirmations "
"ci-dessous qui est vraie ?\n"
"\n"
".. code-block:: java\n"
"\n"
" String s1=\"abcdef\";\n"
" String s2=\"mnopq\";\n"
" String s3=\"abcdefijklmnopqrstuvwxyz\";\n"
msgstr ""

#. name, q9, text
#: m04_qcm/task.yaml
msgid ""
"``s1.equalsIgnoreCase(s2)`` est un booléen, ``s1.charAt(2)`` est un "
"caractère et ``s3.indexOf(s2)`` est un entier\n"
msgstr ""

#. name, q9, text
#: m04_qcm/task.yaml
msgid ""
"``s1.equalsIgnoreCase(s2)`` est un booléen, ``s2.length()`` est un entier et "
"``s1.substring(1,2)`` est une chaîne de caractères\n"
msgstr ""

#. name, q9, text
#: m04_qcm/task.yaml
msgid ""
"``s2.equalsIgnoreCase(s3)`` est un booléen, ``s3.length()`` est un caractère "
"et ``s2.indexOf(s3)`` est un entier\n"
msgstr ""

#. name, q9, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"La méthode ``length`` retourne la longueur de la chaîne de caractère sur "
"laquelle elle s'applique. Cette valeur est un entier.\n"
msgstr ""

#. name, q9, text
#: m04_qcm/task.yaml
msgid ""
"``s2.equalsIgnoreCase(s2)`` est un booléen, ``s3.indexOf(s2)`` est un "
"caractère et ``s2.substring(1,2)`` une chaîne de caractères\n"
msgstr ""

#. name, q9, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"La méthode ``indexOf`` retourne un entier et non un caractère.\n"
msgstr ""

#. name, q9, text
#: m04_qcm/task.yaml
msgid ""
"``s1.equalsIgnoreCase(s2)`` affiche ``true`` ou ``false``, ``s3."
"indexOf(s2)`` est entier et ``s2.substring(1,2)`` une chaîne de caractères\n"
msgstr ""

#. name, q9, feedback
#: m04_qcm/task.yaml
msgid ""
"\n"
"La méthode ``equalsIgnoreCase`` retourne un booléen, elle n'affiche rien.\n"
msgstr ""

#. context
#: m04dem1/task.yaml
msgid ""
"La classe ``Character`` de l'API Java (https://docs.oracle.com/javase/8/docs/"
"api/java/lang/Character.html) contient un bon nombre de méthodes qui "
"pourront vous être utiles pour manipuler des caractères. Avec ces exercices, "
"vous serez un peu plus familiers avec certaines méthodes qui vous seront "
"certainement utiles dans le futur.\n"
"\n"
"\n"
".. code-block:: java\n"
"\n"
"    char c = // un caractère, représentant un chiffre ou non\n"
"    char d = // un caractère de a à z, en majuscule ou non\n"
"    boolean b; // à assigner dans la Question 1\n"
"    char e;    // à assigner dans la Question 2\n"
msgstr ""

#. name
#: m04dem1/task.yaml
msgid "Mission 4 : Questions de démarrage 1 : La classe Character"
msgstr ""

#. name, q1, header
#: m04dem1/task.yaml
msgid ""
"En utilisant l'API Java de la classe Character, assignez à la variable "
"booléenne b la valeur true si la variable c contient un caractère "
"représentant un chiffre, et la valeur false sinon. Répondez à cette question "
"en une seule ligne.\n"
msgstr ""

#. name, q2, header
#: m04dem1/task.yaml
msgid ""
"Toujours en utilisant l'API Java de la classe Character, assignez à la "
"variable e le caractère en majuscule correspondant au caractère contenu dans "
"la variable d. Répondez à cette question en une seule ligne."
msgstr ""

#. context
#: m04dem2/task.yaml
msgid ""
"En java, on retrouve des types de variables primitifs comme ``int``, "
"``char``, ``double``, qui commencent par une minuscule, mais aussi des "
"objets, dont les ``String`` font partie. Cependant, les ``String`` sont des "
"objets un peu particuliers qui permettent certaines opérations qui les "
"différencient des objets, comme la concaténation des ``String``. La "
"concaténation de deux ``String`` consiste à former un nouveau ``String`` qui "
"contient le contenu du premier et du deuxième mis bout à bout. Ainsi, "
"concaténer le ``String`` ``\"Harry\"`` et le ``String`` ``\"gateau\"`` nous "
"donne le ``String`` ``\"Harrygateau\"``.\n"
"\n"
"Nous allons maintenant vous demander d'implémenter le corps de la méthode "
"``cat``, qui permet de renvoyer la concaténation de deux ``String``, ``s1`` "
"et ``s2``. Voici les signatures de la méthode ``cat``. Veillez bien à "
"respecter scrupuleusement les spécifications\n"
"\n"
".. code-block :: java\n"
"\n"
"    /**\n"
"     *    @pre -\n"
"     *    @post Retourne la concaténation de s1 et s2.\n"
"     */\n"
"    public static String cat(String s1, String s2) {\n"
"        // À compléter\n"
"    }\n"
"\n"
"    /**\n"
"     *    @pre -\n"
"     *    @post Retourne la concaténation de s1 et c.\n"
"     */\n"
"    public static String cat(String s1, char c) {\n"
"        // À compléter\n"
"    }"
msgstr ""

#. name
#: m04dem2/task.yaml
msgid "Mission 4 : Question de démarrage 2 : Concaténation"
msgstr ""

#. name, q1, name
#: m04dem2/task.yaml
msgid "La méthode cat avec deux Strings"
msgstr ""

#. name, q1, header
#: m04dem2/task.yaml
msgid ""
"Veuillez écrire le corps de la méthode cat servant à concaténer deux Strings "
"s1 et s2. Veillez bien à écrire le corps uniquement. N'oubliez pas "
"l'instruction return."
msgstr ""

#. name, q2, name
#: m04dem2/task.yaml
msgid "La méthode cat avec un String et un caractère"
msgstr ""

#. name, q2, header
#: m04dem2/task.yaml
msgid ""
"Veuillez maintenant implémenter la méthode cat servant à concaténer un "
"String et un char. Veillez bien à écrire le corps uniquement. N'oubliez pas "
"l'instruction return."
msgstr ""

#. context
#: m04dem3/task.yaml
msgid ""
"Comme dit précédemment, le type ``String`` est un type quelque peu "
"particulier en Java. Pour faire des opérations sur des ``String``, on a très "
"souvent besoin de leur longueur. En vous référant à l'API Java de la classe "
"``String`` (http://docs.oracle.com/javase/7/docs/api/java/lang/String.html), "
"écrivez en une seule ligne le corps de la méthode ``showLength()``, qui "
"affiche sur la sortie standard la longueur de l'argument ``s``. La méthode "
"doit être implémenté de sorte que lorsqu'on l'appelle trois fois de suite "
"avec comme argument ``\"Popol\"``, ``\"Jeanjean\"`` et ``\"abc\"``, de "
"longueurs 5, 8 et 3, on retrouve la sortie standard dans cet état :\n"
"\n"
"::\n"
"\n"
"    5\n"
"    8\n"
"    3\n"
"\n"
"Voici la signature de la méthode ``showLength()``. Veillez à bien respecter "
"les spécifications :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post affiche la longueur de s sur la sortie standard\n"
"     */\n"
"     public static void showLength(String s) {\n"
"         // à compléter\n"
"     }\n"
msgstr ""

#. name
#: m04dem3/task.yaml
msgid "Mission 4 : Question de démarrage 3 : Longueur d'un String"
msgstr ""

#. name, q1, name
#: m04dem3/task.yaml
msgid "Le corps de la méthode showLength"
msgstr ""

#. name, q1, header
#: m04dem3/task.yaml
msgid "Écrivez ici le corps de la méthode showLength :"
msgstr ""

#. context
#: m04dem4/task.yaml
msgid ""
"Il est parfois utile de s'assurer qu'un String est en majuscule. La méthode "
"``Character.toUpperCase()`` de la classe ``Character`` de l'API Java permet "
"de récupérer la majuscule d'un caractère qu'on lui passe en argument. En "
"utilisant cette méthode, implémentez la méthode ``toUpper`` qui retourne un "
"``String`` identique à celui passé en argument, mais en majuscule. Attention "
"à ne pas utiliser une autre méthode que ``Character.toUpperCase()``.\n"
"\n"
"Voici la signature de la méthode ``toUpper`` à implémenter. Respectez bien "
"les spécifications :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     *    @pre  s non vide\n"
"     *    @post retourne s en majuscules\n"
"     */\n"
"     public static String toUpper(String s) {\n"
"         // À implémenter\n"
"     }\n"
"\n"
msgstr ""

#. name
#: m04dem4/task.yaml
msgid "Mission 4 : Question de démarrage 4 : toUpper"
msgstr ""

#. name, q1, name
#: m04dem4/task.yaml
msgid "Méthode toUpper"
msgstr ""

#. name, q1, header
#: m04dem4/task.yaml
msgid ""
"Implémentez ici le corps de la méthode toUpper. Veillez bien à n'implémenter "
"que le corps, ne recopiez pas la signature."
msgstr ""

#. context
#: m04dem5/task.yaml
msgid ""
"Écrivez le corps de la méthode de la méthode ``containsChar()`` qui prend "
"deux arguments, ``s1`` et ``s2``, et qui vérifie si tous les caractères "
"présents dans ``s1`` sont aussi présents dans ``s2``. Si c'est le cas, la "
"méthode retourne ``true``. Le cas des ``String`` vides ne doit pas être "
"géré.\n"
"\n"
"Voici les spécifications de la méthode ``containsChar()`` :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /**\n"
"     *    @pre  s1 et s2 non-vides\n"
"     *    @post Retourne true si s1 contient uniquement des\n"
"     *          caractères qui sont aussi dans s2.\n"
"     *          Retourne false sinon.\n"
"     */\n"
"     public static boolean containsChar(String s1, String s2){\n"
"             // À implémenter\n"
"     }"
msgstr ""

#. name
#: m04dem5/task.yaml
msgid "Mission 4 : Question de démarrage 5 : La méthode containsChar()"
msgstr ""

#. name, q1, name
#: m04dem5/task.yaml
msgid "Méthode containsChar()"
msgstr ""

#. name, q1, header
#: m04dem5/task.yaml
msgid ""
"Implémentez ici le corps de la méthode containsChar(). Vérifiez bien les "
"spécifications. Veillez à n'implémenter que le corps, ne recopiez pas sa "
"signature"
msgstr ""

#. name, q2, name
#: m04dem5/task.yaml
msgid "Méthode auxiliaires"
msgstr ""

#. name, q2, header
#: m04dem5/task.yaml
msgid ""
"Si vous souhaitez diviser ce problème en sous-problèmes, définissez ici les "
"méthodes que vous allez utiliser dans la méthode containsChar(). Vous n'êtes "
"pas obligé d'en définir."
msgstr ""

#. context
#: m04real/task.yaml
msgid ""
"Vous pouvez soumettre ici ou via BlueJ votre phase de réalisation pour la "
"mission 4.\n"
"\n"
"Vous attendons une archive **.zip** contenant uniquement les fichiers :\n"
"\n"
"- BioInfo.java\n"
"- README.txt"
msgstr ""

#. name
#: m04real/task.yaml
msgid "Mission 4: Phase de réalisation: Soumission"
msgstr ""

#. name, q1, name
#: m04real/task.yaml
msgid "Phase de réalisation de la Mission 4"
msgstr ""

#. author
#: m05Q1/task.yaml m05Q4/task.yaml m05Q9/task.yaml
msgid "Ludovic TAFFIN, Olivier MARTIN"
msgstr ""

#. context
#: m05Q1/task.yaml
msgid ""
"Ecrivez la méthode ``boolean allSame(double [] v)`` qui retourne vrai si "
"tous les éléments du tableau ont la même valeur, false sinon.\n"
"la spécification est :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     * @pre v != null, v contient au moins 2 éléments\n"
"     * @post retourne vrai si tous les éléments du tableau ont la même "
"valeur, false sinon\n"
"     */"
msgstr ""

#. name
#: m05Q1/task.yaml
msgid "Mission 5 : Q* : Tous la même valeur"
msgstr ""

#. name, q1, name
#: m05Q1/task.yaml
msgid "Tous égaux"
msgstr ""

#. context
#: m05Q10/task.yaml
msgid ""
"Ecrivez la méthode ``double[] somme(double[] a, double[] b)`` qui retourne "
"un tableau dont chaque élément est la somme des éléments des tableaux a et b "
"au même indice.\n"
"la spécification est :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     * @pre a != null, b != null, a.length == b.lenght\n"
"     * @post retourne un tableau dont chaque élément est la somme des "
"éléments\n"
"     *       des tableaux a et b au même indice\n"
"     */"
msgstr ""

#. name
#: m05Q10/task.yaml
msgid "Mission 5 : Q** : Somme"
msgstr ""

#. name, q1, name
#. name, q2, name
#: m05Q10/task.yaml m05dem5/task.yaml
msgid "Somme"
msgstr ""

#. context
#: m05Q11/task.yaml
msgid ""
"Ecrivez la méthode ``int[] top(int n, int[] v)`` qui retourne un tableau de "
"longueur ``n`` dont les éléments sont dans l'ordre croissant et qui contient "
"les ``n`` plus grands entiers du tableau ``v`` .\n"
"\n"
"Par exemple :\n"
"\n"
"- ``top(3, {5,0,4,1,2})`` doit retourner ``{2,4,5}``\n"
"- ``top(1, {5,3})`` doit retourner ``{3}``\n"
"- ``top(2, {5,1,3})`` doit retourner ``{3,5}``\n"
"\n"
"La spécification est :\n"
"\n"
".. code-block:: java\n"
"\n"
"     /*\n"
"      * @pre v != null, n < v.length\n"
"      * @post retourne un tableau de longueur n\n"
"      *       dont les éléments sont dans l'ordre croissant\n"
"      *       et qui contient les n plus grands entiers du tableau v\n"
"      */"
msgstr ""

#. name
#: m05Q11/task.yaml
msgid "Mission 5 : Q*** : Top"
msgstr ""

#. name, q1, name
#: m05Q11/task.yaml
msgid "Top"
msgstr ""

#. context
#: m05Q12/task.yaml
msgid ""
"Ecrivez les méthodes ``oppose`` et ``oppose2`` dont les spécifications et "
"signatures sont :\n"
"\n"
".. code-block :: java\n"
"\n"
"    /*\n"
"     * @pre v != null\n"
"     * @post retourne un tableau de même longueur que v et dont tous les\n"
"     *       éléments ont la valeur opposée de ceux de v\n"
"     */\n"
"    public static int[] oppose(int[] v)\n"
"\n"
"    /*\n"
"     * @pre v != null\n"
"     * @post modifie le tableau v et remplace chaque élément de v par son "
"opposé\n"
"     */\n"
"    public static void oppose2(int[] v)\n"
"\n"
msgstr ""

#. name
#: m05Q12/task.yaml
msgid "Mission 5 : Q* : Oppose"
msgstr ""

#. name, q1, header
#: m05Q12/task.yaml
msgid ""
"Ecrivez une première version de oppose qui permet de retourner l'opposé du "
"tableau v, c'est-à-dire un tableau de même longueur que v et dont tous les "
"éléments sont l'opposé de l'élément correspondant du tableau v"
msgstr ""

#. name, q2, header
#: m05Q12/task.yaml
msgid ""
"Ecrivez une deuxième version de oppose qui permet de modifier le tableau v, "
"afin que ce dernier contienne l'opposé des éléments qu'il contient."
msgstr ""

#. context
#: m05Q2/task.yaml
msgid ""
"Ecrivez la méthode ``double max(double[] v)`` qui retourne le maximum du "
"tableau de réels v.\n"
"la spécification est :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     * @pre v != null\n"
"     * @post retourne le maximum du tableau de réels v\n"
"     */"
msgstr ""

#. name
#: m05Q2/task.yaml
msgid "Mission 5 : Q* : Valeur max du tableau"
msgstr ""

#. name, q1, name
#: m05Q2/task.yaml
msgid "Max"
msgstr ""

#. context
#: m05Q3/task.yaml
msgid ""
"Ecrivez la méthode ``double mean(double[] v)`` qui retourne la moyenne "
"arithmétique du tableau de réels v.\n"
"la spécification est :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     * @pre v != null\n"
"     * @post retourne la moyenne arithmétique du tableau de réels v\n"
"     */"
msgstr ""

#. name
#: m05Q3/task.yaml
msgid "Mission 5 : Q* : Valeur moyenne du tableau"
msgstr ""

#. name, q1, name
#: m05Q3/task.yaml
msgid "Mean"
msgstr ""

#. context
#: m05Q4/task.yaml
msgid ""
"Ecrivez la méthode ``boolean croissant(int[] t)`` qui retourne true si les "
"éléments du tableau ``t`` sont croissants, false sinon.\n"
"la spécification est :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     * @pre t != null\n"
"     * @post retourne true si les éléments du tableau t sont croissants, "
"false sinon\n"
"     */"
msgstr ""

#. name
#: m05Q4/task.yaml
msgid "Mission 5 : Q* : Tableau croissant"
msgstr ""

#. name, q1, name
#: m05Q4/task.yaml
msgid "Croissant"
msgstr ""

#. context
#: m05Q5/task.yaml
msgid ""
"Ecrivez la méthode ``double[] initVector(int n, double i)`` qui retourne un "
"vecteur de n éléments tous initialisés à la valeur i.\n"
"la spécification est :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     * @pre n > 0\n"
"     * @post retourne un vecteur de n éléments tous initialisés à la valeur "
"i\n"
"     */"
msgstr ""

#. name
#: m05Q5/task.yaml
msgid "Mission 5 : Q** : Vecteur"
msgstr ""

#. name, q1, name
#: m05Q5/task.yaml
msgid "Vecteur"
msgstr ""

#. context
#: m05Q6/task.yaml
msgid ""
"Ecrivez la méthode ``double[][] matriceIdentite(int n)`` qui retourne la "
"matrice identité de taille n×n.\n"
"la spécification est :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     * @pre n > 0\n"
"     * @post retourne la matrice identité de taille n×n\n"
"     */"
msgstr ""

#. name
#: m05Q6/task.yaml
msgid "Mission 5 : Q** : Matrice identité"
msgstr ""

#. name, q1, name
#: m05Q6/task.yaml
msgid "Matrice identité"
msgstr ""

#. context
#: m05Q7/task.yaml
msgid ""
"Ecrivez la méthode ``int count(int v, int[][] m)`` qui compte le nombre "
"d'occurences de la valeur ``v`` dans ``int[][] m``.\n"
"la spécification est :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     * @pre m != null\n"
"     * @post compte le nombre d'occurences de la valeur v dans int[][] m\n"
"     */"
msgstr ""

#. name
#: m05Q7/task.yaml
msgid "Mission 5 : Q** : Count"
msgstr ""

#. name, q1, name
#: m05Q7/task.yaml
msgid "Count"
msgstr ""

#. context
#: m05Q8/task.yaml
msgid ""
"Ecrivez la méthode ``void replace(int v, int w, int[][] m)`` qui remplace "
"toutes les d'occurences de la valeur ``v`` dans ``int[][] m`` par la valeur "
"``w``. la spécification est :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     * @pre m != null\n"
"     * @post remplace toutes les d'occurences de la valeur v\n"
"     *       dans le tableau int[][] m par la valeur w.\n"
"     *       Modifie la matrice m.\n"
"     */"
msgstr ""

#. name
#: m05Q8/task.yaml
msgid "Mission 5: Q** : replace"
msgstr ""

#. name, q1, name
#: m05Q8/task.yaml
msgid "replace"
msgstr ""

#. context
#: m05Q9/task.yaml
msgid ""
"Ecrivez la méthode ``void decaleDroite(char[] v)`` qui modifie le tableau "
"``v`` en décalant tous les caractères d'une position vers la droite et "
"``v[0]`` a été mis à la valeur ``*`` (étoile).\n"
"Par exemple, si ``v = ['a', 'b', 'c']``, le résultat attendu est ``['*', "
"'a', 'b']``. La spécification est :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     * @pre v != null\n"
"     * @post Modifie le tableau v en décalant tous les caractères\n"
"     *       d'une position vers la droite\n"
"     *       et v[0] est mis à la valeur '*' (étoile)\n"
"     */"
msgstr ""

#. name
#: m05Q9/task.yaml
msgid "Mission 5 : Q** : Decale"
msgstr ""

#. name, q1, name
#: m05Q9/task.yaml
msgid "decale"
msgstr ""

#. context
#: m05_bf/task.yaml
msgid ""
"Dans cette question de bilan final, on va s'intéresser à l'écriture de "
"méthodes dont le but est de modifier les éléments d'un tableau passé en "
"paramètre. Le but de ces méthodes est de déplacer tous les éléments du "
"tableau d'un certain nombre de cases vers la droite.\n"
"\n"
"Commençons par la méthode ``rotateRightOne``. Elle va décaler tous les "
"éléments du tableau passé en paramètre, d'une case vers la droite. Voici sa "
"spécification précise :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     * @pre tab != null\n"
"     * @post Le tableau tab a été modifié et tous ses éléments sont décalés\n"
"     *       d'une position vers la droite (le dernier élément revenant\n"
"     *       en première position)\n"
"     */\n"
"     public static void rotateRightOne(int[] tab) {\n"
"         // Question 1\n"
"     }\n"
"\n"
"Ensuite, vous devez écrire une méthode ``rotateRight`` qui déplace tous les "
"éléments d'un tableau, vers la droite, d'un certain nombre ``n`` de "
"positions. Voici sa spécification précise :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     * @pre tab != null\n"
"     * @post Le tableau tab a été modifié et tous ses éléments sont décalés\n"
"     *       de n positions vers la droite, c'est-à-dire que les éléments\n"
"     *       qui se trouvaient en i se retrouvent en (i + n) % tab.length\n"
"     */\n"
"    public static void rotateRight(int[] tab, int n) {\n"
"        // Question 2\n"
"    }\n"
"\n"
"N'oubliez pas d'éviter la duplication de code, et d'éventuellement "
"réutiliser l'une des deux méthodes dans l'autre."
msgstr ""

#. name
#: m05_bf/task.yaml
msgid "Mission 5(a) : Question de Bilan Final"
msgstr ""

#. name, q1, name
#: m05_bf/task.yaml
msgid "RotateRightOne"
msgstr ""

#. name, q1, header
#: m05_bf/task.yaml
msgid ""
"Complétez ici le corps de la méthode ``rotateRightOne`` dont la "
"spécification est donnée dans l'énoncé.\n"
msgstr ""

#. name, q2, name
#: m05_bf/task.yaml
msgid "RotateRightN"
msgstr ""

#. name, q2, header
#: m05_bf/task.yaml
msgid ""
"Complétez ici le corps de la méthode ``rotateRight`` dont la spécification "
"est donnée dans l'énoncé.\n"
msgstr ""

#. context
#: m05_qcm/task.yaml
msgid ""
"===================\n"
"Mission 5. Tableaux\n"
"===================\n"
"\n"
"\n"
"Ces questions supposent que vous avez lu les sections suivantes du livre de "
"référence |jn|_\n"
"\n"
" - |jn2|_\n"
"\n"
"  - |jn2.5|_\n"
"\n"
"    - |jn2.5.7|_\n"
"\n"
" - |jn7|_\n"
"\n"
"  - |jn7.1|_\n"
"\n"
"    - |jn7.1.1|_\n"
"    - |jn7.1.2|_\n"
"    - |jn7.1.3|_\n"
"\n"
"  - |jn7.2|_\n"
"\n"
"    - |jn7.2.1|_\n"
"    - |jn7.2.3|_\n"
"    - |jn7.2.4|_\n"
"    - |jn7.2.6|_\n"
"\n"
"  - |jn7.4|_\n"
"\n"
"    - |jn7.4.1|_\n"
"\n"
"  - |jn7.5|_\n"
"\n"
"    - |jn7.5.1|_\n"
"    - |jn7.5.2|_\n"
"\n"
" - |jn8|_\n"
"\n"
"  - |jn8.4|_\n"
"\n"
"    - |jn8.4.1|_\n"
"\n"
"\n"
"Les sections vues précédemment restent bien entendu d'actualité.\n"
"\n"
"\n"
".. _jn: http://math.hws.edu/javanotes/\n"
".. |jn| replace:: JavaNotes\n"
"\n"
".. _jn2 : http://math.hws.edu/javanotes/c2/index.html\n"
".. |jn2| replace:: `2 : Programming in the Small I: Names and Things`\n"
"\n"
".. _jn2.5 : http://math.hws.edu/javanotes/c2/s5.html\n"
".. |jn2.5| replace:: `2.5 : Details of Expressions`\n"
"\n"
".. _jn2.5.7: http://math.hws.edu/javanotes/c2/s5.html#basics.5.7\n"
".. |jn2.5.7| replace:: `2.5.7 : Type Conversion of Strings`\n"
"\n"
".. _jn7 : http://math.hws.edu/javanotes/c7/index.html\n"
".. |jn7| replace:: `7 : Arrays`\n"
"\n"
".. _jn7.1 : http://math.hws.edu/javanotes/c7/s1.html\n"
".. |jn7.1| replace:: `7.1 : Creating and Using Arrays`\n"
"\n"
".. _jn7.1.1 : http://math.hws.edu/javanotes/c7/s1.html#arrays.1.1\n"
".. |jn7.1.1| replace:: `7.1.1 : Arrays`\n"
"\n"
".. _jn7.1.2 : http://math.hws.edu/javanotes/c7/s1.html#arrays.1.2\n"
".. |jn7.1.2| replace:: `7.1.2 : Using Arrays`\n"
"\n"
".. _jn7.1.3 : http://math.hws.edu/javanotes/c7/s1.html#arrays.1.3\n"
".. |jn7.1.3| replace:: `7.1.3 : Array Initialization`\n"
"\n"
".. _jn7.2 : http://math.hws.edu/javanotes/c7/s2.html\n"
".. |jn7.2| replace:: `7.2 : Programming  With Arrays`\n"
"\n"
".. _jn7.2.1 : http://math.hws.edu/javanotes/c7/s2.html#arrays.2.1\n"
".. |jn7.2.1| replace:: `7.2.1 : Arrays and for Loops`\n"
"\n"
".. _jn7.2.3 : http://math.hws.edu/javanotes/c7/s2.html#arrays.2.3\n"
".. |jn7.2.3| replace:: `7.2.3 : Array Types in Subroutines`\n"
"\n"
".. _jn7.2.4 : http://math.hws.edu/javanotes/c7/s2.html#arrays.2.4\n"
".. |jn7.2.4| replace:: `7.2.4 : Random Access`\n"
"\n"
".. _jn7.2.6 : http://math.hws.edu/javanotes/c7/s2.html#arrays.2.6\n"
".. |jn7.2.6| replace:: `7.2.6 : Variable Arity Methods`\n"
"\n"
".. _jn7.4 : http://math.hws.edu/javanotes/c7/s4.html\n"
".. |jn7.4| replace:: `7.4 : Searching and Sorting`\n"
"\n"
".. _jn7.4.1 : http://math.hws.edu/javanotes/c7/s4.html#arrays.4.1\n"
".. |jn7.4.1| replace:: `7.4.1 : Searching`\n"
"\n"
".. _jn7.5 : http://math.hws.edu/javanotes/c7/s5.html\n"
".. |jn7.5| replace:: `7.5 : Multi-dimensional Arrays`\n"
"\n"
".. _jn7.5.1 : http://math.hws.edu/javanotes/c7/s5.html#arrays.5.1\n"
".. |jn7.5.1| replace:: `7.5.1 : Creating Two-dimensional Arrays`\n"
"\n"
".. _jn7.5.2 : http://math.hws.edu/javanotes/c7/s5.html#arrays.5.2\n"
".. |jn7.5.2| replace:: `7.5.2 : Using Two-dimensional Arrays`\n"
"\n"
".. _jn8 : http://math.hws.edu/javanotes/c8/index.html\n"
".. |jn8| replace:: `8 : Correctness, Robustness, Efficiency`\n"
"\n"
".. _jn8.4 : http://math.hws.edu/javanotes/c8/s4.html\n"
".. |jn8.4| replace:: `8.4 : Assertions and Annotations`\n"
"\n"
".. _jn8.4.1 : http://math.hws.edu/javanotes/c8/s4.html#robustness.4.1\n"
".. |jn8.4.1| replace:: `8.4.1 : Assertions`\n"
msgstr ""

#. name
#: m05_qcm/task.yaml
msgid "Mission 5: QCM"
msgstr ""

#. name, q1, name
#: m05_qcm/task.yaml
msgid "Déclaration de tableaux"
msgstr ""

#. name, q1, header
#: m05_qcm/task.yaml
msgid ""
"\n"
"Parmi les déclarations suivantes, quelle est celle qui permet de déclarer "
"correctement un tableau dont la référence est dénommée ``tab`` et qui peut "
"contenir 5 nombres entiers ?\n"
msgstr ""

#. name, q1, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   int[] tab=new int[5];\n"
msgstr ""

#. name, q1, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"C'est la déclaration la plus courante pour un tableau d'entiers. Notez que "
"cette ligne combine une déclaration (``int[] tab`` et la création du tableau "
"correspondant permettant de stocker 5 éléments de type ``int``.\n"
msgstr ""

#. name, q1, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   int[] tab;\n"
"   tab=new int[5];\n"
msgstr ""

#. name, q1, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"La première ligne déclare que ``tab`` est une référence vers un tableau "
"d'entiers. La deuxième ligne associe cette référence à un tableau permettant "
"de stocker 5 entiers.\n"
msgstr ""

#. name, q1, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    tab=int [5];\n"
msgstr ""

#. name, q1, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Cette ligne est incorrecte. ``tab`` n'a pas été déclaré préalablement et il "
"faut utiliser le mot clé ``new`` pour initialiser un tableau. Relisez |"
"jn7.1.3|_\n"
"\n"
" .. _jn7.1.3 : http://math.hws.edu/javanotes/c7/s1.html#arrays.1.3\n"
" .. |jn7.1.3| replace:: `7.1.3 : Array Initialization`\n"
msgstr ""

#. name, q1, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    tab=new int[5];\n"
msgstr ""

#. name, q1, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Cette ligne est incorrecte. ``tab`` n'a pas été déclaré préalablement. Il "
"faut faire précéder cette ligne d'une déclaration de ``tab``. Relisez |"
"jn7.1.3|_\n"
"\n"
" .. _jn7.1.3 : http://math.hws.edu/javanotes/c7/s1.html#arrays.1.3\n"
" .. |jn7.1.3| replace:: `7.1.3 : Array Initialization`\n"
msgstr ""

#. name, q1, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"\n"
"    int[] tab=new int[];\n"
msgstr ""

#. name, q1, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Cette ligne est incorrecte. Lorsque l'on initialise un tableau, il faut "
"spécifier le nombre d'éléments du tableau entre [] dans le membre de droite. "
"En Java, les tableaux ont une taille fixe qui est définie à leur création. "
"Relisez |jn7.1.3|_\n"
"\n"
" .. _jn7.1.3 : http://math.hws.edu/javanotes/c7/s1.html#arrays.1.3\n"
" .. |jn7.1.3| replace:: `7.1.3 : Array Initialization`\n"
msgstr ""

#. name, q1, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    int[5] tab=new int[];\n"
msgstr ""

#. name, q1, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    int tab[5]=new int[];\n"
msgstr ""

#. name, q1, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Cette ligne est incorrecte. Lorsque l'on initialise un tableau, il faut "
"spécifier le nombre d'éléments du tableau entre [] dans le membre de droite. "
"Relisez |jn7.1.3|_\n"
"\n"
"\n"
"\n"
" .. _jn7.1.3 : http://math.hws.edu/javanotes/c7/s1.html#arrays.1.3\n"
" .. |jn7.1.3| replace:: `7.1.3 : Array Initialization`\n"
msgstr ""

#. name, q10, name
#: m05_qcm/task.yaml
msgid "Somme de vecteurs"
msgstr ""

#. name, q10, header
#: m05_qcm/task.yaml
msgid ""
"\n"
"Considérons les tableaux ``a``, ``b`` et ``s`` déclarés comme indiqués ci-"
"dessous :\n"
"\n"
".. code-block:: java\n"
"\n"
"  int[] a=new int[20];\n"
"  int[] b=new int[20];\n"
"  int[] s=new int[20];\n"
"\n"
"\n"
"Supposons que ces tableaux servent à stocker des vecteurs (au sens "
"mathématique du terme). Laquelle des séquences d'instructions ci-dessous "
"place-t-elle dans le vecteur ``s`` la somme des vecteurs ``a`` et ``b``?\n"
msgstr ""

#. name, q10, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    for(int i=0; i<a.length;i++) {\n"
"     s[i]=a[i]+b[i];\n"
"    }\n"
msgstr ""

#. name, q10, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    for(int i=0; i<b.length;i++) {\n"
"     s[i]=a[i]+b[i];\n"
"    }\n"
msgstr ""

#. name, q10, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    for(int i=s.length-1; i>=0;i=i-1) {\n"
"     s[i]=a[i]+b[i];\n"
"    }\n"
msgstr ""

#. name, q10, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    s[]=a[]+b[];\n"
msgstr ""

#. name, q10, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Cette instruction est invalide en Java. Il est nécessaire d'utiliser une "
"boucle pour calculer cette somme.\n"
msgstr ""

#. name, q10, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    for(int i=0; i<=a.length;i++) {\n"
"     s[i]=a[i]+b[i];\n"
"    }\n"
msgstr ""

#. name, q10, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Cette boucle va provoquer une erreur à l'exécution lorsque ``i`` vaut ``a."
"length``. Voyez-vous pourquoi ?\n"
msgstr ""

#. name, q10, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    for(int i=0; i<=b.length;i++) {\n"
"     s[i]=a[i]+b[i];\n"
"    }\n"
msgstr ""

#. name, q10, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Cette boucle va provoquer une erreur à l'exécution lorsque ``i`` vaut ``b."
"length``. Voyez-vous pourquoi ?\n"
msgstr ""

#. name, q10, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    for(int i=s.length-1; i>0;i=i-1) {\n"
"     s[i]=a[i]+b[i];\n"
"    }\n"
msgstr ""

#. name, q10, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Cette boucle ne calculera pas la valeur de ``s[0]``. Voyez-vous pourquoi ?\n"
msgstr ""

#. name, q10, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    for(int i=s.length; i>=0;i=i-1) {\n"
"     s[i]=a[i]+b[i];\n"
"    }\n"
msgstr ""

#. name, q10, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Cette boucle va provoquer une erreur à l'exécution lorsque ``i`` vaut ``s."
"length``. Voyez-vous pourquoi ?\n"
msgstr ""

#. name, q11, name
#: m05_qcm/task.yaml
msgid "Tableaux de caractères"
msgstr ""

#. name, q11, header
#: m05_qcm/task.yaml
msgid ""
"\n"
"La semaine passée, vous avez écrit une méthode ``count`` permettant de "
"déterminer le nombre d'occurences d'un caractère dans un ``String``. Lequel "
"des corps ci-dessous est une implémentation correcte de la méthode ``isIn`` "
"dont la spécification est\n"
"\n"
".. code-block:: java\n"
"\n"
" /*\n"
"  * @pre chaîne s non vide\n"
"  * @post retourne true si le caractère c est présent dans la chaîne s\n"
"  *       et false sinon\n"
"  */\n"
" public static boolean isIn(char c, char[] s)\n"
msgstr ""

#. name, q11, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   for(int i=0;i<s.length;i++) {\n"
"     if(s[i]==c) {\n"
"        return true;\n"
"     }\n"
"   }\n"
"   return false;\n"
msgstr ""

#. name, q11, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   for(int i=s.length-1;i>=0;i=i-1) {\n"
"     if(s[i]==c) {\n"
"        return true;\n"
"     }\n"
"   }\n"
"   return false;\n"
msgstr ""

#. name, q11, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   for(int i=0;i<s.length();i++) {\n"
"     if(s[i]==c) {\n"
"        return true;\n"
"     }\n"
"   }\n"
"   return false;\n"
"\n"
msgstr ""

#. name, q11, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Le nombre d'éléments dans le tableau de caractère ``s`` est ``s.length`` et "
"non le résultat de l'application d'une méthode ``length()`` qui ne prend pas "
"de paramètre.\n"
msgstr ""

#. name, q11, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   for(int i=0;i<=s.length;i++) {\n"
"     if(s[i]==c) {\n"
"        return true;\n"
"     }\n"
"   }\n"
"   return false;\n"
msgstr ""

#. name, q11, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Nok\n"
msgstr ""

#. name, q11, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   for(int i=0;i<s.length();i++) {\n"
"     if(s[i]==c) {\n"
"        return true;\n"
"     }\n"
"     else {\n"
"        return false;\n"
"     }\n"
"   }\n"
msgstr ""

#. name, q11, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Que fait cette méthode après avoir comparé ``c`` avec l'élément ``s[0]`` ?\n"
msgstr ""

#. name, q12, name
#: m05_qcm/task.yaml
msgid "toCharArray"
msgstr ""

#. name, q12, header
#: m05_qcm/task.yaml
msgid ""
"\n"
"\n"
"La classe ``String`` contient une méthode baptisée `toCharArray() <http://"
"docs.oracle.com/javase/1.5.0/docs/api/java/lang/String.html#toCharArray()>`_ "
"qui permet de convertir un ``String`` en un tableau de caractères. Une "
"méthode statique équivalent pourrait avoir les spécification et signature "
"suivantes :\n"
"\n"
".. code-block:: java\n"
"\n"
" /*\n"
"  * @pre chaîne s non vide\n"
"  * @post retourne un tableau de caractères ayant le même contenu que\n"
"  *       que String passé en paramètre\n"
"  */\n"
" public static char[] toCharArray(String s)\n"
"\n"
"Laquelle des séquences ci-dessous est une implémentation correcte de cette "
"méthode ?\n"
msgstr ""

#. name, q12, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   char[] r=new char[s.length()];\n"
"   for(int i=0;i<s.length();i++) {\n"
"      r[i]=s.charAt(i);\n"
"   }\n"
"   return r;\n"
msgstr ""

#. name, q12, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Notez que la longueur d'une chaîne de caractères s'obtient en appliquant la "
"méthode ``length()`` à une référence vers cette chaîne. La longueur du "
"tableau de caractères ``r`` est ``r.length``.\n"
msgstr ""

#. name, q12, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   char[] r=new char[s.length()];\n"
"   for(int i=s.length()-1;i>=0;i=i-1) {\n"
"      r[i]=s.charAt(i);\n"
"   }\n"
"   return r;\n"
msgstr ""

#. name, q12, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"  char[] r;\n"
"  for(int i=0;i<s.length();i++) {\n"
"      r[i]=s.charAt(i);\n"
"  }\n"
"  return r[];\n"
msgstr ""

#. name, q12, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Cette réponse contient deux erreurs. Tout d'abord, avant de pouvoir utiliser "
"un tableau, il faut fixer sa longueur lors de son initialisation. Ensuite, "
"pour retourner un tableau, il faut retourner une référence vers ce tableau. "
"Si ``r`` est une référence de type ``char[]``, il suffit de\n"
msgstr ""

#. name, q12, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"  char[] r=s;\n"
"  return r;\n"
msgstr ""

#. name, q12, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"En Java, ce genre de raccourci n'existe pas.\n"
msgstr ""

#. name, q12, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"  char[] r=new char[s.length];\n"
"  for(int i=0;i<s.length;i++) {\n"
"      r[i]=s.charAt(i);\n"
"  }\n"
"  return r;\n"
msgstr ""

#. name, q12, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"En Java, la longueur d'une chaîne de caractères s'obtient via ``s.length()`` "
"et non ``s.length``.\n"
msgstr ""

#. name, q2, name
#. name, q3, name
#: m05_qcm/task.yaml
msgid "Initialisation de tableaux"
msgstr ""

#. name, q2, header
#: m05_qcm/task.yaml
msgid ""
"\n"
"Laquelle des lignes ci-dessous déclare un tableau contenant trois nombres "
"réels et l'initialise avec les valeurs ``-1.0``, ``0.0`` et ``1.0``.\n"
msgstr ""

#. name, q2, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    double[] t=new double[] { -1.0, 0.0, 1.0};\n"
msgstr ""

#. name, q2, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Cette ligne est correcte. Le livre la préfère à la ligne ``double[] t= "
"{ -1.0, 0.0, 1.0};`` même si les deux sont équivalentes pour Java.\n"
msgstr ""

#. name, q2, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    double[] t= { -1.0, 0.0, 1.0};\n"
msgstr ""

#. name, q2, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Cette ligne est correcte. Le livre préfère la ligne ``double[] t=new "
"double[] { -1.0, 0.0, 1.0};`` qui est plus explicite même si les deux sont "
"équivalentes pour Java.\n"
msgstr ""

#. name, q2, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   double[3] t= {-1.0, 0.0, 1.0};\n"
msgstr ""

#. name, q2, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"En Java, il n'existe pas de type ``double[3]`` pouvant être mis dans une "
"déclaration. Relisez |jn7.1.3|_\n"
"\n"
"  .. _jn7.1.3 : http://math.hws.edu/javanotes/c7/s1.html#arrays.1.3\n"
"  .. |jn7.1.3| replace:: `7.1.3 : Array Initialization`\n"
msgstr ""

#. name, q2, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   double t= {-1.0, 0.0, 1.0};\n"
msgstr ""

#. name, q2, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"En Java, ``double t`` déclare un réel et non un tableau de réels. Relisez |"
"jn7.1.3|_\n"
"\n"
"\n"
"  .. _jn7.1.3 : http://math.hws.edu/javanotes/c7/s1.html#arrays.1.3\n"
"  .. |jn7.1.3| replace:: `7.1.3 : Array Initialization`\n"
msgstr ""

#. name, q2, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   double[] t= new double[-1.0, 0.0,1.0];\n"
msgstr ""

#. name, q2, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Cette ligne n'est pas syntaxiquement correcte, relisez |jn7.1.3|_\n"
"\n"
" .. _jn7.1.3 : http://math.hws.edu/javanotes/c7/s1.html#arrays.1.3\n"
" .. |jn7.1.3| replace:: `7.1.3 : Array Initialization`\n"
msgstr ""

#. name, q2, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   double[] t= new double{-1.0,0.0,1.0};\n"
msgstr ""

#. name, q2, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Cette ligne n'est pas syntaxiquement correcte, relisez |jn7.1.3|_\n"
"\n"
"\n"
" .. _jn7.1.3 : http://math.hws.edu/javanotes/c7/s1.html#arrays.1.3\n"
" .. |jn7.1.3| replace:: `7.1.3 : Array Initialization`\n"
msgstr ""

#. name, q2, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   double[] t= [-1.0, 0.0, 1.0];\n"
msgstr ""

#. name, q2, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Cette ligne n'est pas syntaxiquement correcte. Ne confondez pas ``{`` et "
"``[``. Relisez |jn7.1.3|_\n"
"\n"
"\n"
"\n"
" .. _jn7.1.3 : http://math.hws.edu/javanotes/c7/s1.html#arrays.1.3\n"
" .. |jn7.1.3| replace:: `7.1.3 : Array Initialization`\n"
msgstr ""

#. name, q3, header
#: m05_qcm/task.yaml
msgid ""
"\n"
"Une fois qu'un tableau a été déclaré et initialisé, il faut parfois pouvoir "
"connaître le nombre d'éléments se trouvant dans le tableau. Lequel des codes "
"ci-dessous affiche-t-il le nombre d'entiers dans le tableau ``tab`` déclaré "
"via ``int[] tab=new int[]{1,2,7,9,3,99,-12,78,119}`` ?\n"
msgstr ""

#. name, q3, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   System.out.println(tab.length);\n"
msgstr ""

#. name, q3, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   System.out.println(tab.length());\n"
msgstr ""

#. name, q3, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"En Java, la syntaxe ``tab.length()`` correspond à l'exécution de la méthode "
"``length()`` sur l'objet dont la référence est ``tab``. Les tableaux Java ne "
"sont pas des objets ayant des méthodes que l'on peut appeler. Relisez |"
"jn7.1.2|_\n"
"\n"
"\n"
" .. _jn7.1.2 : http://math.hws.edu/javanotes/c7/s1.html#arrays.1.2\n"
" .. |jn7.1.2| replace:: `7.1.2 : Using Arrays`\n"
msgstr ""

#. name, q3, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   System.out.println(tab.size);\n"
msgstr ""

#. name, q3, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"``tab.size`` n'existe pas. Relisez |jn7.1.2|_\n"
"\n"
" .. _jn7.1.2 : http://math.hws.edu/javanotes/c7/s1.html#arrays.1.2\n"
" .. |jn7.1.2| replace:: `7.1.2 : Using Arrays`\n"
msgstr ""

#. name, q3, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   System.out.println(tab[0]);\n"
msgstr ""

#. name, q3, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"``tab[0]`` est le premier élément du tableau ``tab`` et non le nombre "
"d'éléments présents dans le tableau. Relisez |jn7.1.2|_\n"
"\n"
" .. _jn7.1.2 : http://math.hws.edu/javanotes/c7/s1.html#arrays.1.2\n"
" .. |jn7.1.2| replace:: `7.1.2 : Using Arrays`\n"
msgstr ""

#. name, q3, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   System.out.println(tab.[length]);\n"
msgstr ""

#. name, q3, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Cette ligne est syntaxiquement incorrecte. Relisez |jn7.1.2|_\n"
"\n"
" .. _jn7.1.2 : http://math.hws.edu/javanotes/c7/s1.html#arrays.1.2\n"
" .. |jn7.1.2| replace:: `7.1.2 : Using Arrays`\n"
msgstr ""

#. name, q4, name
#: m05_qcm/task.yaml
msgid "Tableaux à plusieurs dimensions"
msgstr ""

#. name, q4, header
#: m05_qcm/task.yaml
msgid ""
"\n"
"Outre les tableaux à une dimension décrit dans |jn7.1|_, Java supporte "
"également des tableaux à plusieurs dimensions. Laquelle des déclarations ci-"
"dessous est-elle un tableau à plusieurs dimensions qui permet de stocker "
"exactement 24 nombres entiers ?\n"
"\n"
"\n"
".. _jn7.1 : http://math.hws.edu/javanotes/c7/s1.html\n"
".. |jn7.1| replace:: `7.1 : Creating and Using Arrays`\n"
msgstr ""

#. name, q4, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   int[][] t=new int[4][6];\n"
msgstr ""

#. name, q4, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Ce tableau à deux dimensions comprend 4 lignes et 6 colonnes.\n"
msgstr ""

#. name, q4, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   int[][] t=new int[3][8];\n"
msgstr ""

#. name, q4, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Ce tableau à deux dimensions comprend 3 lignes et 8 colonnes.\n"
msgstr ""

#. name, q4, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   int[][] t=new int[2][4];\n"
msgstr ""

#. name, q4, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Ce tableau à deux dimensions comprend 2 lignes et 4 colonnes. Relisez |"
"jn7.5.1|_\n"
"\n"
"\n"
" .. _jn7.5.1 : http://math.hws.edu/javanotes/c7/s5.html#arrays.5.1\n"
" .. |jn7.5.1| replace:: `7.5.1 : Creating Two-dimensional Arrays`\n"
msgstr ""

#. name, q4, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   int[][] t=new int[24];\n"
msgstr ""

#. name, q4, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Cette ligne est erronée. La référence déclarée à gauche est vers un tableau "
"de tableaux alors que seul un tableau d'entiers est créé dans le membre de "
"droite. Relisez |jn7.5.1|_\n"
"\n"
" .. _jn7.5.1 : http://math.hws.edu/javanotes/c7/s5.html#arrays.5.1\n"
" .. |jn7.5.1| replace:: `7.5.1 : Creating Two-dimensional Arrays`\n"
msgstr ""

#. name, q4, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   int[] t=new int[3][8];\n"
msgstr ""

#. name, q4, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Cette ligne est erronée. La référence déclarée à gauche est vers un tableau "
"alors qu'un tableau de tableaux d'entiers est créé dans le membre de droite. "
"Relisez |jn7.5.1|_\n"
"\n"
"\n"
" .. _jn7.5.1 : http://math.hws.edu/javanotes/c7/s5.html#arrays.5.1\n"
" .. |jn7.5.1| replace:: `7.5.1 : Creating Two-dimensional Arrays`\n"
msgstr ""

#. name, q4, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Le tableau créé a deux lignes et 4 colonnes. Il ne permet donc pas de "
"stocker 24 nombres entiers. Relisez |jn7.5.1|_\n"
"\n"
"\n"
"\n"
" .. _jn7.5.1 : http://math.hws.edu/javanotes/c7/s5.html#arrays.5.1\n"
" .. |jn7.5.1| replace:: `7.5.1 : Creating Two-dimensional Arrays`\n"
msgstr ""

#. name, q5, name
#: m05_qcm/task.yaml
msgid "Tableaux ordonnés"
msgstr ""

#. name, q5, header
#: m05_qcm/task.yaml
msgid ""
"\n"
"Laquelle des suites d'instructions ci-dessous est une implémentation "
"correcte de la spécification suivante :\n"
"\n"
".. code-block:: java\n"
"\n"
" /**\n"
"  * @pre  t est un tableau contenant au moins un élément\n"
"  * @post retourne true si les données du tableau t sont en ordre\n"
"  *       décroissant, false sinon\n"
"  */\n"
"  public static boolean decroissant(double[] t)\n"
"  {\n"
"    // corps à inclure\n"
"  }\n"
msgstr ""

#. name, q5, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   if(t.length==1) {\n"
"       return true;\n"
"   }\n"
"   for(int i=1;i<t.length;i++) {\n"
"     if (t[i-1] <= t[i]) {\n"
"           return false;\n"
"     }\n"
"   }\n"
"   return true;\n"
msgstr ""

#. name, q5, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   if(t.length==1) {\n"
"       return true;\n"
"   }\n"
"   for(int i=t.length-1;i>=1;i=i-1) {\n"
"     if (t[i-1] <= t[i]) {\n"
"           return false;\n"
"     }\n"
"   }\n"
"   return true;\n"
msgstr ""

#. name, q5, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   if(t.length==1) {\n"
"       return true;\n"
"   }\n"
"   for(int i=0;i<t.length;i++) {\n"
"     if (t[i-1] <= t[i]) {\n"
"           return false;\n"
"     }\n"
"   }\n"
"   return true;\n"
msgstr ""

#. name, q5, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Que se passe-t-il lors du premier passage dans la boucle ``for`` avec un "
"tableau ``t`` contenant ``{ 1.0, 2.0 }`` ? ``i`` vaut ``0``, quel est la "
"valeur de ``t[0-1]`` ?\n"
msgstr ""

#. name, q5, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   if(t.length==1) {\n"
"       return true;\n"
"   }\n"
"   for(int i=t.length;i>=1;i=i-1) {\n"
"     if (t[i-1] <= t[i]) {\n"
"           return false;\n"
"     }\n"
"   }\n"
"   return true;\n"
msgstr ""

#. name, q5, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Que se passe-t-il lors du premier passage dans la boucle ``for`` avec un "
"tableau ``t`` contenant ``{ 1.0, 2.0 }`` ? ``i`` vaut ``t.length``, quel est "
"la valeur de ``t[i]`` ?\n"
msgstr ""

#. name, q5, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   if(t.length==1) {\n"
"       return true;\n"
"   }\n"
"   for(int i=1;i<t.length;i++) {\n"
"     if (t[i-1] <= t[i]) {\n"
"        return false;\n"
"     }\n"
"     else  {\n"
"       return true;\n"
"     }\n"
"   }\n"
"   return true;\n"
msgstr ""

#. name, q5, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Cette méthode teste-t-elle vraiment l'entièreté du tableau ? Combien de fois "
"passe-t-elle dans la boucle ``for`` ?\n"
msgstr ""

#. name, q5, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   if(t.length==1) {\n"
"       return true;\n"
"   }\n"
"   for(int i=t.length-1;i>=1;i=i-1) {\n"
"     if (t[i-1] <= t[i]) {\n"
"        return false;\n"
"     }\n"
"     else {\n"
"        return true;\n"
"     }\n"
"   }\n"
"   return true;\n"
msgstr ""

#. name, q6, name
#: m05_qcm/task.yaml
msgid "Initialisation de tableaux à deux dimensions"
msgstr ""

#. name, q6, header
#: m05_qcm/task.yaml
msgid ""
"\n"
"Considérons un tableau à deux dimensions initialisé comme suit :\n"
"\n"
".. code-block:: java\n"
"\n"
" int[][] tab= {  { 1,2,3} ,\n"
"                 { 4,5}\n"
"          } ;\n"
"\n"
"Laquelle des expressions booléennes ci-dessous est-elle vraie ?\n"
msgstr ""

#. name, q6, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    (tab[0].length==3) && (tab[1][1]==5)\n"
msgstr ""

#. name, q6, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    (tab.length==2) && (tab[0][2]==3)\n"
msgstr ""

#. name, q6, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   (tab.length==1) && (tab[1][1]==4)\n"
msgstr ""

#. name, q6, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"``tab.length`` est le nombre de lignes du tableau ``tab``, c'est-à-dire "
"``2``.  Relisez |jn7.5.1|_ et |jn7.5.2|_\n"
"\n"
" .. _jn7.5.1 : http://math.hws.edu/javanotes/c7/s5.html#arrays.5.1\n"
" .. |jn7.5.1| replace:: `7.5.1 : Creating Two-dimensional Arrays`\n"
"\n"
" .. _jn7.5.2 : http://math.hws.edu/javanotes/c7/s5.html#arrays.5.2\n"
" .. |jn7.5.2| replace:: `7.5.2 : Using Two-dimensional Arrays`\n"
msgstr ""

#. name, q6, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   (tab[1].length==3) && (tab[0][1]==2)\n"
msgstr ""

#. name, q6, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"``tab[1].length`` est le nombre de colonnes de la ligne ``1`` du tableau, "
"c'est-à-dire ``2``.  Relisez |jn7.5.1|_ et |jn7.5.2|_\n"
"\n"
"\n"
" .. _jn7.5.1 : http://math.hws.edu/javanotes/c7/s5.html#arrays.5.1\n"
" .. |jn7.5.1| replace:: `7.5.1 : Creating Two-dimensional Arrays`\n"
"\n"
" .. _jn7.5.2 : http://math.hws.edu/javanotes/c7/s5.html#arrays.5.2\n"
" .. |jn7.5.2| replace:: `7.5.2 : Using Two-dimensional Arrays`\n"
msgstr ""

#. name, q6, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   (tab[0][2]==2) && (tab[1][0]==4)\n"
msgstr ""

#. name, q6, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"L'élément ``tab[0][2]`` a comme valeur ``3`` et non ``2``.\n"
msgstr ""

#. name, q7, name
#: m05_qcm/task.yaml
msgid "Manipulation de tableau à deux dimensions "
msgstr ""

#. name, q7, header
#: m05_qcm/task.yaml
msgid ""
"\n"
"Considérons la matrice ``m`` de ``li`` lignes et ``c`` colonnes qui a été "
"initialisée par les instructions ci-dessous :\n"
"\n"
".. code-block:: java\n"
"\n"
"\n"
"   double m[][]=new double[li][c];\n"
"   int count=1;\n"
"   for(int i=0;i<li;i++) {\n"
"     for(int j=0; j<c; j++) {\n"
"         m[i][j]=count;\n"
"     count++;\n"
"     }\n"
"   }\n"
"\n"
"Laquelle des expressions booléennes ci-dessous est-elle vraie ?\n"
msgstr ""

#. name, q7, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    ( m[li-1][0]==((li-1)*c)+1) && (m[0][c-1]==c)\n"
msgstr ""

#. name, q7, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    ( m[0][0]==1) && (m[li-1][c-1]==1+li*ci)\n"
msgstr ""

#. name, q7, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    ( m[0][c-1]==c-1)\n"
msgstr ""

#. name, q7, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Cet élément de la matrice vaut ``c`` et car ``count`` est incrémentée à "
"chaque passage dans la boucle ``for j<c``.\n"
msgstr ""

#. name, q7, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    ( m[li][c]==li*ci)\n"
msgstr ""

#. name, q7, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Il n'existe pas d'élément ``m[li][c]`` dans la matrice ``m``.\n"
msgstr ""

#. name, q7, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    (m[0][0]==0) && (m[0][c-1]==c)\n"
msgstr ""

#. name, q7, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"``count`` étant initialisé à ``1``, l'élément ``m[0][0]`` est initialisé à "
"la valeur ``1``.\n"
msgstr ""

#. name, q7, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"     ( m[0][1]==1) && (m[0][c-1]==c)\n"
msgstr ""

#. name, q7, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"``m[0][1]`` vaut ``2``\n"
msgstr ""

#. name, q8, name
#: m05_qcm/task.yaml
msgid "Somme des éléments d'un tableau"
msgstr ""

#. name, q8, header
#: m05_qcm/task.yaml
msgid ""
"\n"
"Laquelle des implémentations suivantes est-elle une implémentation correcte "
"de la méthode ``sumTab`` dont la spécification est reprise ci-dessous :\n"
"\n"
".. code-block:: java\n"
"\n"
"\n"
"  /*\n"
"   * @pre tableau contenant au moins un élément\n"
"   * @post retourne la somme des valeurs stockées dans le tableau\n"
"   */\n"
"  public static double sumTab(double[] t)\n"
msgstr ""

#. name, q8, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"  double sum=0.0;\n"
"  for(int i=0;i<t.length;i++) {\n"
"    sum=sum+t[i];\n"
"  }\n"
"  return sum;\n"
msgstr ""

#. name, q8, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"  double sum=0.0;\n"
"  for(int i=t.length-1;i>=0;i=i-1) {\n"
"    sum=sum+t[i];\n"
"  }\n"
"  return sum;\n"
msgstr ""

#. name, q8, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"  double sum=0.0;\n"
"  for(int i=0;i<t.length;i++) {\n"
"   for(int j=0;j<t[i].length;j++) {\n"
"    sum=sum+t[i];\n"
"   }\n"
"  }\n"
"  return sum;\n"
msgstr ""

#. name, q8, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Ce code est utilisable pour calculer la somme des éléments d'un tableau à "
"deux dimensions, mais le tableau ``t`` qui est passé comme paramètre "
"effectif à la méthode est un tableau à une seule dimension. Ce code ne "
"compilera pas dans la méthode ``sumTab``.\n"
msgstr ""

#. name, q8, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"  double sum=0.0;\n"
"  for(int i=t.length-1;i>=0;i=i-1) {\n"
"   for(int j=0;j<t[i].length;j++) {\n"
"    sum=sum+t[i];\n"
"   }\n"
"  }\n"
"  return sum;\n"
msgstr ""

#. name, q8, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   double sum=0.0;\n"
"   for(int i=0;i<=t.length;i++) {\n"
"     sum=sum+t[i];\n"
"   }\n"
"   return sum;\n"
msgstr ""

#. name, q8, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Ce code provoquera une erreur à l'exécution. Il n'y a pas d'élément dans le "
"tableau ``t`` à l'indice ``t.length``. L'indice le plus élevé du tableau est "
"``t.length-1``.\n"
msgstr ""

#. name, q9, name
#: m05_qcm/task.yaml
msgid "Assertions"
msgstr ""

#. name, q9, header
#: m05_qcm/task.yaml
msgid ""
"\n"
"En Java, les assertions peuvent être utilisées pour vérifier explicitement "
"les préconditions et les postconditions d'une méthode. En programmation "
"défensive, on utilise des ``assert`` pour vérifier explicitement les "
"préconditions de chaque méthode. Considérons la méthode dont la "
"spécification est reprise ci-dessous :\n"
"\n"
".. code-block:: java\n"
"\n"
" /**\n"
"  * @pre a>0, b>2*a et b est pair\n"
"  * @post ....\n"
"  */\n"
" private void methode(int a, int b)\n"
"\n"
"Laquelle des séquences d'instructions ci-dessous vérifie explicitement les "
"préconditions de cette méthode ?\n"
msgstr ""

#. name, q9, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   assert a>0 : \"a doit être strictement positif\";\n"
"   assert ( (b>2*a) && (b%2)==0 ) : \"b invalide\";\n"
msgstr ""

#. name, q9, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Notez qu'en Java l'expression ``(b%2)`` est une expression entière. Elle "
"peut donc apparaître à gauche d'un signe ``==``. Il est intéressant "
"d'utiliser des commentaires pour indiquer quelle précondition n'est pas "
"vérifiée.\n"
msgstr ""

#. name, q9, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   assert a>0 : \"a doit être strictement positif\";\n"
"   assert (b>2*a) : \"b trop petit\";\n"
"   int reste=b%2;\n"
"   assert reste==0 : \"b n'est pas pair\";\n"
msgstr ""

#. name, q9, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Il est intéressant d'utiliser des commentaires pour indiquer quelle "
"précondition n'est pas vérifiée.\n"
msgstr ""

#. name, q9, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   assert a<=0;\n"
"   assert ( (b>2*a) && (b%2)==0 ) : \"b invalide\";\n"
msgstr ""

#. name, q9, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"La première assertion est incorrecte. Elle est vraie lorsque ``a<=0`` or la "
"précondition de la méthode est ``a>0``.\n"
msgstr ""

#. name, q9, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   int reste=b%2;\n"
"   assert a<=0 : \"a doit être strictement positif\";\n"
"   assert reste!=0 : \"b n'est pas pair\";\n"
"   assert (b<=2*a) : \"b trop petit\";\n"
msgstr ""

#. name, q9, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"En Java, ``assert`` permet de vérifier qu'une précondition est remplie. Si "
"c'est le cas, l'instruction ``assert`` n'a aucun effet. Sinon, l'instruction "
"``assert`` affiche le message qui suit ``:`` et provoque une erreur. Lorsque "
"l'on utilise ``assert`` pour vérifier les préconditions, on souhaite que "
"l'exécution du programme s'arrête et que le message d'erreur soit afficher "
"lorsqu'une précondition n'est pas vérifiée. Pour cela, l'expression "
"booléenne contenu dans l'assertion doit être la précondition à vérifier.\n"
msgstr ""

#. name, q9, text
#: m05_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   assert a<=0 : \"a doit être strictement positif\";\n"
"   assert ( (b<=2*a) && (b%2)!=0 ) : \"b invalide\";\n"
msgstr ""

#. name, q9, feedback
#: m05_qcm/task.yaml
msgid ""
"\n"
"Notez qu'en Java l'expression ``(b%2)`` est une expression entière. Elle "
"peut donc apparaître à gauche d'un signe ``==``. En Java, ``assert`` permet "
"de vérifier qu'une précondition est remplie. Si c'est le cas, l'instruction "
"``assert`` n'a aucun effet. Sinon, l'instruction ``assert`` affiche le "
"message qui suit ``:`` et provoque une erreur. Lorsque l'on utilise "
"``assert`` pour vérifier les préconditions, on souhaite que l'exécution du "
"programme s'arrête et que le message d'erreur soit afficher lorsqu'une "
"précondition n'est pas vérifiée. Pour cela, l'expression booléenne contenu "
"dans l'assertion doit être la précondition à vérifier.\n"
msgstr ""

#. context
#: m05dem1/task.yaml
msgid ""
"Répondez aux questions simples suivantes au sujet de la syntaxe des "
"tableaux. Vous *devez* respecter les noms de variables suggérés.\n"
"(Nous utilisons le type ``int`` pour les entiers et le type ``double`` pour "
"les réels.)"
msgstr ""

#. name
#: m05dem1/task.yaml
msgid "Mission 5 : Question de démarrage 1 : Syntaxe et Tableaux"
msgstr ""

#. name, q1, header
#: m05dem1/task.yaml
msgid ""
"Déclarez un tableau  *v*  pouvant contenir *n* entiers (la variable *n* est "
"déjà déclarée)."
msgstr ""

#. name, q2, header
#: m05dem1/task.yaml
msgid ""
"Déclarer un matrice  *m*  rectangulaire, de  *k*  tableaux contenant  *l*  "
"éléments chacun, pouvant contenir des réels (*l* et *k* sont déjà déclarées)."
msgstr ""

#. name, q3, header
#: m05dem1/task.yaml
msgid ""
"Considérant la matrice de la question 2 récupérez le nombre de colonnes  *k*."
msgstr ""

#. name, q4, header
#: m05dem1/task.yaml
msgid ""
"Considérant la matrice de la question 2 récupérez le nombre de lignes *l*."
msgstr ""

#. author
#: m05dem2/task.yaml
msgid ""
"Clémentine Munyabarenzi (ressource : Syllabus d'exercices  LSINF1101), "
"Olivier Martin"
msgstr ""

#. context
#: m05dem2/task.yaml
msgid ""
"Un étudiant utilise des tableaux de réels pour représenter des vecteurs "
"mathématiques. Ces tableaux sont définis comme suit :\n"
"\n"
".. code-block :: java\n"
"\n"
"    double[] t1 = {1.0, 2.0, -3.0};\n"
"    double[] t2 = {1.0, 3.0, 9.0};\n"
"\n"
"L'étudiant propose la méthode suivante pour tester que deux vecteurs sont\n"
"identiques :\n"
"\n"
".. code-block :: java\n"
"\n"
"    /**\n"
"     * @pre t1 != null, t2 != null\n"
"     * @post retourne true si t1 et t2 sont les mêmes vecteurs, false sinon\n"
"     */\n"
"    public static boolean egal(double[] t1, double[] t2) {\n"
"        return t1 == t2;\n"
"    }\n"
"\n"
"Il teste sa méthode sur les deux tableaux ci-dessus et conclut que sa\n"
"méthode est correcte. Qu'en pensez-vous ?"
msgstr ""

#. name
#: m05dem2/task.yaml
msgid "Mission 5 : Question de démarrage 2 : Compararer des tableaux"
msgstr ""

#. name, q1, header
#: m05dem2/task.yaml
msgid ""
"Les tableaux ``t1`` et ``t2`` étants définis comme plus haut, pouvez-vous "
"faire en sorte que l'expression ``t1 == t2`` renvoie à coup sûr ``true``? "
"Ecrivez du code permettant d'obtenir ce résultat.\n"
"\n"
"Considérez que vous écrivez une méthode sans signature et que *t1* et *t2* "
"sont déjà initialisés comme ci-dessus (Par contre toutes les autres "
"ressources dont vous estimerez avoir besoin devront être déclarées par vous)."
msgstr ""

#. name, q2, header
#: m05dem2/task.yaml
msgid ""
"Proposez une implémentation correcte du *corps* de la méthode ``egal`` ci-"
"dessus (Vous ne devez pas écrire la signature de la méthode)."
msgstr ""

#. author
#: m05dem3/task.yaml
msgid ""
"Clémentine Munyabarenzi (ressource : syllabus d'exercices LSINF1101), "
"Olivier Martin"
msgstr ""

#. context
#: m05dem3/task.yaml
msgid ""
"Ecrivez la méthode suivante :\n"
"\n"
".. code-block :: java\n"
"\n"
"    /**\n"
"     * @pre n > 0\n"
"     * @post retourne la matrice unité d'ordre n, c'est-à-dire la matrice\n"
"     *       carrée de n lignes/colonnes dont les éléments de la diagonale\n"
"     *       principale valent 1 et tous les autres valent 0\n"
"     */\n"
"    public static int[][] unite(int n)"
msgstr ""

#. name
#: m05dem3/task.yaml
msgid "Mission 5 : Question de démarrage 3 : Matrice unité"
msgstr ""

#. name, q1, header
#: m05dem3/task.yaml
msgid "Ecrivez ici le *corps* de la méthode."
msgstr ""

#. author
#: m05dem4/task.yaml
msgid ""
"Clémentine Munyabarenzi (ressource : Syllabus d'exercices LSINF1101), "
"Olivier Martin"
msgstr ""

#. context
#: m05dem4/task.yaml
msgid ""
"Ecrivez en appliquant la *programmation défensive*, une version de la "
"méthode dont la spécification est la suivante :\n"
"\n"
".. code-block :: java\n"
"\n"
"    /**\n"
"     * @pre a != null, b != null, a et b de même dimensions\n"
"     * @post retourne la matrice valant la somme des matrices a et b\n"
"     */\n"
"    public static int[][] add(int[][] a, int[][] b)\n"
msgstr ""

#. name
#: m05dem4/task.yaml
msgid "Mission 5 : Question de démarrage 4 : Sommes de Matrices"
msgstr ""

#. name, q1, header
#: m05dem4/task.yaml
msgid ""
"Ecrivez ici le *corps* de la fonction ``add`` (Vous ne devez pas écrire la "
"signature de la méthode) en utilisant la **programmation défensive**, càd en "
"utilisant **assert** dans le cas où la *@pre* n'est pas respectée."
msgstr ""

#. author
#: m05dem5/task.yaml
msgid "Munyabarenzi Clémentine Zaninka, Olivier Martin"
msgstr ""

#. context
#: m05dem5/task.yaml
msgid ""
"Dans une classe, on trouve une méthode dont la signature est :\n"
"\n"
".. code-block :: java\n"
"\n"
"    public static void main(String[] args)\n"
"\n"
msgstr ""

#. name
#: m05dem5/task.yaml
msgid "Mission 5 : Question de Démarrage 5 : Méthode Main"
msgstr ""

#. name, q1, name
#: m05dem5/task.yaml
msgid "Afficher les arguments"
msgstr ""

#. name, q1, header
#: m05dem5/task.yaml
msgid ""
"Comment feriez-vous pour que la méthode main ci-dessus affiche sur ``System."
"out`` tout le contenu du tableau ``String[] args`` passé en argument ?\n"
"Par exemple, avoir affiché à l'écran :\n"
"\n"
"::\n"
"\n"
"    Un\n"
"    Deux\n"
"    Trois\n"
"    Soleil\n"
"\n"
"Ecirvez-ci dessous le *corps* de la méthode main."
msgstr ""

#. name, q2, header
#: m05dem5/task.yaml
msgid ""
"BlueJ permet de passer des arguments à la méthode ``main``. La\n"
"méthode ``main`` s'attend à recevoir un ``String[]``. Il\n"
"faut lui passer ce tableau comme si on définissait ce tableau dans du\n"
"code java. Par exemple, pour passer un tableau contenant les\n"
"``String`` ``\"1\"`` et ``\"2\"``, il faut indiquer\n"
"``\"1\",\"2\"`` dans la fenêtre BlueJ (voir figure).\n"
"\n"
".. image:: m05dem5/Somme.png\n"
"   :height: 300\n"
"   :width: 450\n"
"\n"
"Un étudiant souhaite écrire un petit programme simple qui prend deux nombres "
"entiers comme arguments en ligne de commande et affiche la somme de ces deux "
"nombres. Il écrit le code ci-dessous :\n"
"\n"
".. code-block :: java\n"
"\n"
"    public class Somme {\n"
"        public static void main(String[] args){\n"
"            System.out.println(args[0]+args[1]);\n"
"        }\n"
"    }\n"
"\n"
"Il compile ce programme et l'exécute avec BlueJ. En testant son programme "
"avec ``\"1\",\"2\"`` comme argument, il s'étonne de voir ``12`` affiché à "
"l'écran. Pouvez-vous corriger son code afin d'afficher la somme des deux "
"arguments et non la concaténation des deux Strings ? Ecrivez ci-dessous *le "
"corps de la méthode main* (**sans sa signature**). Pensez à consulter l'API "
"de la classe http://docs.oracle.com/javase/7/docs/api/java/lang/Integer.html"
msgstr ""

#. context
#: m05real/task.yaml
msgid ""
"Vous pouvez soumettre ici ou via BlueJ votre phase de réalisation pour la "
"mission 5.\n"
"\n"
"Nous attendons une archive **.zip** contenant uniquement les fichiers :\n"
"\n"
"- ImageGray.java\n"
"- LibrairieImage.java\n"
"- LibrairieIO.java\n"
"- Test.java\n"
"- TestRescale.java\n"
"- TestBrighten.java\n"
"- TestContains.java\n"
"- TestSubtract.java\n"
"- README.txt\n"
msgstr ""

#. name
#: m05real/task.yaml
msgid "Mission 5: Phase de réalisation: Soumission"
msgstr ""

#. name, q1, name
#: m05real/task.yaml
msgid "Phase de réalisation de la Mission 5"
msgstr ""

#. context
#: m06Q1/task.yaml
msgid ""
"Dans un programme Java, on écrit une classe permettant de représenter une "
"date. Les variables d'instant de cette classe sont définies comme suite :\n"
"\n"
".. code-block:: java\n"
"\n"
"   /**\n"
"    * Une classe pour encoder une date\n"
"    *\n"
"    * @author Olivier Bonaventure\n"
"    * @version Oct. 2016\n"
"    */\n"
"   public class Date{\n"
"     public int jour; // le jour du mois\n"
"     public int mois; // le mois\n"
"     public int annee; // l'année\n"
"     //...\n"
"   }\n"
"\n"
"Le constructeur de cette classe a comme spécification :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     * @pre 1 <= jour <= 31, 1 <= mois <= 12\n"
"     * @post retourne une date, les mois commencent à 1 pour janvier\n"
"     *       On ne gère pas les années bissextiles, février est supposé "
"toujours\n"
"     *       contenir 28 jours\n"
"     */\n"
"\n"
"\n"
"Voici quelques exemples d'utilisation du constructeur :\n"
"\n"
".. code-block:: java\n"
"\n"
"   Date poisson = new Date(1,4,2017); // 1er avril 2017\n"
"   Date noel = new Date(25,12,2016); // 25 décembre 2016\n"
"\n"
"\n"
"Ecrivez le constructeur de cette classe ``Date``."
msgstr ""

#. name
#: m06Q1/task.yaml
msgid "Mission 6 : Q* constructeur Date"
msgstr ""

#. name, q1, name
#: m06Q1/task.yaml
msgid "constructeur de Date"
msgstr ""

#. name, q1, header
#: m06Q1/task.yaml
msgid "Écrivez ici le constructeur"
msgstr ""

#. context
#: m06Q10/task.yaml
msgid ""
"Considérons la classe ``Rectangle``:\n"
"\n"
".. code-block:: java\n"
"\n"
"    /**\n"
"      * Un objet Java représentant un rectangle\n"
"      *\n"
"      * @author O. Bonaventure\n"
"      * @version Oct. 2016\n"
"      */\n"
"     public class Rectangle{\n"
"         private double longueur;\n"
"         private double largeur;\n"
"\n"
"         /**\n"
"          * @pre long, larg > 0\n"
"          * @post a construit un rectangle de longueur lon et de largeur "
"larg\n"
"          */\n"
"         public Rectangle(double lon, double larg){\n"
"             longueur = lon;\n"
"             largeur = larg;\n"
"         }\n"
"\n"
"         /*\n"
"          * @pre -\n"
"          * @post retourne la longueur du rectangle\n"
"          */\n"
"         public double getLongueur(){\n"
"             return longueur;\n"
"         }\n"
"\n"
"         /*\n"
"          * @pre -\n"
"          * @post retourne la largeur du rectangle\n"
"          */\n"
"         public double getLargeur(){\n"
"             return largeur;\n"
"         }\n"
"\n"
"         /*\n"
"          * @pre -\n"
"          * @post retourne la surface du rectangle\n"
"          */\n"
"          public double surface(){\n"
"            // non fourni\n"
"          }\n"
"\n"
"         /*\n"
"          * @pre r != null\n"
"          * @post return true si this et r ont la même surface, false sinon\n"
"          */\n"
"          // A compléter\n"
"     }"
msgstr ""

#. name
#: m06Q10/task.yaml
msgid "Mission 6 : Q* memeSurface"
msgstr ""

#. name, q1, name
#: m06Q10/task.yaml
msgid "memeSurface"
msgstr ""

#. name, q1, header
#: m06Q10/task.yaml
msgid ""
"Écrivez ici la méthode ``memeSurface`` dont les spécifications sont:\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"    * @pre r != null\n"
"    * @post return true si this et r ont la même surface, false sinon\n"
"    */"
msgstr ""

#. context
#: m06Q11/task.yaml
msgid ""
"Considérons la classe ``Rectangle``:\n"
"\n"
".. code-block:: java\n"
"\n"
"    /**\n"
"      * Un objet Java représentant un rectangle\n"
"      *\n"
"      * @author O. Bonaventure\n"
"      * @version Oct. 2016\n"
"      */\n"
"     public class Rectangle{\n"
"         private double longueur;\n"
"         private double largeur;\n"
"\n"
"         /**\n"
"          * @pre long, larg > 0\n"
"          * @post a construit un rectangle de longueur lon et de largeur "
"larg\n"
"          */\n"
"         public Rectangle(double lon, double larg){\n"
"             longueur = lon;\n"
"             largeur = larg;\n"
"         }\n"
"\n"
"         /*\n"
"          * @pre -\n"
"          * @post retourne la longueur du rectangle\n"
"          */\n"
"         public double getLongueur(){\n"
"             return longueur;\n"
"         }\n"
"\n"
"         /*\n"
"          * @pre -\n"
"          * @post retourne la largeur du rectangle\n"
"          */\n"
"\n"
"         public double getLargeur(){\n"
"             return largeur;\n"
"         }\n"
"\n"
"         /*\n"
"          * @pre -\n"
"          * @post retourne la surface du rectangle\n"
"          */\n"
"         public double surface(){\n"
"            // non fourni\n"
"         }\n"
"\n"
"         /*\n"
"          * @pre r != null\n"
"          * @post return true si this et r ont la même surface, false sinon\n"
"          */\n"
"         public boolean memeSurface(Rectangle r){\n"
"            // non fourni\n"
"         }\n"
"\n"
"         /*\n"
"          * @pre r != null\n"
"          * @post return true si this et r sont identiques, false sinon\n"
"          */\n"
"         // A compléter\n"
"     }"
msgstr ""

#. name
#: m06Q11/task.yaml
msgid "Mission 6 : Q* rectangle identique"
msgstr ""

#. name, q1, name
#: m06Q11/task.yaml
msgid "identique"
msgstr ""

#. name, q1, header
#: m06Q11/task.yaml
msgid ""
"Écrivez ici la méthode ``identique`` dont les spécifications sont :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     * @pre r != null\n"
"     * @post return true si this et r sont identiques, false sinon\n"
"     */"
msgstr ""

#. context
#: m06Q2/task.yaml
msgid ""
"Considérons à nouveau la classe ``Date`` qui permet de représenter une date. "
"Le squelette du code de cette classe est le suivant :\n"
"\n"
".. code-block:: java\n"
"\n"
"   /**\n"
"    * Une classe pour encoder une date\n"
"    *\n"
"    * @author Olivier Bonaventure\n"
"    * @version Oct. 2016\n"
"    */\n"
"   public class Date\n"
"   {\n"
"    public int jour; // le jour du mois\n"
"    public int mois; // le mois\n"
"    public int annee; // l'année\n"
"\n"
"    /*\n"
"     * @pre 1<= jour <=31, 1<= mois <=12\n"
"     * @post retourne une date, les mois commencent à 1 pour janvier\n"
"     *       On ne gère pas les années bissextiles, février est supposé "
"toujours\n"
"     *       contenir 28 jours\n"
"     */\n"
"\n"
"    public Date(int jour, int mois, int annee){\n"
"      // code non fourni\n"
"    }\n"
"\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne le jour\n"
"     */\n"
"    public int getJour(){\n"
"       // a compléter\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne le mois (1=janvier, 2=février, ...\n"
"     */\n"
"    public int getMois(){\n"
"       // a compléter\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne l'année\n"
"     */\n"
"    public int getAnnee(){\n"
"       // a compléter\n"
"    }"
msgstr ""

#. name
#: m06Q2/task.yaml
msgid "Mission 6 : Q* getters Date"
msgstr ""

#. name, q1, name
#: m06Q2/task.yaml
msgid "getters de Date"
msgstr ""

#. name, q1, header
#: m06Q2/task.yaml
msgid ""
"Écrivez les trois méthodes ``getJour``, ``getMois`` et ``getAnnee`` (avec "
"les signatures)"
msgstr ""

#. context
#: m06Q3/task.yaml
msgid ""
"La classe ``Date`` représente une date. Dans cette classe, écrivez la "
"méthode ``identique`` qui permet de tester l'égalité entre deux dates.\n"
"\n"
".. code-block:: java\n"
"\n"
"   /**\n"
"    * Une classe pour encoder une date\n"
"    *\n"
"    * @author Olivier Bonaventure\n"
"    * @version Oct. 2016\n"
"    */\n"
"   public class Date {\n"
"    public int jour; // le jour du mois\n"
"    public int mois; // le mois\n"
"    public int annee; // l'année\n"
"\n"
"    /*\n"
"     * @pre 1<= jour <=31, 1<= mois <=12\n"
"     * @post retourne une date, les mois commencent à 1 pour janvier\n"
"     *       On ne gère pas les années bissextiles, février est supposé "
"toujours\n"
"     *       contenir 28 jours\n"
"     */\n"
"\n"
"    public Date(int jour, int mois, int annee) {\n"
"        // code non fourni\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne le jour\n"
"     */\n"
"    public int getJour() {\n"
"        // code non fourni\n"
"    }\n"
"\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne le mois (1=janvier, 2=février, ...\n"
"     */\n"
"    public int getMois() {\n"
"        // code non fourni\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne l'année\n"
"     */\n"
"    public int getAnnee() {\n"
"        // code non fourni\n"
"    }\n"
"\n"
"\n"
"    /*\n"
"     * @pre d!=null\n"
"     * @post retourne true si this et d correspondent à la même date, false "
"sinon\n"
"     */\n"
"    public boolean identique(Date d) {\n"
"      // à compléter\n"
"    }\n"
"    // ...\n"
"   }"
msgstr ""

#. name
#: m06Q3/task.yaml
msgid "Mission 6 : Q* identique"
msgstr ""

#. name, q1, name
#: m06Q3/task.yaml
msgid "méthode identique"
msgstr ""

#. name, q1, header
#: m06Q3/task.yaml
msgid "Écrivez la signature et le corps de la méthode ``identique``"
msgstr ""

#. context
#: m06Q4/task.yaml
msgid ""
"La classe ``Date`` représente une date. Dans cette classe, écrivez la "
"méthode ``demain`` qui permet de retourner la date qui suit celle-ci.\n"
"\n"
".. code-block:: java\n"
"\n"
"   /**\n"
"    * Une classe pour encoder une date\n"
"    *\n"
"    * @author Olivier Bonaventure\n"
"    * @version Oct. 2016\n"
"    */\n"
"   public class Date\n"
"   {\n"
"    public int jour; // le jour du mois\n"
"    public int mois; // le mois\n"
"    public int annee; // l'année\n"
"\n"
"    /*\n"
"     * @pre 1<= jour <=31, 1<= mois <=12\n"
"     * @post retourne une date, les mois commencent à 1 pour janvier\n"
"     *       On ne gère pas les années bissextiles, février est supposé "
"toujours\n"
"     *       contenir 28 jours\n"
"     */\n"
"\n"
"    public Date(int jour, int mois, int annee)\n"
"    {\n"
"        // code non fourni\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne le jour\n"
"     */\n"
"    public int getJour()\n"
"    {\n"
"        // code non fourni\n"
"    }\n"
"\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne le mois (1=janvier, 2=février, ...\n"
"     */\n"
"    public int getMois()\n"
"    {\n"
"        // code non fourni\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne l'année\n"
"     */\n"
"    public int getAnnee()\n"
"    {\n"
"        // code non fourni\n"
"    }\n"
"\n"
"\n"
"    /*\n"
"     * @pre d!=null\n"
"     * @post retourne true si this et d correspondent à la même date, false "
"sinon\n"
"     */\n"
"    public boolean identique(Date d) {\n"
"      // code non fourni\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne la date correspondant au jour qui suit this. Cette "
"méthode\n"
"     *       ne supporte pas les années bissextiles, février est supposé "
"avoir toujours\n"
"     *       28 jours.\n"
"     */\n"
"    public Date demain() {\n"
"    // à compléter\n"
"    }\n"
"   }"
msgstr ""

#. name
#: m06Q4/task.yaml
msgid "Mission 6 : Q* demain"
msgstr ""

#. name, q1, name
#: m06Q4/task.yaml
msgid "méthode demain"
msgstr ""

#. name, q1, header
#: m06Q4/task.yaml
msgid "Écrivez ici la méthode ``demain`` (signature comprise)"
msgstr ""

#. context
#: m06Q5/task.yaml
msgid ""
"Considérons la classe ``Fraction`` qui permet de représenter une date. Le "
"squelette du code de cette classe est le suivant :\n"
"\n"
".. code-block:: java\n"
"\n"
"\n"
"    /**\n"
"     * Une classe représentant une fraction\n"
"     *\n"
"     * @author O. Bonaventure\n"
"     * @version Oct. 2016\n"
"     */\n"
"    public class Fraction{\n"
"        private int num; // numerateur\n"
"        private int den; // denominateur\n"
"\n"
"        /**\n"
"         * @pre num>=0, den>0\n"
"         * @post construit la fraction num/den\n"
"         */\n"
"        public Fraction(int num, int den){\n"
"            //code non fourni\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne le dénominateur de la fraction\n"
"         */\n"
"        public int getDen(){\n"
"            //à compléter\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne le numérateur de la fraction\n"
"         */\n"
"        public int getNum(){\n"
"            //à compléter\n"
"        }\n"
"        //...\n"
"    }"
msgstr ""

#. name
#: m06Q5/task.yaml
msgid "Mission 6 : Q* getter"
msgstr ""

#. name, q1, name
#: m06Q5/task.yaml
msgid "getters"
msgstr ""

#. name, q1, header
#: m06Q5/task.yaml
msgid "Écrivez ici les deux méthodes ``getDen`` et ``getNum``"
msgstr ""

#. context
#: m06Q6/task.yaml
msgid ""
"Considérons la classe ``Fraction`` qui permet de représenter une fraction. "
"Le squelette du code de cette classe est le suivant :\n"
"\n"
".. code-block:: java\n"
"\n"
"\n"
"     /**\n"
"      * Une classe représentant une fraction\n"
"      *\n"
"      * @author O. Bonaventure\n"
"      * @version Oct. 2016\n"
"      */\n"
"     public class Fraction{\n"
"         private int num; // numerateur\n"
"         private int den; // denominateur\n"
"\n"
"         /**\n"
"          * @pre num>=0, den>0\n"
"          * @post construit la fraction num/den\n"
"          */\n"
"         public Fraction(int num, int den){\n"
"             //code non fourni\n"
"         }\n"
"\n"
"         /*\n"
"          * @pre -\n"
"          * @post retourne le dénominateur de la fraction\n"
"          */\n"
"         public int getDen(){\n"
"             //code non fourni\n"
"         }\n"
"\n"
"         /*\n"
"          * @pre -\n"
"          * @post retourne le numérateur de la fraction\n"
"          */\n"
"         public int getNum(){\n"
"             //code non fourni\n"
"         }\n"
"         /*\n"
"          * @pre -\n"
"          * @post retourne true si la valeur numérique de la fraction est "
"égale à une valeur entière\n"
"          */\n"
"         //Code à compléter\n"
"\n"
" }"
msgstr ""

#. name
#: m06Q6/task.yaml
msgid "Mission 6 : Q* entier"
msgstr ""

#. name, q1, name
#: m06Q6/task.yaml
msgid "entier"
msgstr ""

#. name, q1, header
#: m06Q6/task.yaml
msgid ""
"Écrivez ici la méthode ``entier`` (signature comprise) dont les "
"spécifications sont:\n"
"\n"
".. code-block:: java\n"
"\n"
"     /*\n"
"      * @pre -\n"
"      * @post retourne true si la valeur numérique de la\n"
"      *       fraction est égale à une valeur entière\n"
"      */"
msgstr ""

#. context
#: m06Q7/task.yaml
msgid ""
"Considérons la classe ``Point`` qui permet de représenter une point. Le "
"squelette du code de cette classe est le suivant :\n"
"\n"
".. code-block:: java\n"
"\n"
"    public class Point{\n"
"       private double x;\n"
"       private double y;\n"
"\n"
"       /*\n"
"        * @pre -\n"
"        * @post a construit le point de coordonnée x,y\n"
"        */\n"
"       Point(double x, double y) {\n"
"        //code non fourni\n"
"       }\n"
"\n"
"       /*\n"
"        * @pre -\n"
"        * @post retourne la coordonnée x du Point this\n"
"        */\n"
"       //à compléter\n"
"\n"
"       /*\n"
"        * @pre -\n"
"        * @post retourne la coordonnée y du Point this\n"
"        */\n"
"       //à compléter\n"
"    }"
msgstr ""

#. name
#: m06Q7/task.yaml
msgid "Mission 6 : Q* getters Point"
msgstr ""

#. name, q1, name
#: m06Q7/task.yaml
msgid "getters Point"
msgstr ""

#. name, q1, header
#: m06Q7/task.yaml
msgid "Écrivez ici les méthodes ``getX`` et ``getY``"
msgstr ""

#. context
#: m06Q8/task.yaml
msgid ""
"Considérons la classe ``Point`` qui permet de représenter une point. Le "
"squelette du code de cette classe est le suivant :\n"
"\n"
".. code-block:: java\n"
"\n"
"    public class Point{\n"
"       private double x;\n"
"       private double y;\n"
"\n"
"       /*\n"
"        * @pre -\n"
"        * @post a construit le point de coordonnée x,y\n"
"        */\n"
"       Point(double x, double y) {\n"
"        //code non fourni\n"
"       }\n"
"\n"
"       /*\n"
"        * @pre -\n"
"        * @post retourne la coordonnée x du Point this\n"
"        *\n"
"        */\n"
"       public double getX() {\n"
"           //code non fourni\n"
"       }\n"
"\n"
"       /*\n"
"        * @pre -\n"
"        * @post retourne la coordonnée y du Point this\n"
"        */\n"
"       public double getY() {\n"
"           //code non fourni\n"
"       }\n"
"\n"
"       /*\n"
"        * @pre p!=null\n"
"        * @post retourne la distance entre this et p\n"
"        *\n"
"        * Voir https://fr.wikipedia.org/wiki/Coordonnées_cartésiennes\n"
"        * pour le rappel de la distance entre deux points\n"
"        */\n"
"        //A compléter\n"
"    }"
msgstr ""

#. name
#: m06Q8/task.yaml
msgid "Mission 6 : Q* distance"
msgstr ""

#. name, q1, name
#: m06Q8/task.yaml
msgid "distance"
msgstr ""

#. name, q1, header
#: m06Q8/task.yaml
msgid ""
"Écrivez ici la méthode ``distance`` dont les spécifications sont :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     * @pre p!=null\n"
"     * @post retourne la distance entre this et p\n"
"     *\n"
"     * Voir https://fr.wikipedia.org/wiki/Coordonnées_cartésiennes\n"
"     * pour le rappel de la distance entre deux points\n"
"     */"
msgstr ""

#. context
#: m06Q9/task.yaml
msgid ""
"Considérons la classe ``Rectangle``:\n"
"\n"
".. code-block:: java\n"
"\n"
"    /**\n"
"      * Un objet Java représentant un rectangle\n"
"      *\n"
"      * @author O. Bonaventure\n"
"      * @version Oct. 2016\n"
"      */\n"
"     public class Rectangle{\n"
"         private double longueur;\n"
"         private double largeur;\n"
"\n"
"         /**\n"
"          * @pre long, larg >0\n"
"          * @post a construit un rectangle de longueur lon et de largeur "
"larg\n"
"          */\n"
"         public Rectangle(double lon, double larg){\n"
"             longueur = lon;\n"
"             largeur = larg;\n"
"         }\n"
"\n"
"         /*\n"
"          * @pre -\n"
"          * @post retourne la longueur du rectangle\n"
"          */\n"
"         public double getLongueur(){\n"
"             return longueur;\n"
"         }\n"
"\n"
"         /*\n"
"          * @pre -\n"
"          * @post retourne la largeur du rectangle\n"
"          */\n"
"         public double getLargeur(){\n"
"             return largeur;\n"
"         }\n"
"\n"
"         /*\n"
"          * @pre -\n"
"          * @post retourne la surface du rectangle\n"
"          */\n"
"         // A compléter\n"
"     }"
msgstr ""

#. name
#: m06Q9/task.yaml
msgid "Mission 6 : Q* surface"
msgstr ""

#. name, q1, name
#: m06Q9/task.yaml
msgid "surface"
msgstr ""

#. name, q1, header
#: m06Q9/task.yaml
msgid ""
"Écrivez ici la méthode ``surface`` dont les spécifications sont:\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne la surface du rectangle\n"
"     */"
msgstr ""

#. context
#: m06_bf/task.yaml
#, python-format
msgid ""
"Écrivez une classe complète ``Employe`` dont les instances représentent un "
"employé d’entreprise. Un employé est caractérisé par son nom (un string) et "
"son salaire (un entier positif). Il doit être possible de créer un nouvel "
"employé avec un nom et un salaire et d’effectuer les opérations suivantes "
"sur un objet Employe :\n"
"\n"
"- obtenir le nom de l’employé\n"
"- obtenir le salaire de l'employé\n"
"- obtenir un texte descriptif représentant l’employé sous la forme ``nom : "
"salaire``\n"
"- augmenter le salaire de l'employé d'un certain pourcentage\n"
"\n"
"Vous devez donc définir la classe ``Employe`` qui contiendra les méthodes "
"suivantes :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post Un employé est créé avec le nom et le salaire indiqués en "
"paramètres\n"
"     */\n"
"    public Employe(String n, float s);\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post Renvoie le nom de l'employé\n"
"     */\n"
"    public String getNom();\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post Renvoie le salaire de l'employé\n"
"     */\n"
"    public float getSalaire();\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post Renvoie une représentation textuelle de l'employé\n"
"     *       au format nom : salaire\n"
"     */\n"
"    public String toString();\n"
"\n"
"    /*\n"
"     * @pre s est un entier représentant le pourcentage d'augmentation\n"
"     * @post Le salaire de l'employé est augmenté du pourcentage spécifié\n"
"     *       (ex : un pourcentage de 100% double le salaire)\n"
"     */\n"
"    public void augmente(float pourcentage);"
msgstr ""

#. name
#: m06_bf/task.yaml
msgid "Mission 6 : Question de Bilan Final"
msgstr ""

#. name, q1, header
#: m06_bf/task.yaml
msgid ""
"Complétez ici le code de la classe ``Employe``, conformément aux "
"spécifications. Attention, la signature de la classe, ainsi que les "
"crochets, sont déjà écrits. Il vous suffit donc de compléter cette classe, "
"pas de l'écrire entièrement.\n"
"\n"
".. code-block:: java\n"
"\n"
"    public class Employe {\n"
"        // Votre code ici\n"
"    }\n"
"\n"
msgstr ""

#. context
#: m06_qcm/task.yaml
msgid ""
"============================\n"
"Mission 6. Classes et Objets\n"
"============================\n"
"\n"
"\n"
"Ces questions supposent que vous avez lu les sections suivantes du livre de "
"référence |jn|_\n"
"\n"
"  - |jn5.1|_\n"
"\n"
"    - |jn5.1.1|_\n"
"    - |jn5.1.2|_\n"
"    - |jn5.1.3|_\n"
"\n"
"  - |jn5.2|_\n"
"\n"
"    - |jn5.2.1|_\n"
"    - |jn5.2.2|_\n"
"    - |jn5.2.3|_\n"
"\n"
"  - |jn5.4|_\n"
"\n"
"    - |jn5.4.1|_\n"
"    - |jn5.4.2|_\n"
"    - |jn5.4.3|_\n"
"\n"
"ainsi que l'API de la classe |TextIO|_.  Les sections vues précédemment "
"restent bien entendu d'actualité.\n"
"\n"
".. _jn: http://math.hws.edu/javanotes/\n"
".. |jn| replace:: JavaNotes\n"
"\n"
".. _jn5.1 : http://math.hws.edu/javanotes/c5/s1.html\n"
".. |jn5.1| replace:: `5.1 : Objects, Instance Methods, and Instance "
"Variables`\n"
"\n"
".. _jn5.1.1 : http://math.hws.edu/javanotes/c5/s1.html#OOP.1.1\n"
".. |jn5.1.1| replace:: `5.1.1 : Objects, Classes, and Instances`\n"
"\n"
".. _jn5.1.2 : http://math.hws.edu/javanotes/c5/s1.html#OOP.1.2\n"
".. |jn5.1.2| replace:: `5.1.2 : Fundamentals of Objects`\n"
"\n"
".. _jn5.1.3 : http://math.hws.edu/javanotes/c5/s1.html#OOP.1.3\n"
".. |jn5.1.3| replace:: `5.1.3 : Getters and Setters`\n"
"\n"
".. _jn5.2 : http://math.hws.edu/javanotes/c5/s2.html\n"
".. |jn5.2| replace:: `5.2 : Constructors and Object Initialization`\n"
"\n"
".. _jn5.2.1 : http://math.hws.edu/javanotes/c5/s2.html#OOP.2.1\n"
".. |jn5.2.1| replace:: `5.2.1 : Initializing Instance Variables`\n"
"\n"
".. _jn5.2.2 : http://math.hws.edu/javanotes/c5/s2.html#OOP.2.2\n"
".. |jn5.2.2| replace:: `5.2.2 : Constructors`\n"
"\n"
".. _jn5.2.3 : http://math.hws.edu/javanotes/c5/s2.html#OOP.2.3\n"
".. |jn5.2.3| replace:: `5.2.3 : Garbage Collection`\n"
"\n"
".. _jn5.4 : http://math.hws.edu/javanotes/c5/s4.html\n"
".. |jn5.4| replace:: `5.4 : Programming Example: Card, Hand, Deck`\n"
"\n"
".. _jn5.4.1 : http://math.hws.edu/javanotes/c5/s4.html#OOP.4.1\n"
".. |jn5.4.1| replace:: `5.4.1 : Designing the classes`\n"
"\n"
".. _jn5.4.2 : http://math.hws.edu/javanotes/c5/s4.html#OOP.4.2\n"
".. |jn5.4.2| replace:: `5.4.2 : The Card Class`\n"
"\n"
".. _jn5.4.3 : http://math.hws.edu/javanotes/c5/s4.html#OOP.4.3\n"
".. |jn5.4.3| replace:: `5.4.3 : Example: A Simple Card Game`\n"
"\n"
".. _TextIO : http://math.hws.edu/eck/cs124/javanotes6/source/TextIO.java\n"
".. |TextIO| replace:: ``TextIO``\n"
msgstr ""

#. name
#: m06_qcm/task.yaml
msgid "Mission 6: QCM"
msgstr ""

#. name, q1, name
#: m06_qcm/task.yaml
msgid "Classe, objets et instances"
msgstr ""

#. name, q1, header
#: m06_qcm/task.yaml
msgid ""
"\n"
"Soit le code Java suivant\n"
"\n"
".. code-block:: java\n"
"\n"
"    public class PairOfDice {\n"
"\n"
"        public int die1;   // Number showing on the first die.\n"
"        public int die2;   // Number showing on the second die.\n"
"\n"
"        /**\n"
"         * @pre val1, val2 are valid die values\n"
"         * @post creates a pair of dice that are initially\n"
"         *       showing the values val1 and val2.\n"
"         */\n"
"        public PairOfDice(int val1, int val2) {\n"
"             die1 = val1;\n"
"             die2 = val2;\n"
"        }\n"
"\n"
"        /**\n"
"         * @pre -\n"
"         * @post rolled the dice by setting each of the dice\n"
"         *       to be a random number between 1 and 6.\n"
"         */\n"
"        public void roll() {\n"
"             die1 = (int)(Math.random()*6) + 1;\n"
"             die2 = (int)(Math.random()*6) + 1;\n"
"        }\n"
"\n"
"    } // end class PairOfDice\n"
"\n"
"Laquelle des propositions ci-dessous est correcte ?\n"
msgstr ""

#. name, q1, text
#: m06_qcm/task.yaml
msgid ""
"\n"
"* Ce code définit une classe ``PairOfDice``.\n"
"* Chaque instance de ``PairOfDice`` a sa propre copie de ``die1``.\n"
"* ``roll()`` est une méthode d'instance de la classe ``PairOfDice``.\n"
msgstr ""

#. name, q1, text
#: m06_qcm/task.yaml
msgid ""
"\n"
"* Une instance de ``PairOfDice`` est un objet.\n"
"* ``die1`` est une variable d'instance de la classe ``PairOfDice``.\n"
"* L'effet de l'exécution de la méthode ``roll()`` dépend de l'instance à "
"laquelle elle s'applique.\n"
msgstr ""

#. name, q1, text
#: m06_qcm/task.yaml
msgid ""
"\n"
"* Ce code définit un objet ``PairOfDice``.\n"
"* ``die1`` est une variable d'instance de la classe ``PairOfDice``.\n"
"* ``roll()`` est une méthode d'instance de la classe ``PairOfDice``.\n"
msgstr ""

#. name, q1, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"Ce code définit une *classe*, pas un objet.\n"
msgstr ""

#. name, q1, text
#: m06_qcm/task.yaml
msgid ""
"\n"
"* Une instance de ``PairOfDice`` est un objet.\n"
"* ``die1`` est une variable partagée entre les instances de ``PairOfDice``.\n"
"* ``roll()`` est une méthode d'instance de la classe ``PairOfDice``.\n"
msgstr ""

#. name, q1, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"``die1`` est une variable d'instance, elle n'est pas partagée.\n"
msgstr ""

#. name, q1, text
#: m06_qcm/task.yaml
msgid ""
"\n"
"* Une instance de ``PairOfDice`` est un objet.\n"
"* Chaque instance de ``PairOfDice`` a sa propre copie de ``die1``.\n"
"* ``roll()`` est une méthode de classe de la classe ``PairOfDice``.\n"
msgstr ""

#. name, q1, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"``roll()`` est une méthode d'instance.\n"
msgstr ""

#. name, q1, text
#: m06_qcm/task.yaml
msgid ""
"\n"
"* Une instance de ``die1`` est un entier.\n"
"* Chaque instance de ``PairOfDice`` a sa propre copie de ``die1``.\n"
"* L'effet de l'exécution de la méthode ``roll()`` dépend de l'instance à "
"laquelle elle s'applique.\n"
msgstr ""

#. name, q1, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"La notion d'instance s'applique aux classes et aux objets, pas aux "
"variables.\n"
msgstr ""

#. name, q1, text
#: m06_qcm/task.yaml
msgid ""
"\n"
"* Ce code définit une classe ``PairOfDice``.\n"
"* ``die1`` est une variable locale de la classe ``PairOfDice``.\n"
"* L'effet de l'exécution de la méthode ``roll()`` dépend de l'instance à "
"laquelle elle s'applique.\n"
msgstr ""

#. name, q1, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"Une variable locale est définie à l'intérieur du corps d'une méthode.\n"
msgstr ""

#. name, q1, text
#: m06_qcm/task.yaml
msgid ""
"\n"
"* Une instance de ``PairOfDice`` est un objet.\n"
"* ``die1`` est une variable d'instance de la classe ``PairOfDice``.\n"
"* L'effet de l'exécution de la méthode ``roll()`` est indépendant de "
"l'instance à laquelle elle s'applique.\n"
msgstr ""

#. name, q1, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"``roll()`` est une méthode d'instance et utilise les variables d'instance de "
"la classe.\n"
msgstr ""

#. name, q2, name
#: m06_qcm/task.yaml
msgid "Définition de classe"
msgstr ""

#. name, q2, header
#: m06_qcm/task.yaml
msgid ""
"\n"
"Laquelle des définitions suivantes définit correctement une classe dont les "
"instances représentent des fractions (num / den), telle que les "
"instructions\n"
"\n"
".. code-block:: java\n"
"\n"
"  Fraction f = new Fraction(3,4);\n"
"  System.out.println(f.valeur());\n"
"\n"
"imprime le résultat ``0.75``  ?\n"
msgstr ""

#. name, q2, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public class Fraction {\n"
"       private int num;  // numérateur\n"
"       private int den;  // dénominateur\n"
"\n"
"       public Fraction(int n, int d) {\n"
"           num = n;\n"
"           den = d;\n"
"       }\n"
"\n"
"       public double valeur() {\n"
"           return ((double) num) / ((double) den);\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q2, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public class Fraction {\n"
"       private int num;  // numérateur\n"
"       private int den;  // dénominateur\n"
"\n"
"       public Fraction(int n, int d) {\n"
"           num = n;\n"
"           den = d;\n"
"       }\n"
"\n"
"       public static double valeur() {\n"
"           return ((double) num) / ((double) den);\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q2, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"La méthode ``valeur`` doit être une méthode d'instance, pour avoir accès aux "
"variables d'instance de chaque instance de ``Fraction``.\n"
msgstr ""

#. name, q2, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public class Fraction {\n"
"       private int num;  // numérateur\n"
"       private int den;  // dénominateur\n"
"\n"
"       public void Fraction(int n, int d) {\n"
"           num = n;\n"
"           den = d;\n"
"       }\n"
"\n"
"       public double valeur() {\n"
"           return ((double) num) / ((double) den);\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q2, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"La signature du constructeur est incorrecte.\n"
msgstr ""

#. name, q2, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public class Fraction {\n"
"       private int num;  // numérateur\n"
"       private int den;  // dénominateur\n"
"\n"
"       public Fraction(int n, int d) {\n"
"           new Fraction(n,d);\n"
"           num = n;\n"
"           den = d;\n"
"       }\n"
"\n"
"       public double valeur() {\n"
"           return ((double) num) / ((double) den);\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q2, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"La construction 'new Fraction(n,d)' fait appel au constructeur, elle ne doit "
"pas se trouver dans la définition de ce constructeur.\n"
msgstr ""

#. name, q2, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public class Fraction {\n"
"       private int num = 0;  // numérateur\n"
"       private int den = 1;  // dénominateur\n"
"\n"
"       public Fraction(int n, int d) {\n"
"           num = n;\n"
"           den = d;\n"
"       }\n"
"\n"
"       public double valeur(Fraction f) {\n"
"           return ((double) num) / ((double) den);\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q2, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"Dans ``valeur``, il n'est pas nécessaire de passer la fraction comme "
"paramètre.\n"
msgstr ""

#. name, q3, name
#: m06_qcm/task.yaml
msgid "Initialisation d'objets"
msgstr ""

#. name, q3, header
#: m06_qcm/task.yaml
msgid ""
"\n"
"Sur base de la définition de la question précédente, que se passe-t-il si on "
"tente de compiler et d'exécuter (séparément) les trois suites d'instructions "
"suivantes ?\n"
"\n"
"1.\n"
"\n"
".. code-block:: java\n"
"\n"
"    Fraction f;\n"
"    System.out.println(f.valeur());\n"
"\n"
"2.\n"
"\n"
".. code-block:: java\n"
"\n"
"    Fraction f = new Fraction(3, 4);\n"
"    System.out.println(f.valeur());\n"
"\n"
"3.\n"
"\n"
".. code-block:: java\n"
"\n"
"    Fraction f = null;\n"
"    System.out.println(f.valeur());\n"
"\n"
msgstr ""

#. name, q3, text
#: m06_qcm/task.yaml
msgid ""
"\n"
"1. Erreur à l'exécution: ``f`` est une référence nulle\n"
"2. Imprime \"0.75\"\n"
"3. Erreur à l'exécution: ``f`` est une référence nulle\n"
msgstr ""

#. name, q3, text
#: m06_qcm/task.yaml
msgid ""
"\n"
"1. Imprime \"0.0\"\n"
"2. Imprime \"0.75\"\n"
"3. Erreur à l'exécution: ``f`` est une référence nulle\n"
msgstr ""

#. name, q3, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"Dans le cas 1, ``f`` n'est pas initialisé donc ne référencie aucun objet.\n"
msgstr ""

#. name, q3, text
#: m06_qcm/task.yaml
msgid ""
"\n"
"1. Erreur à l'exécution: ``f`` est une référence nulle\n"
"2. Imprime \"0.75\"\n"
"3. Imprime \"0.0\"\n"
msgstr ""

#. name, q3, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"La référence ``null`` ne référencie aucun objet, le cas 3 est identique au "
"cas 1.\n"
msgstr ""

#. name, q3, text
#: m06_qcm/task.yaml
msgid ""
"\n"
"1. Erreur de compilation\n"
"2. Imprime \"0.75\"\n"
"3. Erreur de compilation\n"
msgstr ""

#. name, q3, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"Les trois sont corrects par rapport à la syntaxe et aux types, la "
"compilation ne pose pas de problème.\n"
msgstr ""

#. name, q3, text
#: m06_qcm/task.yaml
msgid ""
"\n"
"1. Imprime \"0.0\"\n"
"2. Imprime \"0.75\"\n"
"3. Imprime \"0.0\"\n"
msgstr ""

#. name, q3, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"Dans les cas 1 et 3, ``f`` ne référencie aucun objet.\n"
msgstr ""

#. name, q4, name
#: m06_qcm/task.yaml
msgid "Accesseurs et mutateurs"
msgstr ""

#. name, q4, header
#: m06_qcm/task.yaml
msgid ""
"\n"
"Comment définirait-on un accesseur (getter) et un mutateur (setter) pour la "
"variable d'instance ``num`` de la classe ``Fraction`` à la question 2, tels "
"qu'utilisés dans l'exemple suivant\n"
"\n"
".. code-block:: java\n"
"\n"
"  Fraction f = new Fraction(3, 4);\n"
"  System.out.println(f.getNum());  // imprime \"3\"\n"
"  f.setNum(5);\n"
"  System.out.println(f.getNum());  // imprime \"5\"\n"
msgstr ""

#. name, q4, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public int getNum() {\n"
"       return num;\n"
"   }\n"
"   public void setNum(int n) {\n"
"       num = n;\n"
"   }\n"
msgstr ""

#. name, q4, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public int getNum() {\n"
"       System.out.println(num);\n"
"   }\n"
"   public void setNum() {\n"
"       num = TextIO.getInt();\n"
"   }\n"
msgstr ""

#. name, q4, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"Il s'agit de permettre au reste du programme de lire et modifier la "
"variable, pas à l'utilisateur.\n"
msgstr ""

#. name, q4, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public void getNum(int n) {\n"
"       n = num;\n"
"   }\n"
"   public void setNum(int n) {\n"
"       num = n;\n"
"   }\n"
msgstr ""

#. name, q4, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"La méthode ``getNum()`` ne sert à rien tel que définie ici.\n"
msgstr ""

#. name, q4, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public int getNum() {\n"
"       return num;\n"
"   }\n"
"   public int setNum(int n) {\n"
"       num = n;\n"
"       return num;\n"
"   }\n"
msgstr ""

#. name, q4, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"Dans ``setNum()``, pourquoi retourner la valeur modifiée?\n"
msgstr ""

#. name, q4, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public int f1() {\n"
"       return num;\n"
"   }\n"
"   public void f2(int n) {\n"
"       num = n;\n"
"   }\n"
msgstr ""

#. name, q4, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"Ceci peut fonctionner, mais pourquoi prendre des noms de méthode qui ne "
"signifient rien et violent les conventions usuelles ?  La lisibilité du code "
"est un facteur de qualité important.\n"
msgstr ""

#. name, q5, name
#: m06_qcm/task.yaml
msgid "Constructeurs"
msgstr ""

#. name, q5, header
#: m06_qcm/task.yaml
msgid ""
"\n"
"Soit la classe suivante\n"
"\n"
".. code-block:: java\n"
"\n"
"    public class Etudiant {\n"
"        String nom;\n"
"        String matricule;\n"
"        boolean bisseur = false;\n"
"\n"
"        // ... méthodes\n"
"    }\n"
"\n"
"Parmi les définitions de constructeurs suivantes, laquelle est correcte ?\n"
msgstr ""

#. name, q5, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   // un étudiant non-bisseur\n"
"   public Etudiant(String n, String m) {\n"
"       nom = n;\n"
"       matricule = m;\n"
"   }\n"
msgstr ""

#. name, q5, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   // un étudiant anonyme\n"
"   public Etudiant(String m, boolean b) {\n"
"       nom = \"[anonyme]\";\n"
"       matricule = m;\n"
"       bisseur = b;\n"
"   }\n"
msgstr ""

#. name, q5, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   // un étudiant bisseur\n"
"   public Bisseur(String n, String m) {\n"
"       nom = n;\n"
"       matricule = m;\n"
"       bisseur = true;\n"
"   }\n"
msgstr ""

#. name, q5, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"Le constructeur doit avoir le nom de la classe.\n"
msgstr ""

#. name, q5, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   // un étudiant sans matricule\n"
"   public static Etudiant(String n, boolean b) {\n"
"       nom = n;\n"
"       matricule = \"000000\";\n"
"       bisseur = b;\n"
"   }\n"
msgstr ""

#. name, q5, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"Un constructeur ne peut pas être déclaré ``static``.\n"
msgstr ""

#. name, q5, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   // un étudiant anonyme\n"
"   public Etudiant(String m) {\n"
"       matricule = m;\n"
"       bisseur = false;\n"
"   }\n"
msgstr ""

#. name, q5, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"La variable ``nom`` n'est pas initialisée.\n"
msgstr ""

#. name, q5, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   // un étudiant non-bisseur\n"
"   public Etudiant(String n, String m) {\n"
"       nom = n;\n"
"       matricule = m;\n"
"       return;\n"
"   }\n"
msgstr ""

#. name, q5, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"L'instruction ``return`` est superflue et interdite dans un constructeur.\n"
msgstr ""

#. name, q6, name
#: m06_qcm/task.yaml
msgid "Références"
msgstr ""

#. name, q6, header
#: m06_qcm/task.yaml
msgid ""
"\n"
"Soit la classe ``Compteur`` suivante\n"
"\n"
".. code-block:: java\n"
"\n"
"    public class Compteur {\n"
"        private int compte;  // le compteur\n"
"\n"
"        public Compteur(int n) {\n"
"            compte = n;\n"
"        }\n"
"\n"
"        public void ajout(int n) {\n"
"            compte = compte + n;\n"
"        }\n"
"\n"
"        public int valeur() {\n"
"            return compte;\n"
"        }\n"
"    }\n"
"\n"
"Qu'imprime le programme suivant\n"
"\n"
".. code-block:: java\n"
"\n"
"        Compteur c1 = new Compteur(10);\n"
"        Compteur c2 = new Compteur(20);\n"
"        c1.ajout(5);\n"
"        System.out.println(c1.valeur() + \",\" + c2.valeur());\n"
"        c1.ajout(10);\n"
"        c1 = c2;\n"
"        c2.ajout(20);\n"
"        System.out.println(c1.valeur() + \",\" + c2.valeur());\n"
"        c2 = new Compteur(0);\n"
"        System.out.println(c1.valeur() + \",\" + c2.valeur());\n"
msgstr ""

#. name, q6, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   15,20\n"
"   40,40\n"
"   40,0\n"
msgstr ""

#. name, q6, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   15,20\n"
"   20,40\n"
"   20,0\n"
msgstr ""

#. name, q6, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"Après l'instruction ``c1 = c2``, ``c1`` et ``c2`` sont des références au "
"même objet; ``c2.ajout(20)`` agit aussi sur l'objet référencé par ``c1``.\n"
msgstr ""

#. name, q6, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   15,20\n"
"   40,40\n"
"   0,0\n"
msgstr ""

#. name, q6, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"Après ``c2 = new Compteur(0)``, seule ``c2`` réfère au nouvel objet créé; "
"``c1`` est inchangé.\n"
msgstr ""

#. name, q6, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   15,20\n"
"   25,40\n"
"   25,0\n"
msgstr ""

#. name, q6, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"Attention à l'instruction ``c1 == c2``.\n"
msgstr ""

#. name, q6, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   10,20\n"
"   20,20\n"
"   20,0\n"
msgstr ""

#. name, q6, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"Que fait la méthode ``ajout()`` ?\n"
msgstr ""

#. name, q7, name
#: m06_qcm/task.yaml
msgid "toString()"
msgstr ""

#. name, q7, header
#: m06_qcm/task.yaml
msgid ""
"\n"
"Comment écrirait-on une méthode pour la classe ``Etudiant`` de la question "
"5, telle que le code suivant\n"
"\n"
".. code-block:: java\n"
"\n"
"    Etudiant etud = new Etudiant(\"John Doe\", \"987612\");\n"
"    System.out.println(etud);\n"
"\n"
"affiche le texte suivant :\n"
"\n"
"    ``John Doe (987612) non-bisseur``\n"
"\n"
msgstr ""

#. name, q7, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"       public String toString() {\n"
"           String s = nom + \" (\" + matricule + \")\";\n"
"           if (bisseur) {\n"
"               s = s + \" bisseur\";\n"
"           } else {\n"
"               s = s + \" non-bisseur\";\n"
"           }\n"
"           return s;\n"
"       }\n"
msgstr ""

#. name, q7, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"       public String asString() {\n"
"           String s = nom + \" (\" + matricule + \")\";\n"
"           if (bisseur) {\n"
"               s = s + \" bisseur\";\n"
"           } else {\n"
"               s = s + \" non-bisseur\";\n"
"           }\n"
"           return s;\n"
"       }\n"
msgstr ""

#. name, q7, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"La méthode doit s'appeler ``toString`` pour pouvoir être appelée "
"implicitement, par exemple dans ``System.out.println``.\n"
msgstr ""

#. name, q7, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"       public String toString(String s) {\n"
"           s = nom + \" (\" + matricule + \")\";\n"
"           if (bisseur) {\n"
"               s = s + \" bisseur\";\n"
"           } else {\n"
"               s = s + \" non-bisseur\";\n"
"           }\n"
"           return s;\n"
"       }\n"
msgstr ""

#. name, q7, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"La méthode doit avoir exactement la signature ``String toString()`` pour "
"pouvoir être appelée implicitement, par exemple dans ``System.out."
"println``.\n"
msgstr ""

#. name, q7, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"       public String toString() {\n"
"           return nom + \" (\" + matricule + \")\";\n"
"           if (bisseur) {\n"
"               return \" bisseur\";\n"
"           } else {\n"
"               return \" non-bisseur\";\n"
"           }\n"
"       }\n"
msgstr ""

#. name, q7, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"Seul le premier ``return`` exécuté sera pris en compte.  Révisez les appels "
"de méthodes.\n"
msgstr ""

#. name, q7, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"       public String toString() {\n"
"           System.out.println(nom + \" (\" + matricule + \")\";\n"
"           if (bisseur) {\n"
"               System.out.println(\" bisseur\");\n"
"           } else {\n"
"               System.out.println(\" non-bisseur\");\n"
"           }\n"
"       }\n"
msgstr ""

#. name, q7, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"La méthode ``toString()`` doit retourner le string et non l'imprimer.\n"
msgstr ""

#. name, q7, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"       public String toString() {\n"
"           String s = nom + \" (\" + matricule + \")\";\n"
"           if (bisseur) {\n"
"               s = s + \" bisseur\";\n"
"           } else {\n"
"               s = s + \" non-bisseur\";\n"
"           }\n"
"       }\n"
msgstr ""

#. name, q7, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"Cette méthode ne retourne rien...\n"
msgstr ""

#. name, q8, name
#: m06_qcm/task.yaml
msgid " TextIO"
msgstr ""

#. name, q8, header
#: m06_qcm/task.yaml
msgid ""
"\n"
"Parmi les portions de programme suivantes, laquelle permet d'imprimer à la "
"console le contenu du fichier ``README`` ?\n"
msgstr ""

#. name, q8, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   TextIO.readFile(\"README\");\n"
"   while (!TextIO.eof()) {\n"
"       System.out.println(TextIO.getln());\n"
"   }\n"
msgstr ""

#. name, q8, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   TextIO.readFile(\"README\");\n"
"   while (true) {\n"
"       System.out.println(TextIO.getln());\n"
"   }\n"
msgstr ""

#. name, q8, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"Cette version produira une erreur à la fin du fichier.\n"
msgstr ""

#. name, q8, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   while (!TextIO.eof(\"README\")) {\n"
"       System.out.println(TextIO.getln(\"README\"));\n"
"   }\n"
msgstr ""

#. name, q8, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"L'utilisation de ``eof()`` et ``getln()`` ne correspond pas à leur signature "
"documentée dans l'API.  Ce code donne donne une erreur de compilation.\n"
msgstr ""

#. name, q8, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   TextIO.open(\"README\");\n"
"   while (TextIO.hasNext()) {\n"
"       System.out.println(TextIO.next());\n"
"   }\n"
msgstr ""

#. name, q8, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"Ces noms de méthodes n'existent pas dans ``TextIO``.\n"
msgstr ""

#. name, q8, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   TextIO.readFile(\"README\");\n"
"   while (TextIO.eof()) {\n"
"       System.out.println(TextIO.getWord());\n"
"   }\n"
msgstr ""

#. name, q8, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"Deux erreurs: un caractère manquant (qui change tout) dans la condition du "
"``while`` et l'utilisation inappropriée de ``getWord()``.\n"
msgstr ""

#. name, q8, text
#: m06_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   TextIO.readFile(\"README\");\n"
"   String s = TextIO.getln();\n"
"   while (!TextIO.eof(s)) {\n"
"       System.out.print(s);\n"
"       s = TextIO.getln();\n"
"   }\n"
msgstr ""

#. name, q8, feedback
#: m06_qcm/task.yaml
msgid ""
"\n"
"Ce n'est pas ainsi qu'on utilise ``TextIO.eof()``.\n"
msgstr ""

#. context
#: m06dem1/task.yaml
msgid ""
"Maintenant que les objets sont une notion un peu plus familière, nous allons "
"vous demander de travailler avec des classes en Java, qui ne sont maintenant "
"plus de simple conteneurs à méthodes ``static``.\n"
"\n"
"Considérez la classe ``Pair`` suivante :\n"
"\n"
".. code-block:: java\n"
"\n"
"    public static class Pair{\n"
"        private int a;    // le premier élément de la paire\n"
"        private int b;    // le second élément de la paire\n"
"\n"
"        /**\n"
"         *     @pre     -\n"
"         *     @post    crée une paire avec a et b non-initialisés\n"
"         */\n"
"         public Pair(){\n"
"\n"
"         }\n"
"\n"
"        /**\n"
"         * @pre    -\n"
"         * @post    crée une paire composée de x et y\n"
"         */\n"
"         public Pair(int x, int y){\n"
"            a = x;\n"
"            b = y;\n"
"         }\n"
"\n"
"        /**\n"
"         * @pre    -\n"
"         * @post    donne au premier élément de la paire la valeur nA\n"
"         */\n"
"         public void setA(int nA){\n"
"            a = nA;\n"
"         }\n"
"\n"
"        /**\n"
"         * @pre    -\n"
"         * @post    donne au second élément de la paire la valeur nB\n"
"         */\n"
"         public void setB(int nB){\n"
"            b = nB;\n"
"         }\n"
"\n"
"        /**\n"
"         * @pre     -\n"
"         * @post    retourne le premier élément de la paire\n"
"         */\n"
"         public int getA(){\n"
"            return a;\n"
"         }\n"
"\n"
"        /**\n"
"         * @pre    -\n"
"         * @post    retourne le second élément de la paire\n"
"         */\n"
"         public int getB(){\n"
"            return b;\n"
"         }\n"
"\n"
"        /**\n"
"         * @pre        -\n"
"         * @post    retourne une nouvelle instance de Pair dont les deux\n"
"         *             éléments sont les opposés de ceux de cette paire-ci.\n"
"         *            L'instance appelante reste inchangée.\n"
"         */\n"
"         public Pair opposite(){\n"
"             // À implémenter\n"
"         }\n"
"    }\n"
"\n"
"Prenez le temps d'analyser cette classe, puis, une fois que vous l'aurez "
"bien comprise, implémentez le corps de la méthode ``opposite`` de la classe "
"pair. Cette méthode renvoie une nouvelle instance de la classe ``Pair`` "
"telle que ses variables d'instance, ``a`` et ``b``, valent l'opposé des "
"variables ``a`` et ``b`` de l'instance qui y fait appel. Voici un exemple de "
"l'utilisation de cette méthode :\n"
"\n"
".. code-block:: java\n"
"\n"
"    Pair p,q;\n"
"    p = new Pair();\n"
"    p.setA(10);\n"
"    p.setB(-2);\n"
"    q = p.opposite();\n"
"    System.out.println(q.getA() +  \", \" + q.getB());    // affiche \"-10, "
"2\"\n"
"\n"
msgstr ""

#. name
#: m06dem1/task.yaml
msgid "Mission 6 : Question de démarrage 1 : Pair.opposite()"
msgstr ""

#. name, q1, name
#: m06dem1/task.yaml
msgid "La méthode opposite"
msgstr ""

#. name, q1, header
#: m06dem1/task.yaml
msgid ""
"Implémentez ici le corps de la méthode opposite. Vérifiez bien les "
"spécifications. Veillez à n'implémenter que le corps de la méthode, ne "
"recopiez pas sa signature."
msgstr ""

#. context
#: m06dem2/task.yaml
msgid ""
"Considérez maintenant la classe ``OrderedPair``, qui prend comme variable "
"d'instance un objet de type ``Pair`` dont la classe se trouve dans la "
"queston précédente. Voici la classe ``OrderedPair`` :\n"
"\n"
".. code-block:: java\n"
"\n"
"    public class OrderedPair {\n"
"\n"
"        private boolean ordered;  /* vrai si p est ordonnée */\n"
"                                /* p.getA() <= p.getB() */\n"
"        private Pair p;\n"
"\n"
"        /**\n"
"         * @pre -\n"
"         * @post crée un paire ordonnée (0,0)\n"
"         */\n"
"        public OrderedPair() {\n"
"          p = new Pair(0, 0);\n"
"          ordered = true;\n"
"        }\n"
"\n"
"        /**\n"
"         * @pre -\n"
"         * @post donne au premier élément de la paire la valeur nA\n"
"         */\n"
"        public void setA(int nA) {\n"
"          // À implémenter\n"
"        }\n"
"        /**\n"
"         * @pre -\n"
"         * @post donne au second élément de la paire la valeur nB\n"
"         */\n"
"        public void setB(int nB) {\n"
"          // À implémenter\n"
"        }\n"
"\n"
"        /**\n"
"         * @pre    -\n"
"         * @post donne à la variable ordered la valeur nOrdered\n"
"         */\n"
"         public void setOrdered(boolean nOrdered){\n"
"             /* Pas donné */\n"
"         }\n"
"\n"
"        /**\n"
"         * @pre -\n"
"         * @post retourne vrai si la paire est ordonnée, faux sinon\n"
"         */\n"
"        public boolean getOrdered() {\n"
"          return ordered;\n"
"        }\n"
"\n"
"        /**\n"
"         * @pre -\n"
"         * @post retourne le premier élément de la paire\n"
"         */\n"
"        public int getA() {\n"
"          return p.getA();\n"
"        }\n"
"\n"
"        /**\n"
"         * @pre -\n"
"         * @post retourne le second élément de la paire\n"
"         */\n"
"        public int getB() {\n"
"          return p.getB();\n"
"        }\n"
"    }\n"
"\n"
"Le but de l'exercice est d'implémenter les méthodes ``setA()`` et ``setB()`` "
"sans oublier de mettre à jour ``ordered`` en fonction des nouvelles valeurs "
"des nombres dans la paire."
msgstr ""

#. name
#: m06dem2/task.yaml
msgid "Mission 6 : Question de démarrage 2 : OrderedPair"
msgstr ""

#. name, q1, name
#: m06dem2/task.yaml
msgid "setA()"
msgstr ""

#. name, q1, header
#: m06dem2/task.yaml
msgid ""
"Implémentez le corps de ``setA()``. N'oubliez pas de mettre à jour "
"``ordered``."
msgstr ""

#. name, q2, name
#: m06dem2/task.yaml
msgid "setB()"
msgstr ""

#. name, q2, header
#: m06dem2/task.yaml
msgid ""
"Implémentez le corps de ``setB()``. N'oubliez pas de mettre à jour "
"``ordered``."
msgstr ""

#. context
#: m06dem3/task.yaml
msgid ""
"Un étudiant a écrit la classe ``Drapeau`` ci-dessous. Il aimerait y ajouter "
"la méthode ``same`` permettant de savoir si deux objets ``Drapeau`` sont "
"dans le même état, mais il ne sait pas bien comment s'y prendre et vous "
"demande votre aide pour y arriver.\n"
"\n"
"Voici la classe ``Drapeau`` :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /**\n"
"     * Une classe simple avec un objet contenant un booleen\n"
"     */\n"
"\n"
"    public static class Drapeau {\n"
"        private boolean drapeau; // la valeur du drapeau\n"
"\n"
"        // Constructeur\n"
"        /**\n"
"         * @pre : -\n"
"         * @post : un objet de type Drapeau est cree et\n"
"         *            represente le booleen passe en argument\n"
"         */\n"
"        public Drapeau(boolean b) {\n"
"            drapeau = b;\n"
"        }\n"
"\n"
"        /**\n"
"         * @pre -\n"
"         * @post le drapeau vaut b\n"
"         */\n"
"        public void set(boolean b) {\n"
"            drapeau = b;\n"
"        }\n"
"\n"
"        /**\n"
"         * @pre -\n"
"         * @post retourne la valeur du drapeau\n"
"         */\n"
"        public boolean get() {\n"
"            return drapeau;\n"
"        }\n"
"\n"
"        /**\n"
"         *    @pre     -\n"
"         *    @post     Retourne true si d.get() == this.get().\n"
"         *            Retourne false sinon\n"
"         */\n"
"        public boolean same(Drapeau d){\n"
"            // À implémenter\n"
"        }\n"
"    }\n"
"\n"
"Aidez cet étudiant en détresse et implémentez la méthode ``same`` dont les "
"spécifications sont fournies ci-dessus. Pensez à gérer le cas où ``d == "
"null``, car les préconditions ne font aucune supposition."
msgstr ""

#. name
#: m06dem3/task.yaml
msgid "Mission 6 : Question de démarrage 3 : Drapeau.same()"
msgstr ""

#. name, q1, name
#: m06dem3/task.yaml
msgid "La méthode same()"
msgstr ""

#. name, q1, header
#: m06dem3/task.yaml
msgid ""
"Implémentez ici le corps de la méthode ``public boolean same(Drapeau d)``"
msgstr ""

#. context
#: m06dem4/task.yaml
msgid ""
"Depuis le début du cours, la librairie ``TextIO`` (http://math.hws.edu/eck/"
"cs124/javanotes6/source/TextIO.java) vous permet de lire des messages sur "
"l'entrée standard. Cependant, ``TextIO`` permet aussi de lire des fichiers. "
"En analysant la librairie ``TextIO``, complétez les deux lignes incomplètes "
"de manière à lire complètement le fichier ``cotes.txt`` qui contient les "
"cotes de plusieurs personnes.\n"
"\n"
"Voici le code à compléter :\n"
"\n"
".. code-block:: java\n"
"\n"
"    public static void lireCotes() {\n"
"        /*1*/\n"
"        while (/*2*/) {\n"
"            String prenom = TextIO.getWord();\n"
"            String nom = TextIO.getWord();\n"
"            int cote = TextIO.getInt();\n"
"            TextIO.getln();\n"
"            System.out.println(nom + \", \" + prenom + \": \" + cote);\n"
"        }\n"
"        System.out.println(\"Le fichier a été lu entièrement.\");\n"
"    }"
msgstr ""

#. name
#: m06dem4/task.yaml
msgid "Mission 6 : Question de démarrage 4 : Lecture de fichiers"
msgstr ""

#. name, q1, name
#: m06dem4/task.yaml
msgid "La ligne /*1*/"
msgstr ""

#. name, q1, header
#: m06dem4/task.yaml
msgid ""
"Écrivez ici la ligne 1 permettant d'effectuer des opérations sur le fichier "
"\"cotes.txt\"."
msgstr ""

#. name, q2, name
#: m06dem4/task.yaml
msgid "La condition /*2*/"
msgstr ""

#. name, q2, header
#: m06dem4/task.yaml
msgid ""
"Écrivez ici la contition dans le while permettant à la boucle de s'arrêter "
"une fois le fichier cotes.txt entièrement lu. Ne recopiez pas l'instruction "
"while, écrivez juste la condition nécessaire au bon fonctionnement du "
"programme."
msgstr ""

#. context
#: m06real/task.yaml
msgid ""
"Vous pouvez soumettre ici ou via BlueJ votre phase de réalisation pour la "
"Mission 6.\n"
"\n"
"Vous attendons une archive **.zip** contenant uniquement les fichiers :\n"
"\n"
"- TestChanson.java\n"
"- TestTemps.java\n"
"- TextIO.java\n"
"- Chanson.java\n"
"- Temps.java\n"
"- Programme.java\n"
"- README.txt"
msgstr ""

#. name
#: m06real/task.yaml
msgid "Mission 6: Phase de réalisation: Soumission"
msgstr ""

#. name, q1, name
#: m06real/task.yaml
msgid "Phase de réalisation de la Mission 6"
msgstr ""

#. context
#: m07Q1/task.yaml
msgid ""
"On vous donne la classe Employe dont voici le corps :\n"
"\n"
".. code-block:: java\n"
"\n"
"  public class Employe{\n"
"    private String nom ;\n"
"    private double salaire ;\n"
"\n"
"    /*\n"
"     * Constructeur\n"
"     * @pre nom != null, salaire > 0\n"
"     * @post a construit une instance de la classe Employe avec nom et "
"salaire\n"
"     */\n"
"    public Employe ( String nom, double salaire){\n"
"        this.nom = nom ;\n"
"        this.salaire = salaire ;\n"
"    }\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne le nom de l'employé this\n"
"     */\n"
"    public String getNom(){\n"
"        return nom ;\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne le salaire de l'employé this\n"
"     */\n"
"    public double getSalaire() {\n"
"        return salaire ;\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne un String décrivant l'employé this\n"
"     */\n"
"    public String toString() {\n"
"        //Non fourni\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne true si this et other sont deux employés qui ont le "
"même nom et le même salaire\n"
"     */\n"
"    public boolean equals(Object other){\n"
"        //A compléter\n"
"    }\n"
"  }"
msgstr ""

#. name
#: m07Q1/task.yaml
msgid "Mission 7 : Q* Employe - Méthode equals"
msgstr ""

#. name, q1, name
#: m07Q1/task.yaml m07Q3/task.yaml
msgid "Méthode equals"
msgstr ""

#. name, q1, header
#: m07Q1/task.yaml m07Q3/task.yaml
msgid "Ecrivez le *contenu* de la méthode ``equals``."
msgstr ""

#. context
#: m07Q10/task.yaml
msgid ""
"On vous donne la classe DeStats dont voici le corps:\n"
"\n"
".. code-block:: java\n"
"\n"
"    public class DeStats extends De {\n"
"\n"
"        private int lances;\n"
"        private int[] resultats;\n"
"\n"
"        /*\n"
"         * @pre s != null;\n"
"         * @post Crée une instance de la classe DeStats\n"
"         *       avec comme nom s\n"
"         */\n"
"        public DeStats(String s) {\n"
"            /* Code non fourni */\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne le tableau des résultats du dé this\n"
"         */\n"
"        public int[] getResultats() {\n"
"            // A complèter\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre 1 <= n <= 6\n"
"         * @post retourne le nombre de fois que le dé\n"
"         *       a donné comme résultat n\n"
"         */\n"
"        public int statistique(int n) {\n"
"            return this.resultat[n-1];\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post incrémente le nombre de lancés et le\n"
"         *       nombre de fois qu'un chiffre est sorti.\n"
"         *       Retourne le chiffre que le dé a donné.\n"
"         */\n"
"        public int lance() {\n"
"            /* Code non fourni */\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne le nombre de lancés du dé this\n"
"         */\n"
"        public int getLances() {\n"
"            return this.lances;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne une description du dé sous forme\n"
"         *       d'un String. Le format retourné est le nom du\n"
"         *       dé suivi des statistique.\n"
"         *       Par exemple, le dé avec le nom \"Dé\", 10 lancés\n"
"         *       et 10 fois le 2 aurait comme représentation en String\n"
"         *       \"Dé 10 [0, 10, 0, 0, 0, 0]\"\n"
"         */\n"
"        public String toString() {\n"
"            // A complèter\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne true si this et o sont deux DeStats identiques\n"
"         */\n"
"        public boolean equals(Object o) {\n"
"            /* Code non fourni */\n"
"        }\n"
"    }\n"
"\n"
"Pour information, la classe De ressemble à ceci :\n"
"\n"
".. code-block:: java\n"
"\n"
"    import java.util.Random;\n"
"\n"
"    public class De {\n"
"        private String nom; // le nom de ce dé (par exemple sa couleur)\n"
"        protected Random r; // nombre aléatoire\n"
"\n"
"        /*\n"
"         * @pre nom != null\n"
"         * @post crée l'instance de la classe De ayant comme nom la chaine "
"n\n"
"         *      initilisé le générateur de nombres aléatoires\n"
"         */\n"
"        public De(String n) {\n"
"            nom = n;\n"
"            r = new Random();\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post lance le dé et retourne la valeur du dé\n"
"         */\n"
"        public int lance() {\n"
"            return r.nextInt(6)+1;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne le générateur de nombres aléatoires utilisé par le "
"dé\n"
"         */\n"
"        public Random getRandom() {\n"
"            return r;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne le nom du dé\n"
"         */\n"
"        public String getNom(){\n"
"            return nom;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre n != null\n"
"         * @post modifie le nom du dé qui est maintenant n\n"
"         */\n"
"        public void setNom(String n){\n"
"            this.nom = n;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre r != null\n"
"         * @post modifie le générateur de nombres aléatoires du dé qui est "
"maintenant r\n"
"         */\n"
"        public void setRandom(Random r){\n"
"            this.r = r;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne une chaîne de caractères représentant le dé\n"
"         */\n"
"        public String toString(){\n"
"            return this.nom;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne true ssi other est un dé identique à celui-ci "
"(même nom et même générateur aléatoire)\n"
"         */\n"
"        public boolean equals(Object other) {\n"
"            /* Code non fourni */\n"
"        }\n"
"    }\n"
"\n"
msgstr ""

#. name
#: m07Q10/task.yaml
msgid "Mission 7 : Q* DeStats - toString"
msgstr ""

#. name, q1, name
#: m07Q10/task.yaml
msgid "toString"
msgstr ""

#. name, q1, header
#: m07Q10/task.yaml
msgid ""
"Ecrivez le *contenu* de la méthode ``toString`` de la classe ``DeStats``."
msgstr ""

#. context
#: m07Q11/task.yaml
msgid ""
"On vous donne la classe DeStats dont voici le corps:\n"
"\n"
".. code-block:: java\n"
"\n"
"    public class DeStats extends De {\n"
"\n"
"        private int lances;\n"
"        private int[] resultats;\n"
"\n"
"        /*\n"
"         * @pre s != null;\n"
"         * @post Crée une instance de la classe DeStats\n"
"         *       avec comme nom s\n"
"         */\n"
"        public DeStats(String s) {\n"
"            /* Code non fourni */\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne le tableau des résultats du dé this\n"
"         */\n"
"        public int[] getResultats() {\n"
"            /* Code non fourni */\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre 1 <= n <= 6\n"
"         * @post retourne le nombre de fois que le dé\n"
"         *       a donné comme résultat n\n"
"         */\n"
"        public int statistique(int n) {\n"
"            return this.resultat[n-1];\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post incrémente le nombre de lancés et le\n"
"         *       nombre de fois qu'un chiffre est sorti.\n"
"         *       Retourne le chiffre que le dé a donné.\n"
"         */\n"
"        public int lance() {\n"
"            /* Code non fourni */\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne le nombre de lancés du dé this\n"
"         */\n"
"        public int getLances() {\n"
"            return this.lances;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne une description du dé sous forme\n"
"         *       d'un String. Le format retourné est le nom du\n"
"         *       dé suivi des statistique sous forme de tableau\n"
"         */\n"
"        public String toString() {\n"
"            /* Code non fourni */\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne true si this et o sont deux DeStats identiques\n"
"         */\n"
"        public boolean equals(Object o) {\n"
"            // A complèter\n"
"        }\n"
"    }\n"
"\n"
"Pour information, la classe De ressemble à ceci :\n"
"\n"
".. code-block:: java\n"
"\n"
"    import java.util.Random;\n"
"\n"
"    public class De {\n"
"        private String nom; // le nom de ce dé (par exemple sa couleur)\n"
"        protected Random r; // nombre aléatoire\n"
"\n"
"        /*\n"
"         * @pre nom != null\n"
"         * @post crée l'instance de la classe De ayant comme nom la chaine "
"n\n"
"         *      initilisé le générateur de nombres aléatoires\n"
"         */\n"
"        public De(String n) {\n"
"            nom = n;\n"
"            r = new Random();\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post lance le dé et retourne la valeur du dé\n"
"         */\n"
"        public int lance() {\n"
"            return r.nextInt(6)+1;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne le générateur de nombres aléatoires utilisé par le "
"dé\n"
"         */\n"
"        public Random getRandom() {\n"
"            return r;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne le nom du dé\n"
"         */\n"
"        public String getNom(){\n"
"            return nom;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre n != null\n"
"         * @post modifie le nom du dé qui est maintenant n\n"
"         */\n"
"        public void setNom(String n){\n"
"            this.nom = n;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre r != null\n"
"         * @post modifie le générateur de nombres aléatoires du dé qui est "
"maintenant r\n"
"         */\n"
"        public void setRandom(Random r){\n"
"            this.r = r;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne une chaîne de caractères représentant le dé\n"
"         */\n"
"        public String toString(){\n"
"            return this.nom;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne true ssi other est un dé identique à celui-ci "
"(même nom et même générateur aléatoire)\n"
"         */\n"
"        public boolean equals(Object other) {\n"
"            /* Code non fourni */\n"
"        }\n"
"    }\n"
"\n"
msgstr ""

#. name
#: m07Q11/task.yaml
msgid "Mission 7 : Q* DeStats - equals"
msgstr ""

#. name, q1, name
#: m07Q11/task.yaml m07Q6/task.yaml
msgid "equals"
msgstr ""

#. name, q1, header
#: m07Q11/task.yaml
msgid "Ecrivez le *contenu* de la méthode ``equals`` de la classe ``DeStats``."
msgstr ""

#. context
#: m07Q2/task.yaml
msgid ""
"On vous donne la classe Employe dont voici le corps:\n"
"\n"
".. code-block:: java\n"
"\n"
"  public class Employe{\n"
"    private String nom ;\n"
"    private double salaire ;\n"
"\n"
"    /*\n"
"     * Constructeur\n"
"     * @pre nom != null, salaire > 0\n"
"     * @post a construit une instance de la classe Employe avec nom et "
"salaire\n"
"     */\n"
"    public Employe ( String nom, double salaire){\n"
"        this.nom = nom ;\n"
"        this.salaire = salaire ;\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne le nom de l'employé this\n"
"     */\n"
"    public String getNom(){\n"
"        return nom ;\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne le salaire de l'employé this\n"
"     */\n"
"    public double getSalaire() {\n"
"        return salaire ;\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne un String décrivant l'employé this\n"
"     */\n"
"    public String toString() {\n"
"        // A compléter\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne true si this et other sont deux employés qui ont le "
"même nom et le même salaire\n"
"     */\n"
"    public boolean equals(Object other){\n"
"        // Non fourni\n"
"    }\n"
"  }"
msgstr ""

#. name
#: m07Q2/task.yaml
msgid "Mission 7 : Q* Employe - Méthode toString"
msgstr ""

#. name, q1, name
#: m07Q2/task.yaml
msgid "Méthode toString"
msgstr ""

#. name, q1, header
#: m07Q2/task.yaml
msgid "Ecrivez le *contenu* de la méthode toString."
msgstr ""

#. context
#: m07Q3/task.yaml
msgid ""
"On vous donne la classe De dont voici le corps :\n"
"\n"
".. code-block:: java\n"
"\n"
"  import java.util.Random;\n"
"\n"
"  public class De{\n"
"    private String nom; // le nom de ce dé (par exemple sa couleur)\n"
"    protected Random r ; // nombre aléatoire\n"
"\n"
"    /*\n"
"     * @pre nom != null\n"
"     * @post a créé l'instance de la classe De ayant comme nom la chaine n, "
"a initilisé\n"
"     *       le générateur de nombres aléatoires\n"
"     */\n"
"    public De(String n){\n"
"        nom = n;\n"
"        r = new Random();\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post a lance le dé et retourne la valeur du dé\n"
"     */\n"
"    public int lance(){\n"
"        return r.nextInt(6)+1;\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne le générateur de nombres aléatoires utilisé par le dé\n"
"     */\n"
"    public Random getRandom(){\n"
"        return r;\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne le nom du dé\n"
"     */\n"
"    public String getNom(){\n"
"        return nom;\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre n!=null\n"
"     * @post a modifié le nom du dé qui est maintenant n\n"
"     */\n"
"    public void setNom(String n){\n"
"        this.nom = n;\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre r!=null\n"
"     * @post a modifié le générateur de nombres aléatoires du dé qui est "
"maintenant r\n"
"     */\n"
"    public void setRandom(Random r){\n"
"        this.r = r;\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne une chaîne de caractères représentant le dé\n"
"     */\n"
"    public String toString(){\n"
"        return this.nom;\n"
"    }\n"
"\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne true ssi other est un dé identique à celui-ci (même "
"nom et même générateur aléatoire)\n"
"     */\n"
"    public boolean equals(Object other) {\n"
"        // A compléter\n"
"    }\n"
"  }"
msgstr ""

#. name
#: m07Q3/task.yaml
msgid "Mission 7 : Q* Dé - Méthode equals"
msgstr ""

#. context
#: m07Q4/task.yaml
msgid ""
"On vous donne la classe Directeur dont voici le corps:\n"
"\n"
".. code-block:: java\n"
"\n"
"  public class Directeur extends Employe{\n"
"    private double prime; // en pourcents du salaire\n"
"\n"
"   /*\n"
"    * Constructeur\n"
"    * @pre nom != null, salaire > 0, 0 <= prime < 1\n"
"    * @post a construit une instance de la classe Directeur\n"
"    */\n"
"    public Directeur(String nom, double salaire, double prime){\n"
"        //a compléter\n"
"    }\n"
"\n"
"   /*\n"
"    * @pre -\n"
"    * @post retourne la salaire du directeur. Ce salaire est "
"(1+prime)*salaire\n"
"    */\n"
"    public double getSalaire() {\n"
"        // non fourni\n"
"    }\n"
"\n"
"   /*\n"
"    * @pre -\n"
"    * @post retourne true si this et other sont identiques\n"
"    *      (même nom, même salaire, même prime)\n"
"    */\n"
"    public boolean equals(Object other){\n"
"        // non fourni\n"
"    }\n"
"\n"
"   /*\n"
"    * @pre -\n"
"    * @post retourne la prime de ce directeur\n"
"    */\n"
"    public double getPrime() {\n"
"        // code non fourni\n"
"    }\n"
"  }\n"
"\n"
"Pour information, la classe Employé ressemble à ceci :\n"
"\n"
".. code-block:: java\n"
"\n"
"  public class Employe{\n"
"    private String nom ;\n"
"    private double salaire ;\n"
"\n"
"    /*\n"
"     * Constructeur\n"
"     * @pre nom != null, salaire > 0\n"
"     * @post a construit une instance de la classe Employe avec nom et "
"salaire\n"
"     */\n"
"    public Employe (String nom, double salaire){\n"
"        this.nom = nom ;\n"
"        this.salaire = salaire ;\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne le nom de l'employé this\n"
"     */\n"
"    public String getNom(){\n"
"        return nom ;\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne le salaire de l'employé this\n"
"     */\n"
"    public double getSalaire() {\n"
"        return salaire ;\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne un String décrivant l'employé this\n"
"     */\n"
"    public String toString() {\n"
"        // Non fourni\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne true si this et other sont deux employés\n"
"     *       qui ont le même nom et le même salaire\n"
"     */\n"
"    public boolean equals(Object other){\n"
"        // Non fourni\n"
"    }\n"
"  }"
msgstr ""

#. name
#: m07Q4/task.yaml
msgid "Mission 7 : Q* Directeur - Constructeur"
msgstr ""

#. name, q1, name
#: m07Q4/task.yaml m07Q7/task.yaml
msgid "Constructeur"
msgstr ""

#. name, q1, header
#: m07Q4/task.yaml
msgid "Ecrivez le *contenu* du constructeur."
msgstr ""

#. context
#: m07Q5/task.yaml
msgid ""
"On vous donne la classe Directeur dont voici le corps :\n"
"\n"
".. code-block:: java\n"
"\n"
"    public class Directeur extends Employe {\n"
"\n"
"        private double prime;\n"
"\n"
"        /*\n"
"         * Constructeur\n"
"         * @pre nom != null, salaire > 0, 0 <= prime < 1\n"
"         * @post a construit une instance de la classe Directeur\n"
"         */\n"
"        public Directeur(String nom, double salaire, double prime) {\n"
"            //non fourni\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne la salaire du directeur.\n"
"         *       Ce salaire est (1+prime)*salaire\n"
"         */\n"
"        public double getSalaire() {\n"
"            // a compléter\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne true si this et other sont identiques\n"
"         *      (même nom, même salaire, même prime)\n"
"         */\n"
"        public boolean equals(Object other) {\n"
"            // non fourni\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne la prime de ce directeur\n"
"         */\n"
"        public double getPrime() {\n"
"            // code non fourni\n"
"        }\n"
"    }\n"
"\n"
"Pour information, la classe Employé ressemble à ceci :\n"
"\n"
".. code-block:: java\n"
"\n"
"    public class Employe {\n"
"        private String nom;\n"
"        private double salaire;\n"
"\n"
"        /*\n"
"         * Constructeur\n"
"         * @pre nom != null, salaire > 0\n"
"         * @post a construit une instance de la classe Employe avec nom et "
"salaire\n"
"         */\n"
"        public Employe(String nom, double salaire){\n"
"            this.nom = nom;\n"
"            this.salaire = salaire;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne le nom de l'employé this\n"
"         */\n"
"        public String getNom(){\n"
"            return nom ;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne le salaire de l'employé this\n"
"         */\n"
"        public double getSalaire() {\n"
"            return salaire ;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne un String décrivant l'employé this\n"
"         */\n"
"        public String toString() {\n"
"            // Non fourni\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne true si this et other sont deux employés qui ont "
"le même nom et le même salaire\n"
"         */\n"
"        public boolean equals(Object other) {\n"
"            // Non fourni\n"
"        }\n"
"    }"
msgstr ""

#. name
#: m07Q5/task.yaml
msgid "Mission 7 : Q* Directeur - getSalaire"
msgstr ""

#. name, q1, name
#: m07Q5/task.yaml
msgid "getSalaire"
msgstr ""

#. name, q1, header
#: m07Q5/task.yaml
msgid "Ecrivez le *contenu* de la méthode ``getSalaire``."
msgstr ""

#. context
#: m07Q6/task.yaml
msgid ""
"On vous donne la classe Directeur dont voici le corps :\n"
"\n"
".. code-block:: java\n"
"\n"
" public class Directeur extends Employe {\n"
"    private double prime; // en pourcents du salaire\n"
"\n"
"   /*\n"
"    * Constructeur\n"
"    * @pre nom != null, salaire > 0, 0 <= prime < 1\n"
"    * @post a construit une instance de la classe Directeur\n"
"    */\n"
"\n"
"    public Directeur(String nom, double salaire, double prime){\n"
"        //non fourni\n"
"    }\n"
"\n"
"   /*\n"
"    * @pre -\n"
"    * @post retourne la salaire du directeur.\n"
"    *       Ce salaire est (1+prime)*salaire\n"
"    */\n"
"    public double getSalaire() {\n"
"        //non fourni\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne true si this et other sont identiques\n"
"     *       (même nom, même salaire, même prime)\n"
"     */\n"
"    public boolean equals(Object other){\n"
"        //a compléter\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne la prime de ce directeur\n"
"     */\n"
"    public double getPrime() {\n"
"        // code non fourni\n"
"    }\n"
"  }\n"
"\n"
"Pour information, la classe Employé ressemble à ceci :\n"
"\n"
".. code-block:: java\n"
"\n"
"  public class Employe{\n"
"\n"
"    private String nom;\n"
"    private double salaire;\n"
"\n"
"    /*\n"
"     * Constructeur\n"
"     * @pre nom != null, salaire > 0\n"
"     * @post a construit une instance de la classe Employe avec nom et "
"salaire\n"
"     */\n"
"    public Employe(String nom, double salaire){\n"
"        this.nom = nom ;\n"
"        this.salaire = salaire ;\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne le nom de l'employé this\n"
"     */\n"
"    public String getNom(){\n"
"        return nom ;\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne le salaire de l'employé this\n"
"     */\n"
"    public double getSalaire() {\n"
"        return salaire ;\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne un String décrivant l'employé this\n"
"     */\n"
"    public String toString() {\n"
"        //Non fourni\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne true si this et other sont deux employés qui ont le "
"même nom et le même salaire\n"
"     */\n"
"    public boolean equals(Object other){\n"
"        //Non fourni\n"
"    }\n"
"  }"
msgstr ""

#. name
#: m07Q6/task.yaml
msgid "Mission 7 : Q* Directeur - Equals"
msgstr ""

#. name, q1, header
#: m07Q6/task.yaml
msgid "Ecrivez le *contenu* de la méthode equals."
msgstr ""

#. context
#: m07Q7/task.yaml
msgid ""
"On vous donne la classe DeStats dont voici le corps:\n"
"\n"
".. code-block:: java\n"
"\n"
"    public class DeStats extends De {\n"
"\n"
"        private int lances;\n"
"        private int[] resultats;\n"
"\n"
"        /*\n"
"         * @pre s != null;\n"
"         * @post Crée une instance de la classe DeStats\n"
"         *       avec comme nom s\n"
"         */\n"
"        public DeStats(String s) {\n"
"            // A complèter\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne le tableau des résultats du dé this\n"
"         */\n"
"        public int[] getResultats() {\n"
"            /* Code non fourni */\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre 1 <= n <= 6\n"
"         * @post retourne le nombre de fois que le dé\n"
"         *       a donné comme résultat n\n"
"         */\n"
"        public int statistique(int n) {\n"
"            return this.resultat[n-1];\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post incrémente le nombre de lancés et le\n"
"         *       nombre de fois qu'un chiffre est sorti.\n"
"         *       Retourne le chiffre que le dé a donné.\n"
"         */\n"
"        public int lance() {\n"
"            /* Code non fourni */\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne le nombre de lancés du dé this\n"
"         */\n"
"        public int getLances() {\n"
"            return this.lances;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne une description du dé sous forme\n"
"         *       d'un String. Le format retourné est le nom du\n"
"         *       dé suivi des statistique sous forme de tableau\n"
"         */\n"
"        public String toString() {\n"
"            /* Code non fourni */\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne true si this et o sont deux DeStats identiques\n"
"         */\n"
"        public boolean equals(Object o) {\n"
"            /* Code non fourni */\n"
"        }\n"
"    }\n"
"\n"
"Pour information, la classe De ressemble à ceci :\n"
"\n"
".. code-block:: java\n"
"\n"
"    import java.util.Random;\n"
"\n"
"    public class De {\n"
"        private String nom; // le nom de ce dé (par exemple sa couleur)\n"
"        protected Random r; // nombre aléatoire\n"
"\n"
"        /*\n"
"         * @pre nom != null\n"
"         * @post crée l'instance de la classe De ayant comme nom la chaine "
"n\n"
"         *      initilisé le générateur de nombres aléatoires\n"
"         */\n"
"        public De(String n) {\n"
"            nom = n;\n"
"            r = new Random();\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post lance le dé et retourne la valeur du dé\n"
"         */\n"
"        public int lance() {\n"
"            return r.nextInt(6)+1;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne le générateur de nombres aléatoires utilisé par le "
"dé\n"
"         */\n"
"        public Random getRandom() {\n"
"            return r;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne le nom du dé\n"
"         */\n"
"        public String getNom(){\n"
"            return nom;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre n != null\n"
"         * @post modifie le nom du dé qui est maintenant n\n"
"         */\n"
"        public void setNom(String n){\n"
"            this.nom = n;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre r != null\n"
"         * @post modifie le générateur de nombres aléatoires du dé qui est "
"maintenant r\n"
"         */\n"
"        public void setRandom(Random r){\n"
"            this.r = r;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne une chaîne de caractères représentant le dé\n"
"         */\n"
"        public String toString(){\n"
"            return this.nom;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne true ssi other est un dé identique à celui-ci "
"(même nom et même générateur aléatoire)\n"
"         */\n"
"        public boolean equals(Object other) {\n"
"            /* Code non fourni */\n"
"        }\n"
"    }\n"
msgstr ""

#. name
#: m07Q7/task.yaml
msgid "Mission 7 : Q* DeStats - Constructeur"
msgstr ""

#. name, q1, header
#: m07Q7/task.yaml
msgid "Ecrivez le *contenu* du constructeur de la classe ``DeStats``."
msgstr ""

#. context
#: m07Q8/task.yaml
msgid ""
"On vous donne la classe DeStats dont voici le corps:\n"
"\n"
".. code-block:: java\n"
"\n"
"    public class DeStats extends De {\n"
"\n"
"        private int lances;\n"
"        private int[] resultats;\n"
"\n"
"        /*\n"
"         * @pre s != null;\n"
"         * @post Crée une instance de la classe DeStats\n"
"         *       avec comme nom s\n"
"         */\n"
"        public DeStats(String s) {\n"
"            /* Code non fourni */\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne le tableau des résultats du dé this\n"
"         */\n"
"        public int[] getResultats() {\n"
"            /* Code non fourni */\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre 1 <= n <= 6\n"
"         * @post retourne le nombre de fois que le dé\n"
"         *       a donné comme résultat n\n"
"         */\n"
"        public int statistique(int n) {\n"
"            return this.resultat[n-1];\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post incrémente le nombre de lancés et le\n"
"         *       nombre de fois qu'un chiffre est sorti.\n"
"         *       Retourne le chiffre que le dé a donné.\n"
"         */\n"
"        public int lance() {\n"
"            // A complèter\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne le nombre de lancés du dé this\n"
"         */\n"
"        public int getLances() {\n"
"            return this.lances;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne une description du dé sous forme\n"
"         *       d'un String. Le format retourné est le nom du\n"
"         *       dé suivi des statistique sous forme de tableau\n"
"         */\n"
"        public String toString() {\n"
"            /* Code non fourni */\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne true si this et o sont deux DeStats identiques\n"
"         */\n"
"        public boolean equals(Object o) {\n"
"            /* Code non fourni */\n"
"        }\n"
"    }\n"
"\n"
"Pour information, la classe De ressemble à ceci :\n"
"\n"
".. code-block:: java\n"
"\n"
"    import java.util.Random;\n"
"\n"
"    public class De {\n"
"        private String nom; // le nom de ce dé (par exemple sa couleur)\n"
"        protected Random r; // nombre aléatoire\n"
"\n"
"        /*\n"
"         * @pre nom != null\n"
"         * @post crée l'instance de la classe De ayant comme nom la chaine "
"n\n"
"         *      initilisé le générateur de nombres aléatoires\n"
"         */\n"
"        public De(String n) {\n"
"            nom = n;\n"
"            r = new Random();\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post lance le dé et retourne la valeur du dé\n"
"         */\n"
"        public int lance() {\n"
"            return r.nextInt(6)+1;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne le générateur de nombres aléatoires utilisé par le "
"dé\n"
"         */\n"
"        public Random getRandom() {\n"
"            return r;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne le nom du dé\n"
"         */\n"
"        public String getNom(){\n"
"            return nom;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre n != null\n"
"         * @post modifie le nom du dé qui est maintenant n\n"
"         */\n"
"        public void setNom(String n){\n"
"            this.nom = n;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre r != null\n"
"         * @post modifie le générateur de nombres aléatoires du dé qui est "
"maintenant r\n"
"         */\n"
"        public void setRandom(Random r){\n"
"            this.r = r;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne une chaîne de caractères représentant le dé\n"
"         */\n"
"        public String toString(){\n"
"            return this.nom;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne true ssi other est un dé identique à celui-ci "
"(même nom et même générateur aléatoire)\n"
"         */\n"
"        public boolean equals(Object other) {\n"
"            /* Code non fourni */\n"
"        }\n"
"    }\n"
"\n"
msgstr ""

#. name
#: m07Q8/task.yaml
msgid "Mission 7 : Q* DeStats - lances"
msgstr ""

#. name, q1, name
#: m07Q8/task.yaml
msgid "lance"
msgstr ""

#. name, q1, header
#: m07Q8/task.yaml
msgid "Ecrivez le *contenu* de la méthode ``lance`` de la classe ``DeStats``."
msgstr ""

#. context
#: m07Q9/task.yaml
msgid ""
"On vous donne la classe DeStats dont voici le corps:\n"
"\n"
".. code-block:: java\n"
"\n"
"    public class DeStats extends De {\n"
"\n"
"        private int lances;\n"
"        private int[] resultats;\n"
"\n"
"        /*\n"
"         * @pre s != null;\n"
"         * @post Crée une instance de la classe DeStats\n"
"         *       avec comme nom s\n"
"         */\n"
"        public DeStats(String s) {\n"
"            /* Code non fourni */\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne le tableau des résultats du dé this\n"
"         */\n"
"        public int[] getResultats() {\n"
"            // A complèter\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre 1 <= n <= 6\n"
"         * @post retourne le nombre de fois que le dé\n"
"         *       a donné comme résultat n\n"
"         */\n"
"        public int statistique(int n) {\n"
"            return this.resultat[n-1];\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post incrémente le nombre de lancés et le\n"
"         *       nombre de fois qu'un chiffre est sorti.\n"
"         *       Retourne le chiffre que le dé a donné.\n"
"         */\n"
"        public int lance() {\n"
"            /* Code non fourni */\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne le nombre de lancés du dé this\n"
"         */\n"
"        public int getLances() {\n"
"            return this.lances;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne une description du dé sous forme\n"
"         *       d'un String. Le format retourné est le nom du\n"
"         *       dé suivi des statistique sous forme de tableau\n"
"         */\n"
"        public String toString() {\n"
"            /* Code non fourni */\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne true si this et o sont deux DeStats identiques\n"
"         */\n"
"        public boolean equals(Object o) {\n"
"            /* Code non fourni */\n"
"        }\n"
"    }\n"
"\n"
"Pour information, la classe De ressemble à ceci :\n"
"\n"
".. code-block:: java\n"
"\n"
"    import java.util.Random;\n"
"\n"
"    public class De {\n"
"        private String nom; // le nom de ce dé (par exemple sa couleur)\n"
"        protected Random r; // nombre aléatoire\n"
"\n"
"        /*\n"
"         * @pre nom != null\n"
"         * @post crée l'instance de la classe De ayant comme nom la chaine "
"n\n"
"         *      initilisé le générateur de nombres aléatoires\n"
"         */\n"
"        public De(String n) {\n"
"            nom = n;\n"
"            r = new Random();\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post lance le dé et retourne la valeur du dé\n"
"         */\n"
"        public int lance() {\n"
"            return r.nextInt(6)+1;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne le générateur de nombres aléatoires utilisé par le "
"dé\n"
"         */\n"
"        public Random getRandom() {\n"
"            return r;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne le nom du dé\n"
"         */\n"
"        public String getNom(){\n"
"            return nom;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre n != null\n"
"         * @post modifie le nom du dé qui est maintenant n\n"
"         */\n"
"        public void setNom(String n){\n"
"            this.nom = n;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre r != null\n"
"         * @post modifie le générateur de nombres aléatoires du dé qui est "
"maintenant r\n"
"         */\n"
"        public void setRandom(Random r){\n"
"            this.r = r;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne une chaîne de caractères représentant le dé\n"
"         */\n"
"        public String toString(){\n"
"            return this.nom;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne true ssi other est un dé identique à celui-ci "
"(même nom et même générateur aléatoire)\n"
"         */\n"
"        public boolean equals(Object other) {\n"
"            /* Code non fourni */\n"
"        }\n"
"    }\n"
"\n"
msgstr ""

#. name
#: m07Q9/task.yaml
msgid "Mission 7 : Q* DeStats - resultats"
msgstr ""

#. name, q1, name
#: m07Q9/task.yaml
msgid "getResultats"
msgstr ""

#. name, q1, header
#: m07Q9/task.yaml
msgid ""
"Ecrivez le *contenu* de la méthode ``getResultat`` de la classe ``DeStats``."
msgstr ""

#. context
#: m07_bf/task.yaml
msgid ""
"Dans le contexte de gestion d'une bibliothèque de média, chacun des objets "
"de cette bibliothèque est une instance de la classe Java ``Item`` ci-"
"dessous :\n"
"\n"
".. code-block:: java\n"
"\n"
"    public class Item {\n"
"       private final String author, title;\n"
"       private final int serial;\n"
"\n"
"       /**\n"
"        * Constructeur\n"
"        * @pre author != null , title != null , serial > 0\n"
"        * @post Une instance de la classe est créée, et représente un objet "
"ayant comme\n"
"        *       auteur author, comme titre title et comme numéro de série "
"serial\n"
"        */\n"
"       public Item (String author, String title, Integer serial) {\n"
"          this.author = author;\n"
"          this.title = title;\n"
"          this.serial = serial;\n"
"       }\n"
"\n"
"       /**\n"
"        * @pre -\n"
"        * @post Retourne l'auteur\n"
"        */\n"
"        public String getAuthor(){\n"
"            return this.author;\n"
"        }\n"
"\n"
"        /**\n"
"        * @pre -\n"
"        * @post Retourne le titre\n"
"        */\n"
"        public String getAuthor(){\n"
"            return this.title;\n"
"        }\n"
"\n"
"        /**\n"
"        * @pre -\n"
"        * @post Retourne le numéro de série\n"
"        */\n"
"        public String getAuthor(){\n"
"            return this.serial;\n"
"        }\n"
"\n"
"       /**\n"
"        * @pre -\n"
"        * @post La valeur renvoyée contient une représentation de cet objet\n"
"        *       sous la forme : [num série] Auteur, Titre\n"
"        */\n"
"       public String toString(){\n"
"          // À compléter\n"
"       }\n"
"    }\n"
"\n"
"Vous devez tout d'abord compléter la méthode ``toString`` de la classe "
"``Item``.\n"
"\n"
"On vous demande ensuite d'écrire une classe ``CD`` permettant de représenter "
"des CD. Un CD est lui même un item de la bibliothèque avec une information "
"supplémentaire : la durée de l'album en secondes (cette durée doit être "
"stockée dans un ``int``). On doit pouvoir créer un nouvel objet CD par "
"exemple avec l'instruction :\n"
"\n"
".. code-block:: java\n"
"\n"
"    CD r = new CD (\"Radiohead\", \"The Bends\", 2917);  // auteur, titre et "
"durée en secondes\n"
"\n"
"et obtenir une représentation textuelle de ce CD grâce à sa méthode "
"``toString``, qui renvoie par exemple :\n"
"\n"
".. code-block:: java\n"
"\n"
"    [100001] Radiohead, The Bends (2917 s)\n"
"\n"
"Remarquez que chaque ``Item`` possède un serial qui est un numéro de série "
"unique propre à l’objet (pour pouvoir différencier plusieurs exemplaires du "
"même livre par exemple). Il doit être généré automatiquement et être "
"supérieur à 100000 pour un CD."
msgstr ""

#. name
#: m07_bf/task.yaml
msgid "Mission 7 : Question de Bilan Final"
msgstr ""

#. name, q1, header
#: m07_bf/task.yaml
msgid ""
"Complétez ici le corps de la méthode ``toString`` de la classe ``Item`` dont "
"la spécification est donnée dans l'énoncé."
msgstr ""

#. name, q2, header
#: m07_bf/task.yaml
msgid ""
"Complétez ici le corps de la classe ``CD``.\n"
"\n"
msgstr ""

#. context
#: m07_qcm/task.yaml
msgid ""
"================================\n"
"Mission 7. Extension et Héritage\n"
"================================\n"
"\n"
"\n"
"Ces questions supposent que vous avez lu les sections suivantes du livre de "
"référence |jn|_\n"
"\n"
"  - |jn2.4|_\n"
"\n"
"    - |jn2.4.4|_\n"
"\n"
"  - |jn4.3|_\n"
"\n"
"    - |jn4.3.3|_\n"
"\n"
"  - |jn5.3|_\n"
"\n"
"    - |jn5.3.3|_\n"
"\n"
"  - |jn5.5|_\n"
"\n"
"    - |jn5.5.1|_\n"
"    - |jn5.5.2|_\n"
"    - |jn5.5.3|_\n"
"    - |jn5.5.4|_\n"
"\n"
"  - |jn5.6|_\n"
"\n"
"    - |jn5.6.1|_\n"
"    - |jn5.6.2|_\n"
"    - |jn5.6.3|_\n"
"\n"
"  - |jn5.7|_\n"
"\n"
"    - |jn5.7.4|_\n"
"\n"
"\n"
".. _jn: http://math.hws.edu/javanotes/\n"
".. |jn| replace:: JavaNotes\n"
"\n"
".. _jn2.4: http://math.hws.edu/javanotes/c2/s4.html\n"
".. |jn2.4| replace:: `2.4 : Text Input and Output`\n"
"\n"
".. _jn2.4.4 : http://math.hws.edu/javanotes/c2/s4.html#basics.4.4\n"
".. |jn2.4.4| replace:: `2.4.4 : Formatted Output`\n"
"\n"
".. _jn4.3 : http://math.hws.edu/javanotes/c4/s3.html\n"
".. |jn4.3| replace:: `4.3 : Parameters`\n"
"\n"
".. _jn4.3.3 : http://math.hws.edu/javanotes/c4/s3.html#subroutines.3.3\n"
".. |jn4.3.3| replace:: `4.3.3 : Overloading`\n"
"\n"
".. _jn5.3 : http://math.hws.edu/javanotes/c5/s3.html\n"
".. |jn5.3| replace:: `5.3 : Programming with Objects`\n"
"\n"
".. _jn5.3.3 : http://math.hws.edu/javanotes/c5/s3.html#OOP.3.3\n"
".. |jn5.3.3| replace:: `5.3.3 : The class \"Object\"`\n"
"\n"
".. _jn5.5 : http://math.hws.edu/javanotes/c5/s5.html\n"
".. |jn5.5| replace:: `5.5 : Inheritance, Polymorphism, and Abstract "
"Classes`\n"
"\n"
".. _jn5.5.1 : http://math.hws.edu/javanotes/c5/s5.html#OOP.5.1\n"
".. |jn5.5.1| replace:: `5.5.1 : Extending Existing Classes`\n"
"\n"
".. _jn5.5.2 : http://math.hws.edu/javanotes/c5/s5.html#OOP.5.2\n"
".. |jn5.5.2| replace:: `5.5.2 : Inheritance and Class Hierarchy`\n"
"\n"
".. _jn5.5.3 : http://math.hws.edu/javanotes/c5/s5.html#OOP.5.3\n"
".. |jn5.5.3| replace:: `5.5.3 : Example: Vehicles`\n"
"\n"
".. _jn5.5.4 : http://math.hws.edu/javanotes/c5/s5.html#OOP.5.4\n"
".. |jn5.5.4| replace:: `5.5.4 : Polymorphism`\n"
"\n"
".. _jn5.6 : http://math.hws.edu/javanotes/c5/s6.html\n"
".. |jn5.6| replace:: `5.6 : this and super`\n"
"\n"
".. _jn5.6.1 : http://math.hws.edu/javanotes/c5/s6.html#OOP.6.1\n"
".. |jn5.6.1| replace:: `5.6.1 : The Special Variable this`\n"
"\n"
".. _jn5.6.2 : http://math.hws.edu/javanotes/c5/s6.html#OOP.6.2\n"
".. |jn5.6.2| replace:: `5.6.2 : The Special Variable super`\n"
"\n"
".. _jn5.6.3 : http://math.hws.edu/javanotes/c5/s6.html#OOP.6.3\n"
".. |jn5.6.3| replace:: `5.6.3 : Constructors in Subclasses`\n"
"\n"
".. _jn5.7 : http://math.hws.edu/javanotes/c5/s7.html\n"
".. |jn5.7| replace:: `5.7 : Interfaces, Nested Classes, and Other Details`\n"
"\n"
".. _jn5.7.4 : http://math.hws.edu/javanotes/c5/s7.html#OOP.7.4\n"
".. |jn5.7.4| replace:: `5.7.4 : Mixing Static and Non-static`\n"
msgstr ""

#. name
#: m07_qcm/task.yaml
msgid "Mission 7: QCM"
msgstr ""

#. name, q1, name
#: m07_qcm/task.yaml
msgid "Héritage : vocabulaire"
msgstr ""

#. name, q1, header
#: m07_qcm/task.yaml
msgid ""
"\n"
"Si la classe ``C3`` étend la classe ``C2``, qui étend elle-même la classe "
"``C1``, quel groupe d'affirmations est correct ?\n"
msgstr ""

#. name, q1, text
#: m07_qcm/task.yaml
msgid ""
"\n"
"\n"
"- ``C1`` est une super-classe de ``C3``\n"
"- ``C2`` est une classe-fille de ``C1``\n"
"- Toute instance de ``C3`` est une instance de ``C1``\n"
msgstr ""

#. name, q1, text
#: m07_qcm/task.yaml
msgid ""
"\n"
"\n"
"- ``C3`` est une sous-classe de ``C2``\n"
"- ``C2`` est la classe-mère de ``C3``\n"
"- Toute instance de ``C2`` est une instance de ``C1``\n"
msgstr ""

#. name, q1, text
#: m07_qcm/task.yaml
msgid ""
"\n"
"\n"
"- ``C1`` est une sous-classe de ``C3``\n"
"- ``C2`` est une classe-fille de ``C1``\n"
"- Toute instance de ``C2`` est une instance de ``C1``\n"
msgstr ""

#. name, q1, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"``C1`` n'est pas une sous-classe de ``C3``.\n"
msgstr ""

#. name, q1, text
#: m07_qcm/task.yaml
msgid ""
"\n"
"\n"
"- ``C1`` est une super-classe de ``C3``\n"
"- ``C2`` est une classe-fille de ``C3``\n"
"- Toute instance de ``C3`` est une instance de ``C1``\n"
msgstr ""

#. name, q1, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"``C2`` n'est pas une classe-fille de ``C3``.\n"
msgstr ""

#. name, q1, text
#: m07_qcm/task.yaml
msgid ""
"\n"
"\n"
"- ``C2`` est une classe-fille de ``C1``\n"
"- Toute instance de ``C1`` est une instance de ``C3``\n"
"- ``C3`` est une sous-classe de ``C2``\n"
msgstr ""

#. name, q1, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"Toute instance de ``C1`` n'est pas une instance de ``C3``.\n"
msgstr ""

#. name, q1, text
#: m07_qcm/task.yaml
msgid ""
"\n"
"\n"
"- ``C2`` est une classe-fille de ``C1``\n"
"- Toute instance de ``C3`` est une instance de ``C1``\n"
"- ``C1`` est une sous-classe de ``C2``\n"
msgstr ""

#. name, q1, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"``C1`` n'est pas une sous-classe de ``C2``\n"
msgstr ""

#. name, q1, text
#: m07_qcm/task.yaml
msgid ""
"\n"
"\n"
"- ``C1`` est une super-classe de ``C3``\n"
"- ``C2`` est la classe-fille de ``C3``\n"
"- Toute instance de ``C2`` est une instance de ``C1``\n"
msgstr ""

#. name, q1, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"``C2`` n'est pas la classe-fille de ``C3``\n"
msgstr ""

#. name, q1, text
#: m07_qcm/task.yaml
msgid ""
"\n"
"\n"
"- ``C2`` est une classe-fille de ``C1``\n"
"- ``C3`` est une sous-classe de ``C2``\n"
"- Toute instance de ``C2`` est une instance de ``C3``\n"
msgstr ""

#. name, q1, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"Toute instance de ``C2`` n'est pas une instance de ``C3``\n"
msgstr ""

#. name, q2, name
#: m07_qcm/task.yaml
msgid "Extension de classe"
msgstr ""

#. name, q2, header
#: m07_qcm/task.yaml
msgid ""
"\n"
"Soit la classe ``C1`` définie comme suit\n"
"\n"
".. code-block:: java\n"
"\n"
"    public class C1 {\n"
"        private String s;\n"
"        private int n;\n"
"        public C1(String s, int n) {\n"
"            this.s = s;\n"
"            this.n = n;\n"
"        }\n"
"        public int m() {\n"
"            return n * n;\n"
"        }\n"
"    }\n"
"\n"
"Laquelle des définitions suivantes définit correctement une extension de "
"``C1`` ?\n"
msgstr ""

#. name, q2, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public class C2 extends C1 {\n"
"       private int n2;\n"
"       public C2 (String s, int n) {\n"
"           super(s, n);\n"
"           this.n2 = n;\n"
"       }\n"
"       public int m() {\n"
"           return super.m() + n2 * n2;\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q2, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public class C2 extends C1 {\n"
"       private int n2;\n"
"       public C2 (String s, int n) {\n"
"           C1(s, n);\n"
"           this.n2 = n;\n"
"       }\n"
"       public int m() {\n"
"           return C2.m() + n2 * n2;\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q2, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"Il faut utiliser ``super`` pour référer à la classe-mère et non ``C2``.\n"
msgstr ""

#. name, q2, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public class C2 {\n"
"       private int n2;\n"
"       public C2 (String s, int n) {\n"
"           super(s, n);\n"
"           this.n2 = n;\n"
"       }\n"
"       public int m() {\n"
"           return super.m() + n2 * n2;\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q2, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"La déclaration ne mentionne pas que ``C2`` étend ``C1``.\n"
msgstr ""

#. name, q2, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public class C2 extends C1 {\n"
"       private int n2;\n"
"       public C2 (String s, int n) {\n"
"           super(s, n);\n"
"           this.n2 = n;\n"
"       }\n"
"       public override int m() {\n"
"           return super.m() + n2 * n2;\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q2, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"Dans la signature de ``m``, le ``override`` est incorrect et inutile (il "
"existe une annotation ``@override`` mais elle n'est pas indispensable).\n"
msgstr ""

#. name, q2, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public class C2 extends C1 {\n"
"       private int n2;\n"
"       public C2 (String s, int n) {\n"
"           super(s, n);\n"
"           this.n2 = n;\n"
"       }\n"
"       public int m() {\n"
"           return n1 * n1 + n2 * n2;\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q2, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"Dans le corps de ``m``, la variable ``n`` de ``C1`` n'est pas accessible "
"(``private``).\n"
msgstr ""

#. name, q2, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public class C2 extends C1 {\n"
"       private int n2;\n"
"       public C2 (String s, int n) {\n"
"           this.s = s;\n"
"           this.n = n;\n"
"           this.n2 = n;\n"
"       }\n"
"       public int m() {\n"
"           return super.m() + n2 * n2;\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q2, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"Dans le constructeur de ``C2``, il faut appeler le constructeur de ``C1`` "
"pour initialiser les variables de ``C1``.\n"
msgstr ""

#. name, q2, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public class C2 extends C1 {\n"
"       private int n2;\n"
"       public C2 (String s, int n) {\n"
"           this.n2 = n;\n"
"           super(s, n);\n"
"       }\n"
"       public int m() {\n"
"           return super.m() + n2 * n2;\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q2, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"Dans le constructeur, l'appel au constructeur de ``C1`` doit venir en "
"premier lieu.\n"
msgstr ""

#. name, q3, name
#: m07_qcm/task.yaml
msgid "Extension et types"
msgstr ""

#. name, q3, header
#: m07_qcm/task.yaml
msgid ""
"\n"
"Soit les classes ``C1``, ``C2``, ``C3`` et ``C4`` définies comme suit\n"
"\n"
".. code-block:: java\n"
"\n"
"    public class C1 {\n"
"        public C1() {\n"
"            // ...\n"
"        }\n"
"        // ...\n"
"    }\n"
"\n"
"    public class C2 extends C1 {\n"
"        public C2() {\n"
"            // ...\n"
"        }\n"
"        // ...\n"
"    }\n"
"\n"
"    public class C3 extends C2 {\n"
"        public C3() {\n"
"            // ...\n"
"        }\n"
"        // ...\n"
"    }\n"
"\n"
"    public class C4 extends C2 {\n"
"        public C4() {\n"
"            // ...\n"
"        }\n"
"        // ...\n"
"    }\n"
"\n"
"Parmi les portions de code suivantes, laquelle est valide pour le "
"compilateur Java ?\n"
msgstr ""

#. name, q3, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   C3 obj3 = new C3();\n"
"   C2 obj2 = new C3();\n"
"   C4 obj4 = new C4();\n"
"   C1 obj1 = obj3;\n"
msgstr ""

#. name, q3, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   C4 obj4 = new C4();\n"
"   C2 obj2 = obj4;\n"
"   C1 obj1 = new C2();\n"
"   C3 obj3 = null;\n"
msgstr ""

#. name, q3, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   C4 obj4 = new C4();\n"
"   C3 obj3 = new C2();\n"
"   C2 obj2 = new C3();\n"
"   C1 obj1 = obj3;\n"
msgstr ""

#. name, q3, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"``C3 obj3`` ne peut pas recevoir une expression de type ``C2``.\n"
msgstr ""

#. name, q3, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   C3 obj3 = new C3();\n"
"   C2 obj2 = new C3();\n"
"   C1 obj1 = obj3;\n"
"   C4 obj4 = obj2;\n"
msgstr ""

#. name, q3, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"``C4 obj4`` ne peut pas recevoir une expression de type ``C2``.\n"
msgstr ""

#. name, q3, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   C4 obj4 = new C4();\n"
"   C3 obj3 = new C3();\n"
"   C1 obj1 = obj3;\n"
"   C2 obj2 = obj1;\n"
msgstr ""

#. name, q3, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"``C2 obj2`` ne peut pas recevoir une expression de type ``C1`` (même si "
"l'objet qu'elle désigne est en fait de type ``C3``).\n"
msgstr ""

#. name, q3, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   C3 obj3 = null;\n"
"   C2 obj2 = obj4;\n"
"   C4 obj4 = obj3;\n"
"   C1 obj1 = new C2();\n"
msgstr ""

#. name, q3, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"``C4 obj4`` ne peut pas recevoir une expression de type ``C3`` (même si elle "
"produit la référence ``null``).\n"
msgstr ""

#. name, q3, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   C4 obj4 = new C4();\n"
"   C2 obj2 = obj4;\n"
"   C3 obj3 = new C1();\n"
"   C1 obj1 = new C2();\n"
msgstr ""

#. name, q3, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"``C3 obj3`` ne peut pas recevoir une expression de type ``C1``.\n"
msgstr ""

#. name, q3, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   C2 obj2 = new C3();\n"
"   C1 obj1 = new C2();\n"
"   C3 obj3 = obj2;\n"
"   C4 obj4 = new C4();\n"
msgstr ""

#. name, q3, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"``C3 obj3`` ne peut pas recevoir une expression de type ``C3`` (même si "
"l'objet qu'elle désigne est en fait de type ``C3``).\n"
msgstr ""

#. name, q4, name
#: m07_qcm/task.yaml
msgid "Conversions de type"
msgstr ""

#. name, q4, header
#: m07_qcm/task.yaml
msgid ""
"\n"
"Soit les classes ``C1`` et ``C2`` définies comme suit\n"
"\n"
".. code-block:: java\n"
"\n"
"    public class C1 {\n"
"        public C1() {\n"
"            // ...\n"
"        }\n"
"        // ...\n"
"    }\n"
"\n"
"    public class C2 extends C1 {\n"
"        public C2() {\n"
"            // ...\n"
"        }\n"
"        // ...\n"
"    }\n"
"\n"
"On considère ensuite les instructions suivantes\n"
"\n"
".. code-block:: java\n"
"\n"
"    C1 obj1 = new C1();\n"
"    C2 obj2 = new C2();\n"
"    C1 obj3 = new C2();\n"
"\n"
"    C2 conv12 = obj1;\n"
"    C1 conv21 = obj2;\n"
"    C2 conv32 = obj3;\n"
"    C2 cast12 = (C2) obj1;\n"
"    C1 cast21 = (C1) obj2;\n"
"    C2 cast32 = (C2) obj3;\n"
"\n"
"Parmi ces instructions, certaines causent une erreur à le compilation ou à "
"l'exécution.  Parmi les propositions ci-dessous, laquelle identifie "
"correctement ces erreurs ?\n"
msgstr ""

#. name, q4, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   C2 conv12 = obj1;       // => erreur à la compilation\n"
"   C1 conv21 = obj2;       // => OK\n"
"   C2 conv32 = obj3;       // => erreur à la compilation\n"
"   C2 cast12 = (C2) obj1;  // => erreur à l'exécution\n"
"   C1 cast21 = (C1) obj2;  // => OK mais type-cast inutile\n"
"   C2 cast32 = (C2) obj3;  // => OK\n"
msgstr ""

#. name, q4, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   C2 conv12 = obj1;       // => erreur à la compilation\n"
"   C1 conv21 = obj2;       // => OK\n"
"   C2 conv32 = obj3;       // => OK\n"
"   C2 cast12 = (C2) obj1;  // => erreur à l'exécution\n"
"   C1 cast21 = (C1) obj2;  // => OK mais type-cast inutile\n"
"   C2 cast32 = (C2) obj3;  // => OK\n"
msgstr ""

#. name, q4, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"La variable ``obj3`` est de type ``C1`` : erreur de compilation à la ligne "
"3.\n"
msgstr ""

#. name, q4, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   C2 conv12 = obj1;       // => erreur à la compilation\n"
"   C1 conv21 = obj2;       // => OK\n"
"   C2 conv32 = obj3;       // => erreur à la compilation\n"
"   C2 cast12 = (C2) obj1;  // => OK\n"
"   C1 cast21 = (C1) obj2;  // => OK mais type-cast inutile\n"
"   C2 cast32 = (C2) obj3;  // => OK\n"
msgstr ""

#. name, q4, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"``obj1`` réfère à une instance de ``C1`` : erreur de type-cast à l'exécution "
"à la ligne 4.\n"
msgstr ""

#. name, q4, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   C2 conv12 = obj1;       // => erreur à la compilation\n"
"   C1 conv21 = obj2;       // => OK\n"
"   C2 conv32 = obj3;       // => erreur à la compilation\n"
"   C2 cast12 = (C2) obj1;  // => erreur à l'exécution\n"
"   C1 cast21 = (C1) obj2;  // => OK mais type-cast inutile\n"
"   C2 cast32 = (C2) obj3;  // => erreur à l'exécution\n"
msgstr ""

#. name, q4, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"``obj3`` réfère bien à une instance de ``C2`` : pas d'erreur à la ligne 6.\n"
msgstr ""

#. name, q4, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   C2 conv12 = obj1;       // => erreur à la compilation\n"
"   C1 conv21 = obj2;       // => OK\n"
"   C2 conv32 = obj3;       // => erreur à la compilation\n"
"   C2 cast12 = (C2) obj1;  // => erreur à la compilation\n"
"   C1 cast21 = (C1) obj2;  // => OK mais type-cast inutile\n"
"   C2 cast32 = (C2) obj3;  // => OK\n"
msgstr ""

#. name, q4, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"La ligne 4 est correcte du point de vue des types mais causera erreur de "
"type-cast à l'exécution.\n"
msgstr ""

#. name, q4, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   C2 conv12 = obj1;       // => erreur à la compilation\n"
"   C1 conv21 = obj2;       // => erreur à la compilation\n"
"   C2 conv32 = obj3;       // => erreur à la compilation\n"
"   C2 cast12 = (C2) obj1;  // => erreur à l'exécution\n"
"   C1 cast21 = (C1) obj2;  // => OK mais type-cast inutile\n"
"   C2 cast32 = (C2) obj3;  // => OK\n"
msgstr ""

#. name, q4, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"La variable ``obj2`` est de type ``C2`` qui est une sous-classe de ``C1`` : "
"pas d'erreur à la ligne 2.\n"
msgstr ""

#. name, q4, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   C2 conv12 = obj1;       // => erreur à la compilation\n"
"   C1 conv21 = obj2;       // => OK\n"
"   C2 conv32 = obj3;       // => erreur à la compilation\n"
"   C2 cast12 = (C2) obj1;  // => erreur à l'exécution\n"
"   C1 cast21 = (C1) obj2;  // => erreur à l'exécution\n"
"   C2 cast32 = (C2) obj3;  // => OK\n"
msgstr ""

#. name, q4, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"``obj2`` réfère à une instance de ``C2`` qui est bien une sous-classe de "
"``C1`` : pas d'erreur à la ligne 5.\n"
msgstr ""

#. name, q5, name
#: m07_qcm/task.yaml
msgid "Re-définition et surcharge"
msgstr ""

#. name, q5, header
#: m07_qcm/task.yaml
msgid ""
"\n"
"\n"
"Soit les classes ``C1`` et ``C2`` définies comme suit\n"
"\n"
".. code-block:: java\n"
"\n"
"    public class C1 {\n"
"        // ...\n"
"        public int m1(String s, int n) {\n"
"            // ...\n"
"        }\n"
"    }\n"
"\n"
"    public class C2 extends C1 {\n"
"        // ...\n"
"    }\n"
"\n"
"Parmi les définitions suivantes dans ``C2``, laquelle constitue une *re-"
"définition* (overriding) correcte de la méthode ``m1`` de la classe ``C1`` "
"et non une *surcharge* (overloading) ?\n"
msgstr ""

#. name, q5, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"       public int m1(String s, int n) {\n"
"           return super.m1(s, n * 2) + 10;\n"
"       }\n"
msgstr ""

#. name, q5, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"       public int m1(String x, int i) {\n"
"           return super.m1(x, i * 2) + 10;\n"
"       }\n"
msgstr ""

#. name, q5, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"Les paramètres peuvent avoir un nom différent, pour autant que types "
"correspondent exactement.\n"
msgstr ""

#. name, q5, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"       public int m1(int n, String s) {\n"
"           return super.m1(s, n * 2) + 10;\n"
"       }\n"
msgstr ""

#. name, q5, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"Les paramètres doivent être dans le même ordre.\n"
msgstr ""

#. name, q5, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"       public double m1(String s, int n) {\n"
"           return super.m1(s, n * 2) + 10.0;\n"
"       }\n"
msgstr ""

#. name, q5, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"Le type de résultat doit être le même.\n"
msgstr ""

#. name, q5, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"       public int m1(String s, int n) {\n"
"           return super(s, n * 2) + 10;\n"
"       }\n"
msgstr ""

#. name, q5, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"Erreur de syntaxe : utiliser ``super.m1`` pour appeler la méthode ``m1`` de "
"la classe-mère.\n"
msgstr ""

#. name, q5, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"       public int m1(String s, int n, int n2) {\n"
"           return super.m1(s, n * 2) + n2;\n"
"       }\n"
msgstr ""

#. name, q5, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"Il faut conserver le même nombre de paramètres.\n"
msgstr ""

#. name, q6, name
#: m07_qcm/task.yaml
msgid "Modificateurs de visibilité"
msgstr ""

#. name, q6, header
#: m07_qcm/task.yaml
msgid ""
"\n"
"Considérez les classes ``C1``, ``C2``, ``C3`` définies comme suit\n"
"\n"
".. code-block:: java\n"
"\n"
"    public class C1 {\n"
"        // ...\n"
"        public    int publ() { /* ... */ }\n"
"        protected int prot() { /* ... */ }\n"
"        private   int priv() { /* ... */ }\n"
"        public int m1() { /* ... */ }\n"
"    }\n"
"\n"
"    public class C2 extends C1 {\n"
"        // ...\n"
"        public int m2() { /* ... */ }\n"
"    }\n"
"\n"
"    public class C3 {\n"
"        // ...\n"
"        public int m3() { /* ... */ }\n"
"    }\n"
"\n"
"Parmi les groupes d'affirmation suivants, lequel est correct ?\n"
msgstr ""

#. name, q6, text
#: m07_qcm/task.yaml
msgid ""
"\n"
"\n"
"- ``publ`` peut être appelée dans le corps de ``m3``.\n"
"- ``prot`` peut être appelée dans le corps de ``m2``.\n"
"- ``priv`` NE peut PAS être appelée dans le corps de ``m2``.\n"
msgstr ""

#. name, q6, text
#: m07_qcm/task.yaml
msgid ""
"\n"
"\n"
"- ``publ`` peut être appelée dans le corps de ``m2``.\n"
"- ``prot`` NE peut PAS être appelée dans le corps de ``m3``.\n"
"- ``priv`` peut être appelée dans le corps de ``m1``.\n"
msgstr ""

#. name, q6, text
#: m07_qcm/task.yaml
msgid ""
"\n"
"\n"
"- ``publ`` NE peut PAS être appelée dans le corps de ``m3``.\n"
"- ``prot`` peut être appelée dans le corps de ``m2``.\n"
"- ``priv`` peut être appelée dans le corps de ``m1``.\n"
msgstr ""

#. name, q6, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"``publ`` a la visibilité ``public``, elle peut être appelée partout.\n"
msgstr ""

#. name, q6, text
#: m07_qcm/task.yaml
msgid ""
"\n"
"\n"
"- ``publ`` peut être appelée dans le corps de ``m3``.\n"
"- ``prot`` NE peut PAS être appelée dans le corps de ``m2``.\n"
"- ``priv`` peut être appelée dans le corps de ``m1``.\n"
msgstr ""

#. name, q6, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"``prot`` a la visibilité ``protected``, elle peut être appelée dans la "
"classe ``C2`` qui étend ``C1``.\n"
msgstr ""

#. name, q6, text
#: m07_qcm/task.yaml
msgid ""
"\n"
"\n"
"- ``priv`` peut être appelée dans le corps de ``m2``.\n"
"- ``publ`` peut être appelée dans le corps de ``m2``.\n"
"- ``prot`` NE peut PAS être appelée dans le corps de ``m3``.\n"
msgstr ""

#. name, q6, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"``priv`` a la visibilité ``private``, elle peut être appelée uniquement dans "
"sa propre classe ``C1``.\n"
msgstr ""

#. name, q6, text
#: m07_qcm/task.yaml
msgid ""
"\n"
"\n"
"- ``prot`` peut être appelée dans le corps de ``m2``.\n"
"- ``publ`` NE peut PAS être appelée dans le corps de ``m2``.\n"
"- ``priv`` peut être appelée dans le corps de ``m1``.\n"
msgstr ""

#. name, q6, text
#: m07_qcm/task.yaml
msgid ""
"\n"
"\n"
"- ``publ`` peut être appelée dans le corps de ``m3``.\n"
"- ``prot`` peut être appelée dans le corps de ``m3``.\n"
"- ``priv`` peut être appelée dans le corps de ``m1``.\n"
msgstr ""

#. name, q6, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"``prot`` a la visibilité ``protected``, elle ne peut pas être appelée dans "
"``C3`` qui n'étend pas ``C1``.\n"
msgstr ""

#. name, q6, text
#: m07_qcm/task.yaml
msgid ""
"\n"
"\n"
"- ``publ`` peut être appelée dans le corps de ``m3``.\n"
"- ``prot`` peut être appelée dans le corps de ``m2``.\n"
"- ``priv`` NE peut PAS être appelée dans le corps de ``m1``.\n"
msgstr ""

#. name, q6, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"``priv`` peut toujours être appelée dans la classe où elle est définie.\n"
msgstr ""

#. name, q7, name
#: m07_qcm/task.yaml
msgid "Variables et méthodes de classe"
msgstr ""

#. name, q7, header
#: m07_qcm/task.yaml
msgid ""
"\n"
"On considère le code suivant\n"
"\n"
".. code-block:: java\n"
"\n"
"    public class C {\n"
"        private static int svar;\n"
"        private int var;\n"
"\n"
"        public void m1() { var = var + 1; }\n"
"        public void m2() { svar = svar + 1; }\n"
"        public static void m3() { var = var + 1; }\n"
"        public static void m4() { svar = svar + 1; }\n"
"    }\n"
"\n"
"Parmi ces définitions de méthode, lesquelles produisent une erreur de "
"compilation ?\n"
msgstr ""

#. name, q7, text
#: m07_qcm/task.yaml
msgid "La méthode ``m3``\n"
msgstr ""

#. name, q7, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"Une méthode de classe (``static``) ne peut pas accéder à la variable "
"d'instance ``var``.\n"
msgstr ""

#. name, q7, text
#: m07_qcm/task.yaml
msgid "Les méthodes ``m2`` et ``m3``\n"
msgstr ""

#. name, q7, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"``m2`` peut parfaitement accéder à la variable de classe ``svar``.\n"
msgstr ""

#. name, q7, text
#: m07_qcm/task.yaml
msgid "Les méthodes ``m3`` et ``m4``\n"
msgstr ""

#. name, q7, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"``m4`` est parfaitement valide.\n"
msgstr ""

#. name, q7, text
#: m07_qcm/task.yaml
msgid "La méthode ``m2``\n"
msgstr ""

#. name, q7, text
#: m07_qcm/task.yaml
msgid "La méthode ``m4``\n"
msgstr ""

#. name, q7, text
#: m07_qcm/task.yaml
msgid "Aucune\n"
msgstr ""

#. name, q7, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"La méthode de classe (``static``) ``m3`` ne peut pas accéder à la variable "
"d'instance ``var``.\n"
msgstr ""

#. name, q8, name
#: m07_qcm/task.yaml
msgid "Variables de classe et d'instance"
msgstr ""

#. name, q8, header
#: m07_qcm/task.yaml
msgid ""
"\n"
"On considère la classe ``C`` suivante\n"
"\n"
".. code-block:: java\n"
"\n"
"    public class C {\n"
"        private static int svar = 0;\n"
"        private int var;\n"
"\n"
"        public C() {\n"
"            var = 0;\n"
"        }\n"
"\n"
"        public void m1() {\n"
"            var = var + 1;\n"
"            System.out.println(var);\n"
"        }\n"
"\n"
"        public void m2() {\n"
"            svar = svar + 10;\n"
"            System.out.println(svar);\n"
"        }\n"
"    }\n"
"\n"
"On exécute les instructions suivantes\n"
"\n"
".. code-block:: java\n"
"\n"
"    C c1 = new C();\n"
"    c1.m1();\n"
"    c1.m2();\n"
"    C c2 = new C();\n"
"    c2.m1();\n"
"    c2.m2();\n"
"\n"
"Quel est le résultat affiché ?\n"
msgstr ""

#. name, q8, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   1\n"
"   10\n"
"   1\n"
"   20\n"
msgstr ""

#. name, q8, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"``m1`` affecte des variables d'instance distinctes de ``c1`` et ``c2`` "
"tandis que ``m2`` affecte une variable de classe commune.\n"
msgstr ""

#. name, q8, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   1\n"
"   10\n"
"   1\n"
"   10\n"
msgstr ""

#. name, q8, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"``m2`` affecte une variable de classe commune.\n"
msgstr ""

#. name, q8, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   1\n"
"   10\n"
"   2\n"
"   20\n"
msgstr ""

#. name, q8, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"``m1`` affecte des variables d'instance distinctes de ``c1`` et ``c2``.\n"
msgstr ""

#. name, q8, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   1\n"
"   11\n"
"   12\n"
"   22\n"
msgstr ""

#. name, q8, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"``m1`` et ``m2`` affectent des variables différentes ``var`` et ``svar``\n"
msgstr ""

#. name, q8, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   1\n"
"   2\n"
"   1\n"
"   2\n"
msgstr ""

#. name, q8, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"Attention, on appelle deux méthodes différentes ``m1`` et ``m2``.\n"
msgstr ""

#. name, q9, name
#: m07_qcm/task.yaml
msgid "La méthode equals"
msgstr ""

#. name, q9, header
#: m07_qcm/task.yaml
msgid ""
"\n"
"Soit la classe ``Point`` définie comme suit\n"
"\n"
".. code-block:: java\n"
"\n"
"    public class Point {\n"
"        private int x;\n"
"        private int y;\n"
"        public C1(int x, int y) {\n"
"            this.x = x;\n"
"            this.y = y;\n"
"        }\n"
"        // ...\n"
"    }\n"
"\n"
"Dans cette classe, laquelle des définitions suivantes re-définirait "
"correctement la méthode ``equals`` de la classe ``Object`` ?\n"
msgstr ""

#. name, q9, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public boolean equals(Object other) {\n"
"       if (other != null && other instanceof Point) {\n"
"           Point p = (Point) other;\n"
"           return ((this.x == p.x) && (this.y == p.y));\n"
"       } else {\n"
"           return false;\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q9, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public boolean equals(Object other) {\n"
"       if (other != null && other instanceof Point) {\n"
"           return ((this.x == other.x) && (this.y == other.y));\n"
"       } else {\n"
"           return false;\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q9, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"``other`` est de type ``Object``, ``other.x`` n'est pas correct.\n"
msgstr ""

#. name, q9, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public boolean equals(Object other) {\n"
"       if (other instanceof Point) {\n"
"           Point p = (Point) other;\n"
"           return ((this.x == p.x) && (this.y == p.y));\n"
"       } else {\n"
"           return false;\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q9, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"``other`` pourrait être ``null``.\n"
msgstr ""

#. name, q9, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public boolean equals(Point other) {\n"
"       return ((this.x == other.x) && (this.y == other.y));\n"
"   }\n"
msgstr ""

#. name, q9, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"Ceci fonctionne mais ne correspond pas à la méthode ``equals`` de "
"``Object``.  Le paramètre doit être de type ``Object``.\n"
msgstr ""

#. name, q9, text
#: m07_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public boolean equals(Object other) {\n"
"       Point p = (Point) other;\n"
"       return ((this.x == p.x) && (this.y == p.y));\n"
"   }\n"
msgstr ""

#. name, q9, feedback
#: m07_qcm/task.yaml
msgid ""
"\n"
"Ceci produira une erreur à l'exécution si ``other`` est ``null`` ou n'est "
"pas de type ``Point``.\n"
msgstr ""

#. author
#: m07dem1/task.yaml m07dem2/task.yaml
msgid "Alexandre Dubray"
msgstr ""

#. context
#: m07dem1/task.yaml
msgid ""
"Considérez la classe ``Pair`` suivante :\n"
"\n"
".. code-block :: java\n"
"\n"
"    /**\n"
"     * Une paire d'entiers\n"
"     */\n"
"    public class Pair {\n"
"        private int a; // le premier élément de la paire\n"
"        private int b; // le second élément de la paire\n"
"\n"
"        /**\n"
"         * @pre -\n"
"         * @post crée un paire composée de x et y\n"
"         */\n"
"        public Pair(int x, int y) {\n"
"          a = x;\n"
"          b = y;\n"
"        }\n"
"        // RESTE NON FOURNI\n"
"    }\n"
"\n"
"Définissez une méthode ``equals`` pour cette classe, **qui re-définit celle "
"de la classe** Object_ telle que deux paires sont égales si leur deux "
"composantes sont égales.\n"
"\n"
".. _Object: http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html\n"
"\n"
msgstr ""

#. name
#: m07dem1/task.yaml
msgid "Mission 7 : Question de Démarrage 1 : Paire d'entiers"
msgstr ""

#. name, q1, header
#: m07dem1/task.yaml
msgid "Ecrivez ici **la signature et le corps** de la méthode ``equals``."
msgstr ""

#. context
#: m07dem2/task.yaml
msgid ""
" Complétez la classe ``Ticket`` ci-dessous :\n"
"\n"
".. code-block :: java\n"
"\n"
"     /**\n"
"     * Un ticket de parking\n"
"     */\n"
"    public class Ticket {\n"
"\n"
"        // A COMPLETER (1)\n"
"        private int numero;  // numéro du ticket\n"
"\n"
"        /**\n"
"         * @pre  -\n"
"         * @post Crée un ticket avec un nouveau numéro. Les numéros\n"
"         *       sont attribués séquentiellement à partir de 1.\n"
"         */\n"
"        public Ticket() {\n"
"            // A COMPLETER (2)\n"
"        }\n"
"\n"
"        /**\n"
"         * @pre  -\n"
"         * @post retourne le numero de billet\n"
"         */\n"
"        public int getNumero() {\n"
"            return numero;\n"
"        }\n"
"    }"
msgstr ""

#. name
#: m07dem2/task.yaml
msgid "Mission 7 : Question de Démarrage 2 : Tickets de Parking"
msgstr ""

#. name, q1, header
#: m07dem2/task.yaml
msgid "Complétez le fragment de code **(1)** ici."
msgstr ""

#. name, q2, header
#: m07dem2/task.yaml
msgid "Complétez le fragment de code **(2)** ici."
msgstr ""

#. author
#: m07real/task.yaml m09real/task.yaml m11real/task.yaml
msgid "François MICHEL, Bastien BODART"
msgstr ""

#. context
#: m07real/task.yaml
msgid ""
"Vous pouvez soumettre ici ou via BlueJ votre phase de réalisation pour la "
"Mission 7.\n"
"\n"
"Vous attendons une archive **.zip** contenant uniquement les fichiers :\n"
"\n"
"- Article.java\n"
"- ArticlePiece.java\n"
"- ArticleReparation.java\n"
"- Facture.java\n"
"- Piece.java\n"
"- TestFacture.java\n"
"- TestFactureInitial.java\n"
"- README.txt"
msgstr ""

#. name
#: m07real/task.yaml
msgid "Mission 7: Phase de réalisation: Soumission"
msgstr ""

#. name, q1, name
#: m07real/task.yaml
msgid "Phase de réalisation de la Mission 7"
msgstr ""

#. context
#: m08Q1/task.yaml
msgid ""
"On vous donne l'interface ``MyString`` suivante:\n"
"\n"
".. code-block:: java\n"
"\n"
"  public interface MyString {\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne la longueur de la chaîne de caractère\n"
"     */\n"
"    public int length();\n"
"\n"
"    /*\n"
"     * @pre 0<=i<this.length()\n"
"     * @post retourne le caractère à l'indice i de this\n"
"     */\n"
"    public char charAt(int i);\n"
"\n"
"    /*\n"
"     * @pre s!=null\n"
"     * @post retourne true si la chaine de caratères s est comprise dans la "
"chaine this, false sinon\n"
"     */\n"
"    public boolean contains(MyString s);\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne la chaine de caractères qui est la concaténation entre "
"this et le caractère c\n"
"     */\n"
"    public MyString concat(char c);\n"
"  }\n"
"\n"
"Ainsi que la classe suivante :\n"
"\n"
".. code-block:: java\n"
"\n"
"  public class StringTab implements MyString {\n"
"    private char[] s;\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post construit une instance de la classe StringTab\n"
"     */\n"
"    public StringTab(char c) {\n"
"        // A compléter\n"
"        // Constructeur 1\n"
"    }\n"
"\n"
"    public StringTab(char[] c) {\n"
"        // A compléter\n"
"        // Constructeur 2\n"
"    }\n"
"\n"
"    public MyString concat(char c){\n"
"        // Non fourni\n"
"    }\n"
"    public boolean contains(MyString s) {\n"
"        // Non fourni\n"
"    }\n"
"  }"
msgstr ""

#. name
#: m08Q1/task.yaml
msgid "Mission 8 : Q* MyString - Constructeur"
msgstr ""

#. name, q1, name
#: m08Q1/task.yaml m08Q4/task.yaml
msgid "Premier constrcuteur"
msgstr ""

#. name, q1, header
#. name, q2, header
#: m08Q1/task.yaml
msgid "Ecrivez le constructeur"
msgstr ""

#. name, q2, name
#: m08Q1/task.yaml m08Q4/task.yaml
msgid "Deuxième constrcuteur"
msgstr ""

#. name, q3, name
#. name, q1, name
#: m08Q1/task.yaml m08Q4/task.yaml m08Q5/task.yaml m08Q6/task.yaml
#: m08Q7/task.yaml
msgid "Complétez votre classe"
msgstr ""

#. name, q3, header
#. name, q1, header
#: m08Q1/task.yaml m08Q4/task.yaml m08Q5/task.yaml m08Q6/task.yaml
#: m08Q7/task.yaml
msgid "Ecrivez ici les méthodes qui pourraient manquer"
msgstr ""

#. context
#: m08Q2/task.yaml
msgid ""
"On vous donne l'interface ``MyString`` suivante :\n"
"\n"
".. code-block:: java\n"
"\n"
"  public interface MyString {\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne la longueur de la chaîne de caractère\n"
"     */\n"
"    public int length();\n"
"\n"
"\n"
"    /*\n"
"     * @pre 0<=i<this.length()\n"
"     * @post retourne le caractère à l'indice i de this\n"
"     */\n"
"    public char charAt(int i);\n"
"\n"
"    /*\n"
"     * @pre s != null\n"
"     * @post retourne true si la chaine de caratères s est comprise dans la "
"chaine this, false sinon\n"
"     */\n"
"    public boolean contains(MyString s);\n"
"\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne la chaine de caractères qui est la concaténation entre "
"this et le caractère c\n"
"     */\n"
"     public MyString concat(char c);\n"
"  }\n"
"\n"
"Ainsi que la classe suivante :\n"
"\n"
".. code-block:: java\n"
"\n"
"  public class StringTab implements MyString {\n"
"    private char[] s;\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post construit une instance de la classe StringTab\n"
"     */\n"
"    public StringTab(char c) {\n"
"        // Non fourni\n"
"    }\n"
"    public StringTab(char[] c) {\n"
"        // Non fourni\n"
"    }\n"
"    //Partie de code non fournie\n"
"\n"
"    public MyString concat(char c) {\n"
"        // A compléter\n"
"    }\n"
"    public boolean contains(MyString s) {\n"
"        // Non fourni\n"
"    }\n"
"  }"
msgstr ""

#. name
#: m08Q2/task.yaml
msgid "Mission 8 : Q* MyString - Concat"
msgstr ""

#. name, q1, name
#: m08Q2/task.yaml
msgid "Méthode Concat"
msgstr ""

#. name, q1, header
#: m08Q2/task.yaml
msgid "Ecrivez ici le contenu de la méthode"
msgstr ""

#. context
#: m08Q3/task.yaml
msgid ""
"On vous donne l'interface ``MyString`` suivante:\n"
"\n"
".. code-block:: java\n"
"\n"
"  public interface MyString {\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne la longueur de la chaîne de caractère\n"
"     */\n"
"    public int length();\n"
"\n"
"    /*\n"
"     * @pre 0<=i<this.length()\n"
"     * @post retourne le caractère à l'indice i de this\n"
"     */\n"
"    public char charAt(int i);\n"
"\n"
"    /*\n"
"     * @pre s != null\n"
"     * @post retourne true si la chaine de caratères s est comprise dans la "
"chaine this, false sinon\n"
"     */\n"
"    public boolean contains(MyString s);\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne la chaine de caractères qui est la concaténation entre "
"this et le caractère c\n"
"     */\n"
"    public MyString concat(char c);\n"
"  }\n"
"\n"
"Ainsi que la classe suivante :\n"
"\n"
".. code-block:: java\n"
"\n"
"  public class StringTab implements MyString {\n"
"    private char[] s;\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post construit une instance de la classe StringTab\n"
"     */\n"
"    public StringTab(char c) {\n"
"        // Non fourni\n"
"    }\n"
"    public StringTab(char[] c) {\n"
"        // Non fourni\n"
"    }\n"
"    //Partie de code non fournie\n"
"\n"
"    public MyString concat(char c) {\n"
"        // Non fourni\n"
"    }\n"
"    public boolean contains(MyString s) {\n"
"        // A compléter\n"
"    }\n"
"  }"
msgstr ""

#. name
#: m08Q3/task.yaml
msgid "Mission 8 : Q* MyString - Contains"
msgstr ""

#. name, q1, name
#: m08Q3/task.yaml
msgid "Méthode Contains"
msgstr ""

#. name, q1, header
#: m08Q3/task.yaml
msgid ""
"Ecrivez ici le contenu de la méthode ``contains`` de la classe ``StringTab``"
msgstr ""

#. context
#: m08Q4/task.yaml
msgid ""
"On vous donne linterface ``Byte`` suivante :\n"
"\n"
".. code-block:: java\n"
"\n"
"  public interface Byte {\n"
"    /*\n"
"    * @pre i est un entier positif et 0<=i<=7\n"
"    * @post On retourne la valeur du bit à la position i\n"
"    */\n"
"    public int getBit(int i);\n"
"    /*\n"
"    * @pre i est un entier positif  et 0<=i<=7\n"
"    * @post le bit à la position i est mis à 1\n"
"    */\n"
"    public void setBit(int i);\n"
"    /*\n"
"    * @pre i est un entier positif  et 0<=i<=7\n"
"    * @post le bit à la position i est remis à 0\n"
"    */\n"
"    public void resetBit(int i);\n"
"    /*\n"
"    * @pre -\n"
"    * @post La chaîne est décallée d'un bit vers la droite\n"
"    * (attention à la structure interne)\n"
"    * Le bit de poids faible est mis à 0.\n"
"    */\n"
"    public void shiftLeft();\n"
"    /*\n"
"    * @pre -\n"
"    * @post La chaîne est décallée d'un bit vers la gauche\n"
"    * (attention à la structure interne)\n"
"    * Le bit de poids fort prend la valeur du bit de poids faible avant "
"rotation\n"
"    */\n"
"    public void rotateRight();\n"
"    /*\n"
"    * @pre -\n"
"    * @post On effectue un ET logique entre chaque bit de b et b1\n"
"    */\n"
"    public Byte and(Byte b1);\n"
"  }\n"
"\n"
"Ainsi que la classe (à compléter) ``ByteString`` suivante :\n"
"\n"
".. code-block:: java\n"
"\n"
"  public class ByteString implements Byte {\n"
"   private StringBuilder b; // contient les caractères représentant le byte\n"
"\n"
"   /*\n"
"    * @pre -\n"
"    * @post a construit un byte dont les huit bits sont mis à zéro\n"
"    *       le bit de poids fort est en position 7 dans le StringBuilder\n"
"    */\n"
"   public ByteString() {\n"
"       //A COMPLETER\n"
"   }\n"
"\n"
"   /*\n"
"    * @pre s.length==8, s ne contient que des caractères 0 et 1\n"
"    * @post a construit un byte dont la représentation naturelle en String "
"est s\n"
"    *       La représentation naturelle d'un byte sous la forme d'un String "
"est\n"
"    *       le bit de poids fort à gauche. Dans le StringBuilder, on stocke\n"
"    *       le byte de façon à avoir le bit de poids faible (resp. fort)\n"
"    *       en position 0 (resp. 7).\n"
"    *\n"
"    *       Exemple\n"
"    *\n"
"    *       5 en décimal correspond à 00000101 en binaire et\n"
"    *       sera stocké dans le StringBuilder 10100000\n"
"    */\n"
"   public ByteString(String s) {\n"
"       //A COMPLETER\n"
"   }\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne la représentation naturelle du nombre binaire\n"
"     *       c'est-à-dire celle où le bit de poids fort est à gauche\n"
"     */\n"
"    public String toString() {\n"
"        String r=\"\";\n"
"        for(int i=b.length()-1; i>=0;i--) {\n"
"            r=r+b.charAt(i);\n"
"        }\n"
"        return r;\n"
"    }\n"
"\n"
"   //A COMPLETER\n"
"  }"
msgstr ""

#. name
#: m08Q4/task.yaml
msgid "Mission 8 : Q* ByteString"
msgstr ""

#. name, q1, header
#: m08Q4/task.yaml
msgid "Ecrivez le corps du premier constructeur"
msgstr ""

#. name, q2, header
#: m08Q4/task.yaml
msgid "Ecrivez le corps du second constructeur"
msgstr ""

#. context
#: m08Q5/task.yaml
msgid ""
"On vous donne linterface ``Byte`` suivante :\n"
"\n"
".. code-block:: java\n"
"\n"
"  public interface Byte {\n"
"    /*\n"
"    * @pre i est un entier positif et 0<=i<=7\n"
"    * @post On retourne la valeur du bit à la position i\n"
"    */\n"
"    public int getBit(int i);\n"
"    /*\n"
"    * @pre i est un entier positif  et 0<=i<=7\n"
"    * @post le bit à la position i est mis à 1\n"
"    */\n"
"    public void setBit(int i);\n"
"    /*\n"
"    * @pre i est un entier positif  et 0<=i<=7\n"
"    * @post le bit à la position i est remis à 0\n"
"    */\n"
"    public void resetBit(int i);\n"
"    /*\n"
"    * @pre -\n"
"    * @post Le tableau est décallée d'un bit vers la droite\n"
"    * (attention à la structure interne)\n"
"    * Le bit de poids faible est mis à 0.\n"
"    */\n"
"    public void shiftLeft();\n"
"    /*\n"
"    * @pre -\n"
"    * @post Le tableau est décallée d'un bit vers la gauche\n"
"    * (attention à la structure interne)\n"
"    * Le bit de poids fort prend la valeur du bit de poids faible avant "
"rotation\n"
"    */\n"
"    public void rotateRight();\n"
"    /*\n"
"    * @pre -\n"
"    * @post On effectue un ET logique entre chaque bit de b et b1\n"
"    */\n"
"    public Byte and(Byte b1);\n"
"  }\n"
"\n"
"Ainsi que la classe (à compléter) ``ByteTab`` suivante :\n"
"\n"
".. code-block:: java\n"
"\n"
"  public class ByteTab implements Byte {\n"
"    private boolean b[];\n"
"    // true signifie 1\n"
"    // false signifie 0\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post a construit un Byte dont tous les bits sont mis à 0\n"
"     */\n"
"    public ByteTab() {\n"
"        b=new boolean[8];\n"
"        for(int i=0;i<b.length;i++) {\n"
"            b[i]=false;\n"
"        }\n"
"    }\n"
"\n"
"    /*\n"
"    * @pre s.length==8, s ne contient que des caractères 0 et 1\n"
"    * @post a construit un byte dont la représentation naturelle en String "
"est s\n"
"    *       La représentation naturelle d'un byte sous la forme d'un String "
"est\n"
"    *       le bit de poids fort à gauche. Dans le tableau de char, on "
"stocke\n"
"    *       le byte de façon à avoir le bit de poids faible (resp. fort)\n"
"    *       en position 0 (resp. 7).\n"
"    *\n"
"    *       Exemple\n"
"    *\n"
"    *       5 en décimal correspond à 00000101 en binaire et\n"
"    *       sera stocké dans le tableau 10100000\n"
"    */\n"
"    public ByteTab(String s) {\n"
"        b=new boolean[8];\n"
"        for(int i=0;i<s.length();i++) {\n"
"            if(s.charAt(i)=='0')\n"
"                b[7-i]=false;\n"
"            else\n"
"                b[7-i]=true;\n"
"        }\n"
"    }\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne la représentation naturelle du nombre binaire\n"
"     *       c'est-à-dire celle où le bit de poids fort est à gauche\n"
"     */\n"
"    public String toString() {\n"
"        String r=\"\";\n"
"        for(int i=b.length-1;i>=0;i--) {\n"
"            if(b[i])\n"
"                r+='1';\n"
"            else\n"
"                r+='0';\n"
"        }\n"
"        return r;\n"
"    }\n"
"\n"
"    //A compléter\n"
"  }"
msgstr ""

#. name
#: m08Q5/task.yaml
msgid "Mission 8 : Q* ByteTab"
msgstr ""

#. context
#: m08Q6/task.yaml
msgid ""
"On vous donne l'interface ``Stat`` suivante :\n"
"\n"
".. code-block:: java\n"
"\n"
"  public interface Stat {\n"
"      /*\n"
"       * @pre -\n"
"       * @post retourne le plus grand nombre de l'ensemble\n"
"       */\n"
"      public double max();\n"
"\n"
"      /*\n"
"       * @pre -\n"
"       * @post retourne le plus petit nombre de l'ensemble\n"
"       */\n"
"      public double min();\n"
"\n"
"      /*\n"
"       * @pre -\n"
"       * @post retourne la moyenne des nombres présents dans l'ensemble\n"
"       */\n"
"      public double moyenne();\n"
"  }\n"
"\n"
"Ainsi que la classe (à compléter) ``Vecteur`` suivante :\n"
"\n"
".. code-block:: java\n"
"\n"
"  public class Vecteur implements Stat {\n"
"      private double[] v;\n"
"\n"
"      /*\n"
"       * @pre n > 0\n"
"       * @post construit un vecteur contenant n réels\n"
"       *\n"
"       */\n"
"      public Vecteur(int n) {\n"
"          v=new double[n];\n"
"      }\n"
"\n"
"      /*\n"
"       * @pre 0 <= i < n\n"
"       * @post stocke la valeur d en position i du vecteur\n"
"       */\n"
"      public void set(int i, double d){\n"
"          v[i]=d;\n"
"      }\n"
"\n"
"      /*\n"
"       * @pre 0 <= i < n\n"
"       * @post retourne la valeur se trouvant en position i du vecteur\n"
"       */\n"
"      public double get(int i) {\n"
"          return v[i];\n"
"      }\n"
"\n"
"      //A COMPLETER\n"
"  }"
msgstr ""

#. name
#: m08Q6/task.yaml
msgid "Mission 8 : Q* Vecteur"
msgstr ""

#. context
#: m08Q7/task.yaml
msgid ""
"On vous donne l'interface ``Stat`` suivante :\n"
"\n"
".. code-block:: java\n"
"\n"
"  public interface Stat {\n"
"      /*\n"
"       * @pre -\n"
"       * @post retourne le plus grand nombre de l'ensemble\n"
"       */\n"
"      public double max();\n"
"\n"
"      /*\n"
"       * @pre -\n"
"       * @post retourne le plus petit nombre de l'ensemble\n"
"       */\n"
"      public double min();\n"
"\n"
"      /*\n"
"       * @pre -\n"
"       * @post retourne la moyenne des nombres présents dans l'ensemble\n"
"       */\n"
"      public double moyenne();\n"
"  }\n"
"\n"
"Ainsi que la classe (à compléter) ``MatriceCarree`` suivante :\n"
"\n"
".. code-block:: java\n"
"\n"
"  public class MatriceCarree implements Stat {\n"
"\n"
"      public double[][] m;\n"
"\n"
"      /*\n"
"       * @pre n > 0\n"
"       * @post a construit une matrice carrée de taille n*n\n"
"       */\n"
"      public MatriceCarree(int n) {\n"
"          m = new double[n][n];\n"
"      }\n"
"\n"
"      /*\n"
"       * @pre 0 <= i < n, 0 <= j < n\n"
"       * @post stocke la valeur d en position i,j de la matrice\n"
"       */\n"
"      public void set(int i, int j, double d) {\n"
"          m[i][j] = d;\n"
"      }\n"
"\n"
"      /*\n"
"       * @pre 0 <= i < n, 0 <= j < n\n"
"       * @post retourne la valeur se trouvant en position i,j de la matrice\n"
"       */\n"
"      public double get(int i, int j){\n"
"          return m[i][j];\n"
"      }\n"
"\n"
"      //A COMPLETER\n"
"  }"
msgstr ""

#. name
#: m08Q7/task.yaml
msgid "Mission 8 : Q* Matrice Carrée"
msgstr ""

#. context
#: m08_qcm/task.yaml
msgid ""
"=====================\n"
"Mission 8. Interfaces\n"
"=====================\n"
"\n"
"\n"
"Ces questions supposent que vous avez lu les sections suivantes du livre de "
"référence |jn|_\n"
"\n"
"    - |jn4.5|_\n"
"        - |jn4.5.1|_\n"
"        - |jn4.5.2|_\n"
"        - |jn4.5.3|_\n"
"        - |jn4.5.4|_\n"
"    - |jn5.3|_\n"
"        - |jn5.3.1|_\n"
"        - |jn5.3.2|_\n"
"        - |jn5.3.3|_\n"
"        - |jn5.3.4|_\n"
"    - |jn5.5|_\n"
"        - |jn5.5.5|_\n"
"    - |jn5.7|_\n"
"        - |jn5.7.1|_\n"
"        - |jn5.7.2|_\n"
"\n"
".. _jn: http://math.hws.edu/javanotes/\n"
".. |jn| replace:: JavaNotes\n"
"\n"
".. _jn4.5 : http://math.hws.edu/javanotes/c4/s5.html\n"
".. |jn4.5| replace:: `4.5 : APIs, Packages, and Javadoc`\n"
"\n"
".. _jn4.5.1 : http://math.hws.edu/javanotes/c4/s5.html#subroutines.5.1\n"
".. |jn4.5.1| replace:: `4.5.2 : Toolboxes`\n"
"\n"
".. _jn4.5.2 : http://math.hws.edu/javanotes/c4/s5.html#subroutines.5.2\n"
".. |jn4.5.2| replace:: `4.5.3 : Java's Standard Packages`\n"
"\n"
".. _jn4.5.3 : http://math.hws.edu/javanotes/c4/s5.html#subroutines.5.3\n"
".. |jn4.5.3| replace:: `4.5.4 : Using Classes from Packages`\n"
"\n"
".. _jn4.5.4 : http://math.hws.edu/javanotes/c4/s5.html#subroutines.5.4\n"
".. |jn4.5.4| replace:: `4.5.4 : Javadoc`\n"
"\n"
".. _jn5.3 : http://math.hws.edu/javanotes/c5/s3.html\n"
".. |jn5.3| replace:: `5.3 : Programming with Objects`\n"
"\n"
".. _jn5.3.1 : http://math.hws.edu/javanotes/c5/s3.html#OOP.3.1\n"
".. |jn5.3.1| replace:: `5.3.1 : Some Built-in Classes`\n"
"\n"
".. _jn5.3.2 : http://math.hws.edu/javanotes/c5/s3.html#OOP.3.2\n"
".. |jn5.3.2| replace:: `5.3.2 : Wrapper Classes and Autoboxing`\n"
"\n"
".. _jn5.3.3 : http://math.hws.edu/javanotes/c5/s3.html#OOP.3.3\n"
".. |jn5.3.3| replace:: `5.3.3 : The class \"Object\"`\n"
"\n"
".. _jn5.3.4 : http://math.hws.edu/javanotes/c5/s3.html#OOP.3.4\n"
".. |jn5.3.4| replace:: `5.3.4 : Object-oriented Analysis and Design`\n"
"\n"
".. _jn5.5 : http://math.hws.edu/javanotes/c5/s5.html\n"
".. |jn5.5| replace:: `5.5 : Inheritance, Polymorphism, and Abstract "
"Classes`\n"
"\n"
".. _jn5.5.5 : http://math.hws.edu/javanotes/c5/s5.html#OOP.5.5\n"
".. |jn5.5.5| replace:: `5.5.5 : Abstract Classes`\n"
"\n"
".. _jn5.7 : http://math.hws.edu/javanotes/c5/s7.html\n"
".. |jn5.7| replace:: `5.7 : Interfaces, Nested Classes, and Other Details`\n"
"\n"
".. _jn5.7.1 : http://math.hws.edu/javanotes/c5/s7.html#OOP.7.1\n"
".. |jn5.7.1| replace:: `5.7.1 : Interfaces`\n"
"\n"
".. _jn5.7.2 : http://math.hws.edu/javanotes/c5/s7.html#OOP.7.2\n"
".. |jn5.7.2| replace:: `5.7.2 : Nested Classes`\n"
msgstr ""

#. name
#: m08_qcm/task.yaml
msgid "Mission 8: QCM"
msgstr ""

#. name, q1, name
#: m08_qcm/task.yaml
msgid "Packages"
msgstr ""

#. name, q1, header
#: m08_qcm/task.yaml
msgid ""
"\n"
"Le package ``java.util`` définit (entre autres) l'interface ``List`` et une "
"classe ``ArrayList`` qui implémente ``List``.  Sachant cela, parmi les "
"fragments de programmes suivants, lequel est correct pour le compilateur "
"Java ?\n"
msgstr ""

#. name, q1, text
#: m08_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.util.List;\n"
"   public Class MyList implements List {\n"
"       private List l;\n"
"       public MyList() {\n"
"           l = new java.util.ArrayList();\n"
"       }\n"
"       // ... autres méthodes de l'interface List\n"
"   }\n"
msgstr ""

#. name, q1, text
#: m08_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.util.*;\n"
"   public Class MyList implements List {\n"
"       private List l;\n"
"       public MyList() {\n"
"           l = new ArrayList();\n"
"       }\n"
"       // ... autres méthodes de l'interface List\n"
"   }\n"
msgstr ""

#. name, q1, text
#: m08_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public Class MyList implements java.util.List {\n"
"       private java.util.List l;\n"
"       public MyList() {\n"
"           l = new java.util.ArrayList();\n"
"       }\n"
"       // ... autres méthodes de l'interface List\n"
"   }\n"
msgstr ""

#. name, q1, text
#: m08_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.util.List;\n"
"   public Class MyList implements List {\n"
"       private List l;\n"
"       public MyList() {\n"
"           l = new ArrayList();\n"
"       }\n"
"       // ... autres méthodes de l'interface List\n"
"   }\n"
msgstr ""

#. name, q1, feedback
#: m08_qcm/task.yaml
msgid ""
"\n"
"Il faut soit importer ``ArrayList``, soit mettre ``java.util.ArrayList`` "
"dans le constructeur.\n"
msgstr ""

#. name, q1, text
#: m08_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.util.ArrayList;\n"
"   public Class MyList implements List {\n"
"       private List l;\n"
"       public MyList() {\n"
"           l = new java.util.ArrayList();\n"
"       }\n"
"       // ... autres méthodes de l'interface List\n"
"   }\n"
msgstr ""

#. name, q1, feedback
#: m08_qcm/task.yaml
msgid ""
"\n"
"Il faut importer ``List`` et non ``ArrayList``.\n"
msgstr ""

#. name, q1, text
#: m08_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.*;\n"
"   public Class MyList implements List {\n"
"       private List l;\n"
"       public MyList() {\n"
"           l = new ArrayList();\n"
"       }\n"
"       // ... autres méthodes de l'interface List\n"
"   }\n"
"\n"
msgstr ""

#. name, q1, feedback
#: m08_qcm/task.yaml
msgid ""
"\n"
"``import java.*`` importe les classes (inexistantes) du package ``java`` , "
"pas celles de ``java.util``.\n"
msgstr ""

#. name, q1, text
#: m08_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public Class MyList implements List {\n"
"       private java.util.List l;\n"
"       public MyList() {\n"
"           l = new java.util.ArrayList();\n"
"       }\n"
"       // ... autres méthodes de l'interface List\n"
"   }\n"
msgstr ""

#. name, q1, feedback
#: m08_qcm/task.yaml
msgid ""
"\n"
"Il faut soit importer ``List``, soit mettre ``java.util.List`` dans la "
"déclaration de classe.\n"
msgstr ""

#. name, q1, text
#: m08_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public Class MyList implements List {\n"
"       private List l;\n"
"       public MyList() {\n"
"           l = new ArrayList();\n"
"       }\n"
"       // ... autres méthodes de l'interface List\n"
"   }\n"
msgstr ""

#. name, q1, feedback
#: m08_qcm/task.yaml
msgid ""
"\n"
"Il faut importer ``List`` et ``ArrayList``.\n"
msgstr ""

#. name, q1, text
#: m08_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public Class MyList implements java.util.List {\n"
"       private List l;\n"
"       public MyList() {\n"
"           l = new java.util.ArrayList();\n"
"       }\n"
"       // ... autres méthodes de l'interface List\n"
"   }\n"
msgstr ""

#. name, q1, feedback
#: m08_qcm/task.yaml
msgid ""
"\n"
"Il faut soit importer ``List``, soit mettre ``java.util.List`` dans la "
"déclaration de la variable ``l``.\n"
msgstr ""

#. name, q2, name
#: m08_qcm/task.yaml
msgid "Extension et implémentation"
msgstr ""

#. name, q2, header
#: m08_qcm/task.yaml
msgid ""
"\n"
"Parmi les ensembles d'affirmations suivantes, lequel est correct ?\n"
msgstr ""

#. name, q2, text
#: m08_qcm/task.yaml
msgid ""
"\n"
"\n"
"- Une classe ne peut étendre qu'une seule classe.\n"
"- Une classe peut implémenter plusieurs interfaces.\n"
msgstr ""

#. name, q2, text
#: m08_qcm/task.yaml
msgid ""
"\n"
"\n"
"- Une classe peut étendre plusieurs classes.\n"
"- Une classe peut implémenter plusieurs interfaces.\n"
msgstr ""

#. name, q2, feedback
#: m08_qcm/task.yaml
msgid ""
"\n"
"Une classe ne peut pas étendre plusieurs classes.\n"
msgstr ""

#. name, q2, text
#: m08_qcm/task.yaml
msgid ""
"\n"
"\n"
"- Une classe ne peut étendre qu'une seule classe.\n"
"- Une classe ne peut implémenter qu'une seule interface.\n"
msgstr ""

#. name, q2, feedback
#: m08_qcm/task.yaml
msgid ""
"\n"
"Une classe peut implémenter plusieurs interfaces.\n"
msgstr ""

#. name, q2, text
#: m08_qcm/task.yaml
msgid ""
"\n"
"\n"
"- Une classe peut implémenter plusieurs interfaces.\n"
"- Une interface peut implémenter une autre interface.\n"
msgstr ""

#. name, q2, feedback
#: m08_qcm/task.yaml
msgid ""
"\n"
"Une interface ne peut rien implémenter.\n"
msgstr ""

#. name, q2, text
#: m08_qcm/task.yaml
msgid ""
"\n"
"\n"
"- Une classe peut implémenter plusieurs interfaces.\n"
"- Une interface peut étendre une classe.\n"
msgstr ""

#. name, q2, feedback
#: m08_qcm/task.yaml
msgid ""
"\n"
"Une interface ne peut pas étendre une classe.\n"
"\n"
"\n"
msgstr ""

#. name, q3, name
#: m08_qcm/task.yaml
msgid "Interface"
msgstr ""

#. name, q3, header
#: m08_qcm/task.yaml
msgid ""
"\n"
"Parmi les définitions de l'interface ``Direction`` ci-dessous, laquelle est "
"correcte pour le compilateur Java?\n"
msgstr ""

#. name, q3, text
#: m08_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public interface Direction {\n"
"       /** ... */\n"
"       public int value();\n"
"\n"
"       /** ... */\n"
"       public void pivote(int angle);\n"
"   }\n"
msgstr ""

#. name, q3, text
#: m08_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public interface Direction {\n"
"       /** ... */\n"
"       value();\n"
"\n"
"       /** ... */\n"
"       pivote(int angle);\n"
"   }\n"
msgstr ""

#. name, q3, feedback
#: m08_qcm/task.yaml
msgid ""
"\n"
"Une interface contient des signatures de méthodes, pas uniquement des noms.\n"
msgstr ""

#. name, q3, text
#: m08_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public interface Direction {\n"
"       private int value;  // la direction courante\n"
"\n"
"       /** ... */\n"
"       public int value();\n"
"\n"
"       /** ... */\n"
"       public void pivote(int angle);\n"
"   }\n"
msgstr ""

#. name, q3, feedback
#: m08_qcm/task.yaml
msgid ""
"\n"
"Une interface ne contient pas de variables d'instance.\n"
msgstr ""

#. name, q3, text
#: m08_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public interface Direction {\n"
"       /** ... */\n"
"       public Direction(int val);\n"
"\n"
"       /** ... */\n"
"       public int value();\n"
"\n"
"       /** ... */\n"
"       public void pivote(int angle);\n"
"   }\n"
msgstr ""

#. name, q3, feedback
#: m08_qcm/task.yaml
msgid ""
"\n"
"Une interface ne contient pas de constructeur.\n"
msgstr ""

#. name, q3, text
#: m08_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public interface Direction {\n"
"       /** ... */\n"
"       public int value() {\n"
"           return 0;\n"
"       }\n"
"\n"
"       /** ... */\n"
"       public void pivote(int angle) {\n"
"           // rien\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q3, feedback
#: m08_qcm/task.yaml
msgid ""
"\n"
"Une interface ne contient que des signatures, pas de corps de méthodes.\n"
msgstr ""

#. name, q3, text
#: m08_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public interface Direction {\n"
"       private int value;  // la direction courante\n"
"\n"
"       /** ... */\n"
"       public Direction(int val);\n"
"\n"
"       /** ... */\n"
"       public int value();\n"
"\n"
"       /** ... */\n"
"       public void pivote(int angle);\n"
"   }\n"
msgstr ""

#. name, q3, feedback
#: m08_qcm/task.yaml
msgid ""
"\n"
"Une interface ne contient in variable d'instance, ni constructeur.\n"
msgstr ""

#. name, q4, name
#: m08_qcm/task.yaml
msgid "Interface et implémentation"
msgstr ""

#. name, q4, header
#: m08_qcm/task.yaml
msgid ""
"\n"
"On considère l'interface ``Prix`` définie comme suit\n"
"\n"
".. code-block:: java\n"
"\n"
"    public interface Prix {\n"
"        /**\n"
"         * @pre  -\n"
"         * @post retourne le montant du prix\n"
"         */\n"
"        public int getVal();\n"
"        /**\n"
"         * @pre  -\n"
"         * @post change le montant du prix\n"
"         */\n"
"        public void setVal(int x);\n"
"    }\n"
"\n"
"Parmi les classes suivantes, laquelle est une implémentation correcte de "
"``Prix`` ?\n"
msgstr ""

#. name, q4, text
#: m08_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public class MyPrix implements Prix {\n"
"       private it val;  // montant du prix\n"
"       public MyPrix(int v) {\n"
"           val = v;\n"
"       }\n"
"       public int getVal() {\n"
"           return val;\n"
"       }\n"
"       public int getVal(double tax) {\n"
"           return (int) (val * (1 + tax));\n"
"       }\n"
"       public void setVal(int x) {\n"
"           val = x;\n"
"       }\n"
"       public void setVal(double x) {\n"
"           val = (int) x;\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q4, text
#: m08_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public class MyPrix implements Prix {\n"
"       private it val;  // montant du prix\n"
"       public MyPrix(int v) {\n"
"           val = v;\n"
"       }\n"
"       public int getVal() {\n"
"           return val;\n"
"       }\n"
"       public void setVal(int x) {\n"
"           val = x;\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q4, text
#: m08_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public class MyPrix {\n"
"       private it val;  // montant du prix\n"
"       public MyPrix(int v) {\n"
"           val = v;\n"
"       }\n"
"       public int getVal() {\n"
"           return val;\n"
"       }\n"
"       public void setVal(int x) {\n"
"           val = x;\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q4, feedback
#: m08_qcm/task.yaml
msgid ""
"\n"
"Il manque la clausse ``implements`` dans l'en-tête de classe.\n"
msgstr ""

#. name, q4, text
#: m08_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public class MyPrix implements Prix {\n"
"       private it val;  // montant du prix\n"
"       public MyPrix(int v) {\n"
"           val = v;\n"
"       }\n"
"       public int getVal() {\n"
"           return val;\n"
"       }\n"
"       public int getVal(double tax) {\n"
"           return (int) (val * (1 + tax));\n"
"       }\n"
"       public void setVal(double x) {\n"
"           val = (int) x;\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q4, feedback
#: m08_qcm/task.yaml
msgid ""
"\n"
"La méthode ``void setVal(int x)`` n'est pas implémentée, attention à la "
"signature!\n"
msgstr ""

#. name, q4, text
#: m08_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"\n"
"   public class MyPrix implements Prix {\n"
"       private it val;  // montant du prix\n"
"       public MyPrix(int v) {\n"
"           val = v;\n"
"       }\n"
"       public int getVal(double tax) {\n"
"           return (int) (val * (1 + tax));\n"
"       }\n"
"       public void setVal(int x) {\n"
"           val = x;\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q4, feedback
#: m08_qcm/task.yaml
msgid ""
"\n"
"La méthode ``int getVal()`` n'est pas implémentée, attention à la "
"signature!\n"
msgstr ""

#. name, q4, text
#: m08_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"\n"
"   public class Prix implements MyPrix {\n"
"       private it val;  // montant du prix\n"
"       public MyPrix(int v) {\n"
"           val = v;\n"
"       }\n"
"       public int getVal() {\n"
"           return val;\n"
"       }\n"
"       public void setVal(int x) {\n"
"           val = x;\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q4, feedback
#: m08_qcm/task.yaml
msgid ""
"\n"
"C'est ``MyPrix`` qui implémente ``Prix`` et non l'inverse.\n"
msgstr ""

#. name, q4, text
#: m08_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public class MyPrix implements Prix {\n"
"       private it val;  // montant du prix\n"
"       public MyPrix(int v) {\n"
"           val = v;\n"
"       }\n"
"       public int getVal() {\n"
"           return val;\n"
"       }\n"
"       public int getVal(double tax) {\n"
"           return (int) (val * (1 + tax));\n"
"       }\n"
"       public int setVal(int x) {\n"
"           val = x;\n"
"           return x;\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q4, feedback
#: m08_qcm/task.yaml
msgid ""
"\n"
"La signature de ``setVal`` ne correspond pas à celle de l'interface.\n"
msgstr ""

#. name, q5, name
#: m08_qcm/task.yaml
msgid " Interfaces et types"
msgstr ""

#. name, q5, header
#: m08_qcm/task.yaml
msgid ""
"\n"
"\n"
"Soit l'interface ``I1`` et les classes ``C2`` et ``C3`` définies comme suit\n"
"\n"
".. code-block:: java\n"
"\n"
"    public interface I1 {\n"
"        // ...\n"
"    }\n"
"\n"
"    public class C2 implements I1 {\n"
"        public C2() {\n"
"            // ...\n"
"        }\n"
"        // ...\n"
"    }\n"
"\n"
"    public class C3 extends C2 {\n"
"        public C3() {\n"
"            // ...\n"
"        }\n"
"        // ...\n"
"    }\n"
"\n"
"Parmi les portions de code suivantes, laquelle est valide pour le "
"compilateur Java ?\n"
msgstr ""

#. name, q5, text
#: m08_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   C2 obj2 = new C2();\n"
"   C3 obj3 = new C3();\n"
"   I1 ojb1 = obj2;\n"
msgstr ""

#. name, q5, text
#: m08_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   C3 obj3 = new C3();\n"
"   I1 obj1 = new C3();\n"
"   C2 obj2 = new C2();\n"
msgstr ""

#. name, q5, text
#: m08_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   I1 ojb1 = new C2();\n"
"   C2 obj2 = obj1;\n"
"   C3 obj3 = new C3();\n"
msgstr ""

#. name, q5, feedback
#: m08_qcm/task.yaml
msgid ""
"\n"
"``C2 obj2`` ne peut pas recevoir une expression de type ``I1``.\n"
msgstr ""

#. name, q5, text
#: m08_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   C3 obj3 = new C2();\n"
"   I1 obj1 = new C2();\n"
"   C2 obj2 = obj3;\n"
msgstr ""

#. name, q5, feedback
#: m08_qcm/task.yaml
msgid ""
"\n"
"``I1 obj1`` ne peut pas recevoir une expression de type ``C2``.\n"
msgstr ""

#. name, q5, text
#: m08_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   C2 obj2 = new C2();\n"
"   I1 ojb1 = obj2;\n"
"   C3 obj3 = obj2;\n"
msgstr ""

#. name, q5, feedback
#: m08_qcm/task.yaml
msgid ""
"\n"
"``C3 obj3`` ne peut pas recevoir une expression de type ``I2``.\n"
msgstr ""

#. name, q5, text
#: m08_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   C3 obj3 = new C3();\n"
"   I1 obj1 = new C2();\n"
"   C2 obj2 = obj1;\n"
msgstr ""

#. context
#: m08dem1/task.yaml
msgid ""
"Les interfaces sont très pratiques en termes de conception orientée objet et "
"permettent d'avoir une vision globale cohérente du fonctionnement d'un "
"programme, de ses différents acteurs et de la manière dont ils "
"interagissent. Il est donc important de savoir implémenter des interfaces en "
"respectant leurs spécifications. Voici l'interface ``DrapeauIF``:\n"
"\n"
".. code-block:: java\n"
"\n"
"    // Une interface simple correspondant à un drapeau\n"
"    public interface DrapeauIF {\n"
"\n"
"        /*\n"
"         * @pre : -\n"
"         * @post : le drapeau prend la valeur passée en argument\n"
"         */\n"
"        public void set(boolean drapeau);\n"
"\n"
"        /*\n"
"         * @pre : -\n"
"         * @post : Si l'argument est 'V' ou 'v', le drapeau\n"
"         *         prend la valeur vrai et faux sinon\n"
"         */\n"
"        public void set(char c);\n"
"\n"
"        /*\n"
"         * @pre : -\n"
"         * @post : retourne le drapeau sous forme d'un booléen\n"
"         */\n"
"        public boolean toBoolean();\n"
"    }\n"
"\n"
"Prenez connaissance de sont fonctionnement et de ses spécifications. Voici "
"maintenant la classe ``Drapeau`` qui implémente l'interface ``DrapeauIF``:\n"
"\n"
".. code-block:: java\n"
"\n"
"    // Une classe simple avec un objet contenant un booléen\n"
"    public class Drapeau implements DrapeauIF {\n"
"\n"
"        private boolean drapeau; // la valeur du drapeau\n"
"\n"
"        // Constructeurs\n"
"        /*\n"
"         * @pre : -\n"
"         * @post : un objet de type Drapeau est créé\n"
"         *         et représente le drapeau 'false'\n"
"         */\n"
"        public Drapeau() {\n"
"            drapeau = false;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre : -\n"
"         * @post : un objet de type Drapeau est créé et\n"
"         *         représente le booleen passé en argument\n"
"         */\n"
"        public Drapeau(boolean drapeau) {\n"
"            this.drapeau = drapeau;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre : -\n"
"         * @post : un objet de type Drapeau est créé.\n"
"         *         Si l'argument est 'V' ou 'v', il représente le\n"
"         *         drapeau true.\n"
"         *         Sinon, il représente le drapeau false\n"
"         */\n"
"        public Drapeau(char c) {\n"
"            drapeau = (c == 'V' || c == 'v');\n"
"        }\n"
"\n"
"        public void set(boolean drapeau) {\n"
"            // A Complèter\n"
"        }\n"
"\n"
"        public void set(char c) {\n"
"            // A Complèter\n"
"        }\n"
"\n"
"        public boolean toBoolean() {\n"
"            return drapeau;\n"
"        }\n"
"    }\n"
"\n"
"Implémentez les deux alternatives de la méthode ``set()`` de la classe "
"``Drapeau`` en vous référant aux spécifications énoncées dans l'interface "
"``DrapeauIF``.\n"
msgstr ""

#. name
#: m08dem1/task.yaml
msgid "Mission 8 : Question de démarrage 1 : Implémenter une interface"
msgstr ""

#. name, q1, name
#: m08dem1/task.yaml
msgid "La méthode set(boolean)"
msgstr ""

#. name, q1, header
#: m08dem1/task.yaml
msgid ""
"Implémentez ici le corps de la méthode ``set``, qui prend comme argument un "
"booléen"
msgstr ""

#. name, q2, name
#: m08dem1/task.yaml
msgid "La méthode set(char)"
msgstr ""

#. name, q2, header
#: m08dem1/task.yaml
msgid ""
"Implémentez ici le corps de la méthode ``set``, qui prend comme argument un "
"char"
msgstr ""

#. context
#: m08dem2/task.yaml
msgid ""
"En Java, concaténer des ``String`` avec l'opérateur ``+`` implique la "
"création et la desctruction successive d'un grand nombre de ``String``. On "
"utilise en général un ``StringBuffer`` (http://docs.oracle.com/javase/7/docs/"
"api/java/lang/StringBuffer.html) pour éviter ce problème. En utilisant l'API "
"de la classe ``StringBuffer``, implémentez le corps de la méthode "
"``repeat()`` qui permet de répéter un ``String`` un certain nombre de fois. "
"Voici la signature de cette méthode :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /*\n"
"     * @pre -\n"
"     * @post retourne le String s répété n fois.\n"
"     *      Si s == null ou n == 0, retourne null.\n"
"     */\n"
"    public static String repeat(String s, int n){\n"
"        // À implémenter\n"
"    }"
msgstr ""

#. name
#: m08dem2/task.yaml
msgid "Mission 8 : Question de démarrage 2 : StringBuffer"
msgstr ""

#. name, q1, name
#: m08dem2/task.yaml
msgid "La méthode repeat"
msgstr ""

#. name, q1, header
#: m08dem2/task.yaml
msgid ""
"Implémentez ici le corps de la méthode ``repeat``. Veillez à bien respecter "
"les spécifications."
msgstr ""

#. context
#: m08real/task.yaml
msgid ""
"Vous pouvez soumettre ici ou via BlueJ votre phase de réalisation pour la "
"Mission 8.\n"
"\n"
"Vous attendons une archive **.zip** contenant uniquement les fichiers :\n"
"\n"
"- Square.java\n"
"- Rectangle.java\n"
"- DrawPanel.java\n"
"- Equilateral.java\n"
"- MyShape.java\n"
"- Segment.java\n"
"- Shape.java\n"
"- Triangle.java\n"
"- README.txt"
msgstr ""

#. name
#: m08real/task.yaml
msgid "Mission 8: Phase de réalisation: Soumission"
msgstr ""

#. name, q1, name
#: m08real/task.yaml
msgid "Phase de réalisation de la Mission 8"
msgstr ""

#. context
#: m09Q1/task.yaml
msgid ""
"Un étudiant a écrit la classe suivante, mais il lui manque une méthode pour "
"qu'elle puisse être compilée. Pourriez-vous implémenter cette méthode ?\n"
"\n"
".. code-block:: java\n"
"\n"
"  public class Fraction implements Comparable {\n"
"\n"
"        private int num; // numerateur\n"
"        private int den; // denominateur\n"
"\n"
"        /**\n"
"         * @pre num >= 0, den > 0\n"
"         * @post construit la fraction num/den\n"
"         */\n"
"        public Fraction(int num, int den) {\n"
"            this.num=num;\n"
"            this.den=den;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne le dénominateur de la fraction\n"
"         */\n"
"        public int getDen() {\n"
"            return this.den;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne le numérateur de la fraction\n"
"         */\n"
"        public int getNum() {\n"
"            return this.num;\n"
"        }\n"
"\n"
"        // Insérez le code manquant\n"
"  }"
msgstr ""

#. name
#: m09Q1/task.yaml
msgid "Mission 9 : Q* Fraction"
msgstr ""

#. name, q1, name
#: m09Q1/task.yaml m10Q1/task.yaml
msgid "Fraction"
msgstr ""

#. name, q1, header
#: m09Q1/task.yaml m09Q2/task.yaml m10Q1/task.yaml
msgid "Ecrivez la/les méthode(s) manquante(s)"
msgstr ""

#. context
#: m09Q2/task.yaml
msgid ""
"Un étudiant a écrit la classe suivante, mais il lui manque une méthode pour "
"qu'elle puisse être compilée. Pourriez-vous implémenter cette méthode ?\n"
"\n"
".. code-block:: java\n"
"\n"
"  public class Employe implements Comparable {\n"
"     private String nom;\n"
"     private String prenom;\n"
"     private double salaire;\n"
"\n"
"     /*\n"
"      * Constructeur\n"
"      * @pre nom != null, prenom != null, salaire > 0\n"
"      * @post a construit une instance de la classe Employe avec nom et "
"salaire\n"
"      */\n"
"     public Employe (String nom, String prenom, double salaire){\n"
"        this.nom = nom;\n"
"        this.prenom=prenom;\n"
"        this.salaire = salaire;\n"
"     }\n"
"\n"
"     /*\n"
"      * @pre -\n"
"      * @post retourne le nom de l'employé this\n"
"      */\n"
"     public String getNom(){\n"
"         return nom ;\n"
"     }\n"
"\n"
"     /*\n"
"      * @pre -\n"
"      * @post retourne le prénom de l'employé this\n"
"      */\n"
"     public String getPrenom() {\n"
"         return prenom;\n"
"     }\n"
"\n"
"     /*\n"
"      * @pre -\n"
"      * @post retourne le salaire de l'employé this\n"
"      */\n"
"     public double getSalaire() {\n"
"         return salaire;\n"
"     }\n"
"\n"
"     /*\n"
"      * @pre -\n"
"      * @post retourne un String décrivant l'employé this\n"
"      */\n"
"     public String toString() {\n"
"         return getPrenom()+\" \"+getNom()+\" (\"+getSalaire()+\")\";\n"
"     }\n"
"\n"
"     /*\n"
"      * @pre -\n"
"      * @post retourne true si this et other correspondent au\n"
"      *       même employé (même nom, même prénom, même salaire)\n"
"      */\n"
"     public boolean equals(Object other) {\n"
"         if (other instanceof Employe) {\n"
"              Employe e = (Employe) other;\n"
"              return (this.getNom().equals(e.getNom())\n"
"                      && (this.getPrenom().equals(e.getPrenom()))\n"
"                      && (this.getSalaire()==e.getSalaire()));\n"
"          } else {\n"
"              return false;\n"
"          }\n"
"     }\n"
"\n"
"     /*\n"
"      * @pre -\n"
"      * @post retourne un entier négatif si l'employé this\n"
"      *        est inférieur dans l'ordre alphabétique à other.\n"
"      *      0 si this et other correspondent au même employé\n"
"      *        (même nom, même prénom, même salaire)\n"
"      *      Un entier positif si l'employé this est supérieur\n"
"      *        dans l'ordre alphabétique à other.\n"
"      *      Pour tester l'ordre alphabétique, on regarde d'abord\n"
"      *        le nom, ensuite le prénom et enfin le salaire\n"
"      *        (le salaire inférieur étant considéré comme avant\n"
"      *            un salaire supérieur)\n"
"      */\n"
"     //Insérez ici le code manquant\n"
"  }\n"
"\n"
"Pour rappel, la documentation de l'interface Comparable est disponible via "
"https://docs.oracle.com/javase/7/docs/api/java/lang/Comparable.html"
msgstr ""

#. name
#: m09Q2/task.yaml
msgid "Mission 9 : Q* Employe"
msgstr ""

#. name, q1, name
#: m09Q2/task.yaml
msgid "Employe"
msgstr ""

#. context
#: m09Q3/task.yaml
msgid ""
"La classe ``Fichiers`` est une classe permettant de réaliser quelques tâches "
"sur un fichier. On vous demande ici d'écrire la méthodes ``countLines`` dont "
"les spécifications et la signature sont :\n"
"\n"
".. code-block:: java\n"
"\n"
"  /*\n"
"   * @pre -\n"
"   * @post ouvre le fichier filename et retourne le nombre\n"
"   *       de lignes présentes dans ce fichier.\n"
"   *       Retourne -1 en cas d'erreur de lecture ou d'accès au fichier\n"
"   */\n"
"    public int countLines(String fileName);\n"
"\n"
"Pour lire le fichier, nous vous demandons d'utilisez un ``BufferedReader``."
msgstr ""

#. name
#: m09Q3/task.yaml
msgid "Mission 9 : Q* Fichiers"
msgstr ""

#. name, q1, name
#: m09Q3/task.yaml
msgid "CountLines"
msgstr ""

#. name, q1, header
#: m09Q3/task.yaml
msgid "Ecrivez le corps de la méthode ``countLines``"
msgstr ""

#. context
#: m09Q4/task.yaml
msgid ""
"La classe ``Fichiers`` est une classe permettant de réaliser quelques tâches "
"sur un fichier. On vous demande ici d'écrire la méthodes ``contains`` dont "
"les spécifications et la signature sont :\n"
"\n"
".. code-block:: java\n"
"\n"
"  /*\n"
"   * @pre fileName != null\n"
"   * @post retourne true si le fichier de nom fileName contient\n"
"   *       au moins une occurence de la chaîne s,\n"
"   *       false sinon et en cas d'erreur également\n"
"   */\n"
"   public boolean contains(String s, String fileName)\n"
"\n"
"On vous demande d'utiliser un ``BufferedReader`` pour lire le fichier"
msgstr ""

#. name
#: m09Q4/task.yaml
msgid "Mission 9 : Q* Fichiers : Contains"
msgstr ""

#. name, q1, header
#: m09Q4/task.yaml
msgid "Ecrivez le corps de la méthode ``contains``"
msgstr ""

#. context
#: m09Q5/task.yaml
msgid ""
"La classe ``Fichiers`` est une classe permettant de réaliser quelques tâches "
"sur un fichier. On vous demande ici d'écrire la méthodes ``accessible`` dont "
"les spécifications et la signature sont :\n"
"\n"
".. code-block:: java\n"
"\n"
"  /*\n"
"   * @pre -\n"
"   * @post retourne true si le fichier de nom fileName est accessible (c'est-"
"à-dire qu'il peut être ouvert)\n"
"   *       false sinon\n"
"   */\n"
"   public static boolean accessible(String fileName)\n"
"\n"
"On vous demande d'utiliser un ``BufferedReader`` si vous devez lire le "
"fichier.\n"
msgstr ""

#. name
#: m09Q5/task.yaml
msgid "Mission 9: Q* Fichiers:Accessible"
msgstr ""

#. name, q1, name
#: m09Q5/task.yaml
msgid "Accessible"
msgstr ""

#. name, q1, header
#: m09Q5/task.yaml
msgid ""
"Ecrivez la méthode Accessible, signature et corps de la méthode compris:"
msgstr ""

#. context
#: m09Q6/task.yaml
msgid ""
"La classe ``Fichiers`` est une classe permettant de réaliser quelques tâches "
"sur un fichier. On vous demande ici d'écrire la méthodes ``saveVector`` dont "
"les spécifications et la signature sont :\n"
"\n"
".. code-block:: java\n"
"\n"
"  /*\n"
"   * @pre v!=null, fileName!=null\n"
"   * @post sauve dans le fichier dont le nom est fileName le contenu du "
"vecteur v\n"
"   *       le format du fichier est :\n"
"   *     première ligne : nombre d'éléments du vecteur\n"
"   *     lignes suivantes : un élément par ligne en commençant par v[0] ...\n"
"   */\n"
"   public void saveVector(int [] v, String fileName)\n"
msgstr ""

#. name
#: m09Q6/task.yaml
msgid "Mission 9: Q* Fichiers:saveVector"
msgstr ""

#. name, q1, name
#: m09Q6/task.yaml
msgid "saveVector"
msgstr ""

#. name, q1, header
#: m09Q6/task.yaml
msgid ""
"Ecrivez la méthode saveVector, signature et corps de la méthode compris:"
msgstr ""

#. context
#: m09Q7/task.yaml
msgid ""
"La classe ``Fichiers`` est une classe permettant de réaliser quelques tâches "
"sur un fichier. On vous demande ici d'écrire la méthodes ``readVector`` dont "
"les spécifications et la signature sont :\n"
"\n"
".. code-block:: java\n"
"\n"
"  /*\n"
"   * @pre fileName!=null\n"
"   * @post lit dans le fichier dont le nom est fileName le contenu du "
"vecteur v\n"
"   *       le format du fichier est :\n"
"   *     première ligne : nombre d'éléments du vecteur\n"
"   *     lignes suivantes : un élément par ligne en commençant par v[0] ...\n"
"   *\n"
"   *     En cas d'erreur (exception, fichier non lisible, nombre incorrect "
"d'éléments\n"
"   *     dans le fichier, format de nombre incorrect, ...), retourne null\n"
"   */\n"
"   public  int[] readVector(String fileName)\n"
"\n"
"Pour lire le fichier, nous vous demandons d'utiliser un ``BufferedReader``.\n"
msgstr ""

#. name
#: m09Q7/task.yaml
msgid "Mission 9: Q* Fichiers:readVector"
msgstr ""

#. name, q1, name
#: m09Q7/task.yaml
msgid "readVector"
msgstr ""

#. name, q1, header
#: m09Q7/task.yaml
msgid "Ecrivez le corps de la méthode ``readVector``:"
msgstr ""

#. author
#: m09_bf/task.yaml
msgid "Sébastien Combéfis, Naitali Brandon"
msgstr ""

#. context
#: m09_bf/task.yaml
msgid ""
"Vous devez implémenter une méthode ``getMax`` dont le but est de retrouver, "
"dans un fichier, la ligne contenant le nombre flottant avec la plus grande "
"valeur. Si un tel nombre n'existe pas, la méthode doit renvoyer -∞. En cas "
"d'erreur lors de la lecture du fichier, le programme doit se quitter et "
"afficher exactement ``ERREUR`` sur ``System.err``.\n"
"\n"
"Voici la spécification préçise de la méthode :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /**\n"
"     * @pre filename != null, filename est le nom d’un fichier de texte.\n"
"     *      Chaque ligne valide du fichier représente un seul nombre réel.\n"
"     * @post - La valeur renvoyée contient le nombre flottant avec la plus "
"grande valeur\n"
"     *         parmi tous les nombres flottants valides du fichier.\n"
"     *         S'il n'y a aucun nombre valide, la valeur renvoyée contient -"
"∞.\n"
"     *       - Si le fichier n’existe pas ou si une erreur d'entrée/sortie "
"survient,\n"
"     *         le programme se termine en affichant ERREUR System.err.\n"
"     *\n"
"     *       Par exemple, la méthode renvoie 10.0 pour le contenu de fichier "
"suivant :\n"
"     *          0.345.67\n"
"     *          hello\n"
"     *          -543.0\n"
"     *          500.0 1000.0 2000.0\n"
"     *          10.0\n"
"     *          3.1416\n"
"     */\n"
"    public static double getMax (String filename)\n"
msgstr ""

#. name
#: m09_bf/task.yaml
msgid "Mission 9 : Question de Bilan Final"
msgstr ""

#. name, q1, header
#: m09_bf/task.yaml
msgid ""
"Complétez ici le corps de la méthode ``getMax`` dont la spécification est "
"donnée dans l'énoncé.\n"
"\n"
msgstr ""

#. context
#: m09_qcm/task.yaml
msgid ""
"===================\n"
"Mission 9. Fichiers\n"
"===================\n"
"\n"
"\n"
"Ces questions supposent que vous avez lu les sections suivantes du livre de "
"référence |jn|_\n"
"\n"
"    - |jn3.7|_\n"
"        - |jn3.7.1|_\n"
"        - |jn3.7.2|_\n"
"    - |jn8.1|_\n"
"        - |jn8.1.1|_\n"
"        - |jn8.1.2|_\n"
"        - |jn8.1.3|_\n"
"    - |jn8.3|_\n"
"        - |jn8.3.1|_\n"
"        - |jn8.3.2|_\n"
"    - |jn11.1|_\n"
"        - |jn11.1.1|_\n"
"        - |jn11.1.2|_\n"
"        - |jn11.1.3|_\n"
"        - |jn11.1.4|_\n"
"        - |jn11.1.5|_\n"
"    - |jn11.2|_\n"
"        - |jn11.2.1|_\n"
"\n"
"ainsi que l'API de la classe |Arrays|_.\n"
"\n"
".. _jn: http://math.hws.edu/javanotes/\n"
".. |jn| replace:: JavaNotes\n"
"\n"
".. _jn3.7 : http://math.hws.edu/javanotes/c3/s7.html\n"
".. |jn3.7| replace:: `3.7 : Introduction to Exceptions and try..catch`\n"
"\n"
".. _jn3.7.1 : http://math.hws.edu/javanotes/c3/s7.html#control.7.1\n"
".. |jn3.7.1| replace:: `3.7.1 : Exceptions`\n"
"\n"
".. _jn3.7.2 : http://math.hws.edu/javanotes/c3/s7.html#control.7.2\n"
".. |jn3.7.2| replace:: `3.7.2 : try..catch`\n"
"\n"
".. _jn8.1 : http://math.hws.edu/javanotes/c8/s1.html\n"
".. |jn8.1| replace:: `8.1 : Introduction to Correctness and Robustness`\n"
"\n"
".. _jn8.1.1 : http://math.hws.edu/javanotes/c8/s1.html#robustness.1.1\n"
".. |jn8.1.1| replace:: `8.1.1 : Horror Stories`\n"
"\n"
".. _jn8.1.2 : http://math.hws.edu/javanotes/c8/s1.html#robustness.1.2\n"
".. |jn8.1.2| replace:: `8.1.2 : Java to the Rescue`\n"
"\n"
".. _jn8.1.3 : http://math.hws.edu/javanotes/c8/s1.html#robustness.1.3\n"
".. |jn8.1.3| replace:: `8.1.3 : Problems Remain in Java`\n"
"\n"
".. _jn8.3 : http://math.hws.edu/javanotes/c8/s3.html\n"
".. |jn8.3| replace:: `8.3 : Exceptions and try..catch`\n"
"\n"
".. _jn8.3.1 : http://math.hws.edu/javanotes/c8/s3.html#robustness.3.1\n"
".. |jn8.3.1| replace:: `8.3.1 : Exceptions and Exception Classes`\n"
"\n"
".. _jn8.3.2 : http://math.hws.edu/javanotes/c8/s3.html#robustness.3.2\n"
".. |jn8.3.2| replace:: `8.3.2 : The try Statement`\n"
"\n"
".. _jn11.1 : http://math.hws.edu/javanotes/c11/s1.html\n"
".. |jn11.1| replace:: `11.1 : Streams, Readers, and Writers`\n"
"\n"
".. _jn11.1.1 : http://math.hws.edu/javanotes/c11/s1.html#IO.1.1\n"
".. |jn11.1.1| replace:: `11.1.1 : Character and Byte Streams`\n"
"\n"
".. _jn11.1.2 : http://math.hws.edu/javanotes/c11/s1.html#IO.1.2\n"
".. |jn11.1.2| replace:: `11.1.2 : PrintWriter`\n"
"\n"
".. _jn11.1.3 : http://math.hws.edu/javanotes/c11/s1.html#IO.1.3\n"
".. |jn11.1.3| replace:: `11.1.3 : Data Streams`\n"
"\n"
".. _jn11.1.4 : http://math.hws.edu/javanotes/c11/s1.html#IO.1.4\n"
".. |jn11.1.4| replace:: `11.1.4 : Reading Text`\n"
"\n"
".. _jn11.1.5 : http://math.hws.edu/javanotes/c11/s1.html#IO.1.5\n"
".. |jn11.1.5| replace:: `11.1.5 : The Scanner Class`\n"
"\n"
".. _jn11.2 : http://math.hws.edu/javanotes/c11/s2.html\n"
".. |jn11.2| replace:: `11.2 : Files`\n"
"\n"
".. _jn11.2.1 : http://math.hws.edu/javanotes/c11/s2.html#IO.2.1\n"
".. |jn11.2.1| replace:: `11.2.1 : Reading and Writing Files`\n"
"\n"
".. _Arrays : http://docs.oracle.com/javase/1.5.0/docs/api/java/util/Arrays."
"html\n"
".. |Arrays| replace:: ``java.util.Arrays``\n"
msgstr ""

#. name
#: m09_qcm/task.yaml
msgid "Mission 9: QCM"
msgstr ""

#. name, q1, name
#: m09_qcm/task.yaml
msgid "Erreurs arithmétiques"
msgstr ""

#. name, q1, header
#: m09_qcm/task.yaml
msgid ""
"\n"
"Parmi les affirmations suivantes, laquelle est correcte ?\n"
msgstr ""

#. name, q1, text
#: m09_qcm/task.yaml
msgid "``10 / 0`` produit une ``ArithmeticException``.\n"
msgstr ""

#. name, q1, text
#: m09_qcm/task.yaml
msgid "``Integer.MAX_VALUE + 1`` retourne un entier négatif.\n"
msgstr ""

#. name, q1, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"Le plus petit entier, accessible via ``Integer.MIN_VALUE``.\n"
msgstr ""

#. name, q1, text
#: m09_qcm/task.yaml
msgid "``10.0 / 0.0`` retourne un nombre infini.\n"
msgstr ""

#. name, q1, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"C'est une valeur spéciale, accessible via ``Double.POSITIVE_INFINITY``.\n"
msgstr ""

#. name, q1, text
#: m09_qcm/task.yaml
msgid "``0.0 / 0.0`` retourne un nombre indéfini.\n"
msgstr ""

#. name, q1, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"C'est une valeur spéciale, accessible via ``Double.NaN`` (*Not a Number*).\n"
msgstr ""

#. name, q1, text
#: m09_qcm/task.yaml
msgid "``1.0E100 + 1000.0`` retourne ``1.0E100``.\n"
msgstr ""

#. name, q1, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"A cause de la précision arithmétique, ajouter ``1000`` ne change rien à "
"``1.0E100`` (= $10^{100}$).\n"
msgstr ""

#. name, q1, text
#: m09_qcm/task.yaml
msgid "``10 / 0`` provoque toujours l'arrêt du programme.\n"
msgstr ""

#. name, q1, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"Ceci cause une ``ArithmeticException`` que l'on peut intercepter et "
"traiter.\n"
msgstr ""

#. name, q1, text
#: m09_qcm/task.yaml
msgid "``Integer.MAX_VALUE + 1`` produit une ``ArithmeticException``.\n"
msgstr ""

#. name, q1, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"Les entiers \"rebouclent\" vers les négatifs quand ils dépassent la valeur "
"maximale.\n"
msgstr ""

#. name, q1, text
#: m09_qcm/task.yaml
msgid "``10.0 / 0.0`` produit une ``ArithmeticException``.\n"
msgstr ""

#. name, q1, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"Les réels utilisent une valeur spéciale ``Double.POSITIVE_INFINITY`` pour "
"représenter l'infini.\n"
msgstr ""

#. name, q1, text
#: m09_qcm/task.yaml
msgid "``0.0 / 0.0`` produit une ``ArithmeticException``.\n"
msgstr ""

#. name, q1, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"Les réels utilisent une valeur spéciale ``Double.NaN`` (*Not a Number*) pour "
"représenter un nombre indéfini.\n"
msgstr ""

#. name, q1, text
#: m09_qcm/task.yaml
msgid ""
"``1.0E100 + 1000.0`` retourne un nombre strictement supérieur à "
"``1.0E100``.\n"
msgstr ""

#. name, q1, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"A cause de la précision arithmétique, ajouter ``1000`` ne change rien à "
"``1.0E100`` (= :math:`10^{100}`).\n"
msgstr ""

#. name, q2, name
#. name, q3, name
#: m09_qcm/task.yaml
msgid "Traitement des exceptions"
msgstr ""

#. name, q2, header
#: m09_qcm/task.yaml
msgid ""
"\n"
"Quelle définition de la méthode ``toInt`` ci-dessous retourne ``0`` lorsque "
"l'on passe ``\"ABC\"`` comme paramètre ?\n"
msgstr ""

#. name, q2, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public static int toInt(String s) {\n"
"       try {\n"
"           return Integer.parseInt(s);\n"
"       } catch (NumberFormatException e) {\n"
"           return 0;\n"
"       }\n"
"   }\n"
"\n"
msgstr ""

#. name, q2, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public static int toInt(String s) {\n"
"       int n = 0;\n"
"       try {\n"
"           n = Integer.parseInt(s);\n"
"       } catch (NumberFormatException e) {\n"
"       }\n"
"       return n;\n"
"   }\n"
"\n"
msgstr ""

#. name, q2, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"Après l'interception de l'exception, l'exécution se poursuit après le try-"
"catch.\n"
"\n"
msgstr ""

#. name, q2, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public static int toInt(String s) {\n"
"       int n = Integer.parseInt(s);\n"
"       if (n == NumberFormatException) {\n"
"           return 0;\n"
"       } else {\n"
"           return n;\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q2, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"Ceci ne traite pas l'exception.  Utiliser un try-catch.\n"
msgstr ""

#. name, q2, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public static int toInt(String s) {\n"
"       try {\n"
"           return Integer.parseInt(s);\n"
"       } catch (NumberFormatException e) {\n"
"           System.out.println(\"Erreur de format\");\n"
"       }\n"
"   }\n"
"\n"
msgstr ""

#. name, q2, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"Le traitement de l'exception ne correspond pas à ce qui est demandé.\n"
msgstr ""

#. name, q2, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public static int toInt(String s) {\n"
"       try {\n"
"           return Integer.parseInt(s);\n"
"       } catch NumberFormatException {\n"
"           return 0;\n"
"       }\n"
"   }\n"
"\n"
msgstr ""

#. name, q2, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"Erreur de syntaxe dans la partie ``catch``.\n"
msgstr ""

#. name, q2, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public static int toInt(String s) {\n"
"       return Integer.parseInt(s);\n"
"       catch (NumberFormatException e) {\n"
"           return 0;\n"
"       }\n"
"   }\n"
"\n"
msgstr ""

#. name, q2, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"Il manque le bloc ``try``.\n"
msgstr ""

#. name, q2, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public static int toInt(String s) {\n"
"       try {\n"
"           return Integer.parseInt(s);\n"
"       } catch {\n"
"           return 0;\n"
"       }\n"
"   }\n"
"\n"
msgstr ""

#. name, q3, header
#: m09_qcm/task.yaml
msgid ""
"\n"
"Soit la méthode ``m`` suivante\n"
"\n"
".. code-block:: java\n"
"\n"
"    public static int m(int x, int y) {\n"
"        try {\n"
"            int z = x / y;\n"
"            return z;\n"
"        } catch (ArithmeticException e) {\n"
"            if (x > 0) {\n"
"                return x;\n"
"            }\n"
"        }\n"
"        return y;\n"
"    }\n"
"\n"
"Parmi les ensembles d'affirmations suivantes, lequel est correct ?\n"
msgstr ""

#. name, q3, text
#: m09_qcm/task.yaml
msgid ""
"\n"
"\n"
"- ``m(10, 5)`` retourne ``2``\n"
"- ``m(10, 0)`` retourne ``10``\n"
"- ``m(-10, 0)`` retourne ``0``\n"
msgstr ""

#. name, q3, text
#: m09_qcm/task.yaml
msgid ""
"\n"
"\n"
"- ``m(8, 3)`` retourne ``2``\n"
"- ``m(8, 0)`` retourne ``8``\n"
"- ``m(0, 0)`` retourne ``0``\n"
msgstr ""

#. name, q3, text
#: m09_qcm/task.yaml
msgid ""
"\n"
"\n"
"- ``m(10, 5)`` retourne ``10``\n"
"- ``m(8, 0)`` retourne ``8``\n"
"- ``m(-10, 0)`` retourne ``0``\n"
msgstr ""

#. name, q3, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"Pas d'exception à la première ligne.\n"
msgstr ""

#. name, q3, text
#: m09_qcm/task.yaml
msgid ""
"\n"
"\n"
"- ``m(8, 3)`` retourne ``3``\n"
"- ``m(10, 0)`` retourne ``10``\n"
"- ``m(0, 0)`` retourne ``0``\n"
msgstr ""

#. name, q3, text
#: m09_qcm/task.yaml
msgid ""
"\n"
"\n"
"- ``m(10, 5)`` retourne ``2``\n"
"- ``m(10, 0)`` retourne ``0``\n"
"- ``m(0, 0)`` retourne ``0``\n"
msgstr ""

#. name, q3, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"Retourne ``x`` à la deuxième ligne.\n"
msgstr ""

#. name, q3, text
#: m09_qcm/task.yaml
msgid ""
"\n"
"\n"
"- ``m(8, 3)`` retourne ``2``\n"
"- ``m(8, 0)`` retourne ``0``\n"
"- ``m(-10, 0)`` retourne ``0``\n"
msgstr ""

#. name, q3, text
#: m09_qcm/task.yaml
msgid ""
"\n"
"\n"
"- ``m(8, 3)`` retourne ``2``\n"
"- ``m(10, 0)`` retourne ``10``\n"
"- ``m(-10, 0)`` retourne ``-10``\n"
msgstr ""

#. name, q3, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"Retourne ``y`` à la troisième ligne.\n"
msgstr ""

#. name, q3, text
#: m09_qcm/task.yaml
msgid ""
"\n"
"\n"
"- ``m(10, 5)`` retourne ``2``\n"
"- ``m(10, 0)`` retourne ``10``\n"
"- ``m(0, 0)`` retourne ``1``\n"
msgstr ""

#. name, q4, name
#: m09_qcm/task.yaml
msgid "Classes d'entrée-sortie"
msgstr ""

#. name, q4, header
#: m09_qcm/task.yaml
msgid ""
"\n"
"Quelles classes sont les plus appropriées pour lire du texte à partir de "
"``input.txt`` et écrire du texte vers ``output.txt`` ?\n"
msgstr ""

#. name, q4, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.io.*;\n"
"   ...\n"
"   BufferedReader inbuf = new BufferedReader(new FileReader(\"input.txt"
"\"));\n"
"   PrintWriter outbuf = new PrintWriter(new FileWriter(\"output.txt\"));\n"
msgstr ""

#. name, q4, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.io.*;\n"
"   ...\n"
"   BufferedReader inbuf = new BufferedReader(\"input.txt\");\n"
"   PrintWriter outbuf = new PrintWriter(\"output.txt\");\n"
msgstr ""

#. name, q4, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"Il n'y a pas de constructeur ``BufferedReader(String filename)``.\n"
msgstr ""

#. name, q4, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.io.*;\n"
"   ...\n"
"   BufferedReader inbuf = new BufferedReader(new FileReader(\"input.txt"
"\"));\n"
"   BufferedWriter outbuf = new BufferedWriter(new FileWriter(\"output.txt"
"\"));\n"
msgstr ""

#. name, q4, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"``BufferedWriter`` a des possibilités très limitées, ``PrintWriter`` est "
"plus judicieux.\n"
msgstr ""

#. name, q4, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.io.*;\n"
"   ...\n"
"   PrintReader inbuf = new PrintReader(new FileReader(\"input.txt\"));\n"
"   PrintWriter outbuf = new PrintWriter(new FileWriter(\"output.txt\"));\n"
msgstr ""

#. name, q4, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"``PrintReader``` n'existe pas, utilisez ``BufferedReader``.\n"
msgstr ""

#. name, q4, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.io.*;\n"
"   ...\n"
"   InputStream inbuf = new InputStream(\"input.txt\");\n"
"   OutputStream outbuf = new OutputStream(\"output.txt\");\n"
msgstr ""

#. name, q4, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"``InputStream`` et ``OutputStream`` sont appropriés pour des données "
"binaires plutôt que pour du texte.\n"
msgstr ""

#. name, q4, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.io.*;\n"
"   ...\n"
"   Reader inbuf = new Reader(\"input.txt\");\n"
"   Writer outbuf = new Writer(\"output.txt\");\n"
msgstr ""

#. name, q4, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"``Reader`` et ``Writer`` sont des classes abstraites, utilisez leurs "
"extensions.\n"
msgstr ""

#. name, q5, name
#: m09_qcm/task.yaml
msgid "Lecture de fichier"
msgstr ""

#. name, q5, header
#: m09_qcm/task.yaml
msgid ""
"\n"
"Parmi les définitions de la méthode ``display`` suivantes, lequel affiche "
"correctement le contenu d'un fichier sur ``System.out`` ?\n"
msgstr ""

#. name, q5, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.io.*;\n"
"   ...\n"
"   public void display(String filename) {\n"
"       try {\n"
"           BufferedReader buf =\n"
"               new BufferedReader(new FileReader(filename));\n"
"           String line = buf.readLine();\n"
"           while (line != null) {\n"
"               System.out.println(line);\n"
"               line = buf.readLine();\n"
"           }\n"
"           buf.close();\n"
"       } catch (IOException e) {\n"
"           System.err.println(\"Erreur: \" + e);\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q5, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.io.*;\n"
"   ...\n"
"   public void display(String filename) {\n"
"       try {\n"
"           BufferedReader buf =\n"
"               new BufferedReader(new FileReader(filename));\n"
"           String line = readLine(buf);\n"
"           while (line != null) {\n"
"               System.out.println(line);\n"
"               line = readLine(buf);\n"
"           }\n"
"           close(buf);\n"
"       } catch (IOException e) {\n"
"           System.err.println(\"Erreur: \" + e);\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q5, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"``readLine`` et ``close`` sont des méthodes de ``buf``.\n"
msgstr ""

#. name, q5, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.io.*;\n"
"   ...\n"
"   public void display(String filename) {\n"
"       try {\n"
"           BufferedReader buf =\n"
"               new BufferedReader(new FileReader(filename));\n"
"           String line = buf.readLine();\n"
"           while (line != null) {\n"
"               System.out.println(line);\n"
"               line = buf.readLine();\n"
"           }\n"
"       } catch (IOException e) {\n"
"           System.err.println(\"Erreur: \" + e);\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q5, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"Il faut fermer le flux à la fin.\n"
msgstr ""

#. name, q5, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.io.*;\n"
"   ...\n"
"   public void display(String filename) {\n"
"       try {\n"
"           BufferedReader buf =\n"
"               new BufferedReader(new FileReader(filename));\n"
"           String line = buf.readLine();\n"
"           while (line != \"\") {\n"
"               System.out.println(line);\n"
"               line = buf.readLine();\n"
"           }\n"
"           buf.close();\n"
"       } catch (IOException e) {\n"
"           System.err.println(\"Erreur: \" + e);\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q5, feedback
#. name, q8, feedback
#: m09_qcm/task.yaml m10_qcm/task.yaml
msgid ""
"\n"
"Le test de boucle est incorrect.\n"
msgstr ""

#. name, q5, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.io.*;\n"
"   ...\n"
"   public void display(String filename) {\n"
"       try {\n"
"           BufferedReader buf =\n"
"               new BufferedReader(new FileReader(filename));\n"
"           String line = buf.readLine();\n"
"           while (line != null) {\n"
"               System.out.println(line);\n"
"           }\n"
"           buf.close();\n"
"       } catch (IOException e) {\n"
"           System.err.println(\"Erreur: \" + e);\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q5, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"Seule la première ligne du fichier est lue.\n"
msgstr ""

#. name, q5, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.io.*;\n"
"   ...\n"
"   public void display(String filename) {\n"
"       BufferedReader buf =\n"
"           new BufferedReader(new FileReader(filename));\n"
"       String line = buf.readLine();\n"
"       while (line != null) {\n"
"           System.out.println(line);\n"
"           line = buf.readLine();\n"
"       }\n"
"       buf.close();\n"
"   }\n"
msgstr ""

#. name, q5, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"Il manque la gestion des exceptions.\n"
msgstr ""

#. name, q5, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.io.*;\n"
"   ...\n"
"   public void display(String filename) {\n"
"       try {\n"
"           BufferedReader buf =\n"
"               new BufferedReader(new FileReader(filename));\n"
"           String line;\n"
"           while (line != null) {\n"
"               line = buf.readLine();\n"
"               System.out.println(line);\n"
"           }\n"
"           buf.close();\n"
"       } catch (IOException e) {\n"
"           System.err.println(\"Erreur: \" + e);\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q5, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"La gestion de la variable ``line`` est incorrecte, la boucle ne sera jamais "
"exécutée.\n"
msgstr ""

#. name, q6, name
#: m09_qcm/task.yaml
msgid "La classe Scanner"
msgstr ""

#. name, q6, header
#: m09_qcm/task.yaml
msgid ""
"\n"
"Considérons un fichier ``numbers.txt`` qui contient des nombres entiers "
"séparés par des espaces, par exemple\n"
"\n"
".. code-block:: java\n"
"\n"
"    1 2 3 4\n"
"    1 10 100\n"
"    1348\n"
"\n"
"Quel fragment de programme utilise correctement un ``Scanner`` (voir |"
"Scanner|_) pour imprimer la somme de ces nombres ?\n"
"\n"
"\n"
".. _Scanner : http://docs.oracle.com/javase/1.5.0/docs/api/java/util/Scanner."
"html\n"
".. |Scanner| replace:: ``java.util.Scanner``\n"
msgstr ""

#. name, q6, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.util.Scanner;\n"
"   ...\n"
"   try {\n"
"       Scanner scan =\n"
"           new Scanner(new java.io.FileReader(\"numbers.txt\"));\n"
"       int sum = 0;\n"
"       while (scan.hasNextInt()) {\n"
"           sum = sum + scan.nextInt();\n"
"       }\n"
"       scan.close();\n"
"       System.out.println(sum);\n"
"   } catch (IOException e) {\n"
"       System.err.println(\"Erreur: \" + e);\n"
"   }\n"
msgstr ""

#. name, q6, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.io.Scanner;\n"
"   ...\n"
"   try {\n"
"       Scanner scan =\n"
"           new Scanner(new java.io.FileReader(\"numbers.txt\"));\n"
"       int sum = 0;\n"
"       while (scan.hasNextInt()) {\n"
"           sum = sum + scan.nextInt();\n"
"       }\n"
"       scan.close();\n"
"       System.out.println(sum);\n"
"   } catch (IOException e) {\n"
"       System.err.println(\"Erreur: \" + e);\n"
"   }\n"
msgstr ""

#. name, q6, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"``Scanner`` est dans le package ``java.util``.\n"
msgstr ""

#. name, q6, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.util.Scanner;\n"
"   ...\n"
"   try {\n"
"       Scanner scan =\n"
"           new Scanner(\"numbers.txt\");\n"
"       int sum = 0;\n"
"       while (scan.hasNextInt()) {\n"
"           sum = sum + scan.nextInt();\n"
"       }\n"
"       scan.close();\n"
"       System.out.println(sum);\n"
"   } catch (IOException e) {\n"
"       System.err.println(\"Erreur: \" + e);\n"
"   }\n"
msgstr ""

#. name, q6, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"Il n'y a pas de constructeur ``Scanner(String filename)``.  Utiliser un "
"``FileReader``.\n"
msgstr ""

#. name, q6, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.util.Scanner;\n"
"   ...\n"
"   try {\n"
"       Scanner scan =\n"
"           new Scanner(new java.io.FileReader(\"numbers.txt\"));\n"
"       int sum = 0;\n"
"       while (!scan.eof()) {\n"
"           sum = sum + scan.nextInt();\n"
"       }\n"
"       scan.close();\n"
"       System.out.println(sum);\n"
"   } catch (IOException e) {\n"
"       System.err.println(\"Erreur: \" + e);\n"
"   }\n"
msgstr ""

#. name, q6, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"``Scanner`` n'a pas de méthode ``eof``.  Utiliser ``hasNextInt``.\n"
msgstr ""

#. name, q6, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.util.Scanner;\n"
"   ...\n"
"   try {\n"
"       Scanner scan =\n"
"           new Scanner(new java.io.FileReader(\"numbers.txt\"));\n"
"       int sum = 0;\n"
"       while (hasNextInt(scan)) {\n"
"           sum = sum + nextInt(scan);\n"
"       }\n"
"       scan.close();\n"
"       System.out.println(sum);\n"
"   } catch (IOException e) {\n"
"       System.err.println(\"Erreur: \" + e);\n"
"   }\n"
msgstr ""

#. name, q6, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"``hasNextInt`` et ``nextInt`` sont des méthodes de ``scan``.\n"
msgstr ""

#. name, q7, name
#: m09_qcm/task.yaml
msgid "Méthodes de comparaison"
msgstr ""

#. name, q7, header
#: m09_qcm/task.yaml
msgid ""
"\n"
"On désire trier et faire des recherches sur un tableau contenant des objets "
"qui représentent des étudiants (``Student[]``) à l'aide des méthodes de la "
"classe |Arrays|_.  Quelles interfaces et méthodes la classe ``Student`` doit-"
"elle implémenter ?\n"
"\n"
"\n"
".. _Arrays : http://docs.oracle.com/javase/1.5.0/docs/api/java/util/Arrays."
"html\n"
".. |Arrays| replace:: ``java.util.Arrays``\n"
msgstr ""

#. name, q7, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public class Student implements Comparable {\n"
"       ...\n"
"       public boolean equals(Object o) { ... }\n"
"       public int compareTo(Object o) { ... }\n"
"   }\n"
msgstr ""

#. name, q7, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public class Student {\n"
"       ...\n"
"       public boolean equals(Object o) { ... }\n"
"       public int compareTo(Object o) { ... }\n"
"   }\n"
msgstr ""

#. name, q7, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"Il faut déclarer qu'on implémente l'interface ``Comparable``.\n"
msgstr ""

#. name, q7, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public class Student implements Comparable {\n"
"       ...\n"
"       public boolean equals(Student stud) { ... }\n"
"       public int compareTo(Student stud) { ... }\n"
"   }\n"
msgstr ""

#. name, q7, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"Les méthodes ``equals`` et ``compareTo`` doivent prendre un ``Object`` en "
"paramètre.\n"
msgstr ""

#. name, q7, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public class Student implements Comparable {\n"
"       ...\n"
"       public boolean equals(Object o) { ... }\n"
"       public boolean greater(Object o) { ... }\n"
"       public boolean less(Object o) { ... }\n"
"   }\n"
msgstr ""

#. name, q7, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"Ce ne sont pas les bonnes méthodes pour ``Comparable``.\n"
msgstr ""

#. name, q7, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public class Student implements Equality, Comparable {\n"
"       ...\n"
"       public boolean equals(Object o) { ... }\n"
"       public int compareTo(Object o) { ... }\n"
"   }\n"
msgstr ""

#. name, q7, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"Il n'y a pas d'interface ``Equality``; ``equals`` est une méthode de "
"``Object``.\n"
msgstr ""

#. name, q8, name
#: m09_qcm/task.yaml
msgid "La classe Arrays"
msgstr ""

#. name, q8, header
#: m09_qcm/task.yaml
msgid ""
"\n"
"Etant donné un tableau non-trié d'étudiants ``Student[] groupe`` et un "
"étudiant ``Student stud``, comment vérifier si ``stud`` appartient à "
"``groupe`` en utilisant les méthodes de la classe |Arrays|_, en supposant "
"que ``Student`` implémente les interfaces et méthodes mentionnées à la "
"question 7 ?\n"
"\n"
"\n"
".. _Arrays : http://docs.oracle.com/javase/1.5.0/docs/api/java/util/Arrays."
"html\n"
".. |Arrays| replace:: ``java.util.Arrays``\n"
msgstr ""

#. name, q8, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.util.Arrays;\n"
"   ...\n"
"   public static void contains(Student[] groupe, Student stud) {\n"
"       Arrays.sort(groupe);\n"
"       int index = Arrays.binarySearch(groupe, stud);\n"
"       return stud.equals(groupe[index]);\n"
"   }\n"
msgstr ""

#. name, q8, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.util.Arrays;\n"
"   ...\n"
"   public static boolean contains(Student[] groupe, Student stud) {\n"
"       groupe.sort();\n"
"       int index = groupe.binarySearch(stud);\n"
"       return stud.equals(groupe[index]);\n"
"   }\n"
msgstr ""

#. name, q8, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"``sort`` et ``binarySearch`` sont des méthodes de classe de ``Arrays``.\n"
msgstr ""

#. name, q8, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.util.Arrays;\n"
"   ...\n"
"   public static boolean contains(Student[] groupe, Student stud) {\n"
"       Student[] sorted = Arrays.sort(groupe);\n"
"       int index = Arrays.binarySearch(sorted, stud);\n"
"       return stud.equals(groupe[index]);\n"
"   }\n"
msgstr ""

#. name, q8, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"``binarySearch`` ne retourne pas de résultat, elle modifie le tableau.\n"
msgstr ""

#. name, q8, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.util.Arrays;\n"
"   ...\n"
"   public static boolean contains(Student[] groupe, Student stud) {\n"
"       Arrays.sort(groupe);\n"
"       return Arrays.binarySearch(groupe, stud);\n"
"   }\n"
msgstr ""

#. name, q8, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"``binarySearch`` retourne un indice, pas un booléen.\n"
msgstr ""

#. name, q8, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.util.Arrays;\n"
"   ...\n"
"   public static boolean contains(Student[] groupe, Student stud) {\n"
"       int index = Arrays.binarySearch(groupe, stud);\n"
"       return stud.equals(groupe[index]);\n"
"   }\n"
msgstr ""

#. name, q8, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"``binarySearch`` ne fonctionne que sur un tableau trié.\n"
msgstr ""

#. name, q8, text
#: m09_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.util.Arrays;\n"
"   ...\n"
"   public static boolean contains(Student[] groupe, Student stud) {\n"
"       Arrays.sort(groupe);\n"
"       int index = Arrays.binarySearch(groupe, stud);\n"
"       return stud == groupe[index];\n"
"   }\n"
msgstr ""

#. name, q8, feedback
#: m09_qcm/task.yaml
msgid ""
"\n"
"La comparaison dans le ``return`` ne convient pas, on compare des "
"références.\n"
msgstr ""

#. context
#: m09dem1/task.yaml
msgid ""
"La classe ``Integer`` dispose d'une méthode ``compareTo()`` dont voici la "
"signature :\n"
"\n"
".. code-block:: java\n"
"\n"
"       /**\n"
"        * Compares two Integer objects numerically.\n"
"        * @pre anotherInteger!=null\n"
"        * @post returns the value 0 if this Integer is equal to\n"
"        *        the    argument Integer; a value less than 0 if this\n"
"        *        Integer is numerically less than the argument Integer;\n"
"        *        and a value greater than 0 if this Integer is\n"
"        *         numerically\n"
"        *        greater than the argument Integer (signed comparison).\n"
"        */\n"
"        public int compareTo(Integer anotherInteger)\n"
"\n"
"Comment feriez-vous pour implémenter une méthode similaire, mais de "
"signature :\n"
"\n"
".. code-block:: java\n"
"\n"
"    public int compareTo(Object o)\n"
"\n"
"?\n"
"\n"
"Écrivez le corps de cette nouvelle méthode qui prend un argument de type "
"``Object`` au lieu d'un argument de type ``Integer``. Écrivez la réponse en "
"une seule ligne. Notez que l'argument ``o`` sera toujours du type "
"``Integer``. Pensez à utiliser des méthodes qui sont déjà à votre "
"disposition."
msgstr ""

#. name
#: m09dem1/task.yaml
msgid "Mission 9: Question de démarrage 1: Integer.compareTo"
msgstr ""

#. name, q1, name
#: m09dem1/task.yaml
msgid "Le corps de compareTo(Object o)"
msgstr ""

#. name, q1, header
#: m09dem1/task.yaml
msgid ""
"Écrivez ici le corps de la méthode compareTo(Object o). Vous n'avez pas "
"besoin d'utiliser plus d'une ligne, pensez à utiliser les méthodes déjà à "
"votre disposition."
msgstr ""

#. context
#: m09dem2/task.yaml
msgid ""
"Un étudiant nommé Jean-Complexe vient vers vous et vous dit que lui et ses "
"amis détestent leur prénom car leur prénom est composé, or, ils trouvent "
"cela trop long à prononcer. Ils désireraient ne garder que la première "
"partie de leur prénom.\n"
"\n"
"Comme la fin d'année approche à grands pas cette histoire vous donne une "
"idée pour vous entraîner pour l'examen de java et vous décidez d'implémenter "
"une méthode qui prend un nom de fichier comme argument. Ce fichier contient "
"sur chaque ligne un prénom composé (les deux parties du prénom sont séparées "
"par le caractère ``'-'``).\n"
"\n"
"Le but de votre méthode est de lire chaque ligne du fichier et, pour chaque "
"ligne, afficher sur la sortie standard uniquement la première partie de ce "
"nom composé, avec un résultat par ligne. En regardant l'API Java sur les "
"``String`` (http://docs.oracle.com/javase/7/docs/api/java/lang/String.html), "
"vous vous êtes rendu compte que la méthode ``split`` vous sera d'une grande "
"aide.\n"
"\n"
"Bien entendu, vous savez que lire dans des fichier en Java peut provoquer "
"des exceptions et votre méthode s'arrangera pour les contenir et retourner "
"la valeur ``-1`` lorsque l'une d'entre elles apparaîtra.\n"
"\n"
"Prenons un exemple. Si le contenu du fichier est ci-dessous :\n"
"\n"
"::\n"
"\n"
"    Saint-François\n"
"    Jean-Pol\n"
"    Johnny-Hallyday\n"
"\n"
"\n"
"Votre programme affichera ces lignes sur la sortie standard (``System."
"out``):\n"
"\n"
"::\n"
"\n"
"    Saint\n"
"    Jean\n"
"    Johnny\n"
"\n"
"\n"
"Après avoir mûrement réfléchi, vous avez décidé de la signature de votre "
"méthode et il ne vous reste plus qu'à l'implémenter :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /**\n"
"     *     @pre     filename est le nom d'un fichier.\n"
"     *              si le fichier désigné par filename est lisible,\n"
"     *              chaque ligne du fichier contient un String en deux\n"
"     *              parties, séparées par un \"-\".\n"
"     *\n"
"     *     @post    imprime sur la sortie standard la première partie de\n"
"     *              chaque ligne du fichier désigné par filename, un\n"
"     *              résultat par ligne.\n"
"     *              Retourne -1 si une exception a été lancée.\n"
"     */\n"
"    public static int premierPrenom(String filename){\n"
"        // À implémenter\n"
"    }"
msgstr ""

#. name
#: m09dem2/task.yaml
msgid "Mission 9 : Question de démarrage 2 : la méthode premierPrenom()"
msgstr ""

#. name, q1, name
#: m09dem2/task.yaml
msgid "Le corps de la méthode premierPrenom"
msgstr ""

#. name, q1, header
#: m09dem2/task.yaml
msgid ""
"Écrivez ici le corps de la méthode premierPrenom(). Veillez bien à n'écrire "
"que le corps de la méthode, ne recopiez pas sa signature. Respectez bien les "
"spécifications."
msgstr ""

#. context
#: m09real/task.yaml
msgid ""
"Vous pouvez soumettre ici ou via BlueJ votre phase de réalisation pour la "
"Mission 9.\n"
"\n"
"Vous attendons une archive **.zip** contenant uniquement les fichiers :\n"
"\n"
"- Dico.java\n"
"- Dictionary.java\n"
"- Word.java\n"
"- README.txt"
msgstr ""

#. name
#: m09real/task.yaml
msgid "Mission 9: Phase de réalisation: Soumission"
msgstr ""

#. name, q1, name
#: m09real/task.yaml
msgid "Phase de réalisation de la Mission 9"
msgstr ""

#. context
#: m10Q1/task.yaml
msgid ""
"Un étudiant a écrit la classe suivante, mais il lui manque une méthode pour "
"qu'elle puisse être compilée. Pourriez-vous implémenter cette méthode ?\n"
"\n"
".. code-block:: java\n"
"\n"
"  public class Fraction implements Comparable<Fraction> {\n"
"        private int num; // numerateur\n"
"        private int den; // denominateur\n"
"\n"
"        /**\n"
"         * @pre num >= 0, den > 0\n"
"         * @post construit la fraction num/den\n"
"         */\n"
"        public Fraction(int num, int den) {\n"
"            this.num = num;\n"
"            this.den = den;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne le dénominateur de la fraction\n"
"         */\n"
"        public int getDen() {\n"
"            return this.den;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne le numérateur de la fraction\n"
"         */\n"
"        public int getNum() {\n"
"            return this.num;\n"
"        }\n"
"\n"
"        // Insérez le code manquant\n"
"  }\n"
"\n"
"Tel qu'il est écrit, ce code ne compile pas. Il manque une méthode. Pourriez-"
"vous l'ajouter (signature et corps) ?"
msgstr ""

#. name
#: m10Q1/task.yaml
msgid "Mission 10 : Q* Fraction"
msgstr ""

#. context
#: m10Q2/task.yaml
msgid ""
"Revenons à la classe Fraction. Pour faciliter la création de fractions sur "
"base de données lues depuis le clavier ou dans un fichier, on vous demande "
"d'ajouter à cette classe un constructeur qui prend comme argument un String. "
"Si ce String a comme format x/y avec x et y qui sont des entiers, il crée "
"l'instance de la classe Fraction ayant x comme numérateur et y comme "
"dénominateur. Pour les cas de String null / qui ne respectent pas le format "
"demandé/ qui génère une division par zéro, lancez une "
"NumberFormatException.\n"
"\n"
".. code-block:: java\n"
"\n"
"  public class Fraction implements Comparable<Fraction> {\n"
"    private int num; // numerateur\n"
"    private int den; // denominateur\n"
"\n"
"    /**\n"
"    * @pre den>0\n"
"    * @post construit la fraction num/den\n"
"    */\n"
"    public Fraction(int num, int den) {\n"
"        this.num=num;\n"
"        this.den=den;\n"
"    }\n"
"\n"
"    /*\n"
"    * @pre -\n"
"    * @post construit une fraction sur base d'une chaine caractère de la\n"
"    * forme num/den  où num est un entier et den un entier non nul\n"
"    * lance une exception lorsque la chaîne de caractères passée\n"
"    * en argument ne respecte pas ce format ou que le dénominateur est nul\n"
"    */\n"
"    public Fraction(String s) throws NumberFormatException {\n"
"        // à compléter\n"
"    }\n"
"\n"
"    /*\n"
"    * @pre -\n"
"    * @post retourne le dénominateur de la fraction\n"
"    */\n"
"    public int getDen() {\n"
"        return this.den;\n"
"    }\n"
"\n"
"    /*\n"
"    * @pre -\n"
"    * @post retourne le numérateur de la fraction\n"
"    */\n"
"    public int getNum() {\n"
"        return this.num;\n"
"    }\n"
"  }"
msgstr ""

#. name
#: m10Q2/task.yaml
msgid "Mission 10 : Q* Fraction - Constructeur"
msgstr ""

#. name, q1, name
#: m10Q2/task.yaml
msgid "Constructeur de Fraction"
msgstr ""

#. name, q1, header
#: m10Q2/task.yaml m10Q3/task.yaml
msgid "Ecrivez le corps du constructeur"
msgstr ""

#. context
#: m10Q3/task.yaml
msgid ""
"Dans la classe ``Student``, implémentez le second ``constructeur`` qui prend "
"comme argument un ``String``.\n"
"\n"
".. code-block:: java\n"
"\n"
"    /**\n"
"     * Une classe décrivant un étudiant\n"
"     *\n"
"     * @author O. Bonaventure\n"
"     * @version Novembre 2016\n"
"     */\n"
"    import java.util.Arrays;\n"
"    public class Student {\n"
"        public String nom;\n"
"        public double[] cotes;\n"
"\n"
"        /**\n"
"         * @pre nom != null, cotes != null\n"
"         * @post a construit une instance de la classe Student\n"
"         *       lance une exception StudentFormatException si une des\n"
"         *       cotes est invalide (non comprise entre 0 et 20)\n"
"         */\n"
"        public Student(String nom, double[] cotes) throws "
"StudentFormatException {\n"
"            //code non fourni\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post construit une instance de la classe Student\n"
"         *      en supposant que le String s a le format suivant\n"
"         *      nom; 2.5, 3.0, 6.7\n"
"         *      Le nom est suivi de ; et une virgule sépare les cotes.\n"
"         *       Celles-ci doivent être entre 0 et 20\n"
"         *       Il faut au moins une cote\n"
"         *       Si le format n'est pas respecté, le constructeur\n"
"         *       lance une StudentFormatException\n"
"         *       avec comme argument le String passé\n"
"         */\n"
"        public Student(String s) throws StudentFormatException {\n"
"            // Question\n"
"        }\n"
"    }"
msgstr ""

#. name
#: m10Q3/task.yaml
msgid "Mission 10 : Q* Student - Constructeur"
msgstr ""

#. name, q1, name
#: m10Q3/task.yaml
msgid "Constructeur de Student"
msgstr ""

#. context
#: m10Q4/task.yaml
msgid ""
"La classe AList contient une implémentation simple d'un ArrayList sur base "
"d'un tableau dont la taille augmente au fur et à mesure que l'on modifie la "
"liste. Ecrivez le code des principales méthodes de cette classe:\n"
"\n"
".. code-block:: java\n"
"\n"
"    /**\n"
"     * Une implémentation partielle d'une ArrayList en utilisant un tableau\n"
"     *\n"
"     * Cette implémentation supporte les méthodes suivantes :\n"
"     *\n"
"     * Constructeur : crée une liste vide  •  AList()\n"
"     * Insère d’un élément à la position index  •  void add (int index, "
"Object obj)\n"
"     * Renvoie l’objet en position index  •  Object get (int index)\n"
"     * Remplace l’élément en position index  •  void set (int index, Object "
"obj)\n"
"     * Retire et renvoie l’élément en position index  •  Object remove (int "
"index)\n"
"     * Renvoie true si obj appartient à la liste  •  boolean contains "
"(Object obj)\n"
"     *\n"
"     * @author O; Bonaventure\n"
"     * @version Novembre 2016\n"
"     */\n"
"    public class AList {\n"
"        private Object[] l;\n"
"\n"
"        public static final int INIT_SIZE = 5; // taille initiale d'un "
"AList\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post a créé une AList initialement vide\n"
"         *       permettant de stocker 5 références\n"
"         */\n"
"        public AList() {\n"
"            l = new Object[INIT_SIZE];\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre o != null\n"
"         * @post retourne true si l'objet o se trouve dans l'AList\n"
"         */\n"
"        public boolean contains(Object o) {\n"
"            // Question\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post retourne l'objet se trouvant à la position index\n"
"         *       et null si rien n'est stocké à cette position\n"
"         *       ou si index >= length\n"
"         */\n"
"        public Object get(int index) {\n"
"            // Question\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @retourne la taille actuelle de la liste\n"
"         */\n"
"        public int length() {\n"
"            return l.length;\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre 0 <= index < this.length()\n"
"         * @post remplace la référence se trouvant à l'index dans\n"
"         *       la liste par la référence à o\n"
"         */\n"
"        public void set(int index, Object o) {\n"
"            // Question\n"
"        }\n"
"\n"
"        /*\n"
"         * @pre -\n"
"         * @post remplace l'objet o dans la liste en position index\n"
"         *       Si index >= length, augmente d'abord la taille\n"
"         *       de la liste en créant un nouveau tableau et\n"
"         *       en y recopiant toutes les références de la liste\n"
"         *       this avant de remplacer l'objet o à l'indice index\n"
"         */\n"
"        public void add(int index, Object o) {\n"
"            // Question\n"
"        }\n"
"    }\n"
"\n"
"Vous pouvez tester vos méthodes individuellement."
msgstr ""

#. name
#: m10Q4/task.yaml
msgid "Mission 10 : Q* AList"
msgstr ""

#. name, q1, header
#: m10Q4/task.yaml
msgid "Ecrivez le corps de la méthode contains"
msgstr ""

#. name, q2, name
#: m10Q4/task.yaml
msgid "Get"
msgstr ""

#. name, q2, header
#: m10Q4/task.yaml
msgid "Ecrivez le corps de la méthode get"
msgstr ""

#. name, q3, name
#: m10Q4/task.yaml
msgid "Add"
msgstr ""

#. name, q3, header
#: m10Q4/task.yaml
msgid "Ecrivez le corps de la méthode add"
msgstr ""

#. name, q4, name
#: m10Q4/task.yaml
msgid "Set"
msgstr ""

#. name, q4, header
#: m10Q4/task.yaml
msgid "Ecrivez le corps de la méthode set"
msgstr ""

#. context
#: m10Q5/task.yaml
msgid ""
"On vous fournit une classe ``Vector`` contenant uniquement une méthode "
"``loadVector`` prenant en paramètre un ``String`` appelé filename.\n"
"La méthode à les spécifications suivantes:\n"
"\n"
".. code-block:: java\n"
"\n"
"    import java.io.BufferedReader;\n"
"    import java.io.FileReader;\n"
"    import java.io.IOException;\n"
"    import java.io.FileNotFoundException;\n"
"    import java.util.ArrayList;\n"
"\n"
"    /**\n"
"     *\n"
"     * @author ogoletti\n"
"     * @version 29/11/16\n"
"     */\n"
"    public class Vector {\n"
"\n"
"        /**\n"
"         * @pre filename != null\n"
"         * @post lit dans le fichier dont le nom est fileName le     contenu "
"du vecteur v\n"
"         *       le format du fichier est : un élément par ligne     en "
"commençant par v[0] ...\n"
"         *     Les lignes à un format incorrect sont ignorées.\n"
"         *     En cas d'erreur d'entrée/sortie (exception,     fichier non "
"lisible,\n"
"         *     nombre incorrect d'éléments ) retourne null\n"
"         */\n"
"        public static double[] loadVector(String filename) {\n"
"                // Question\n"
"            }\n"
"    }\n"
"\n"
"\n"
"On vous demande d'utiliser ``BufferedReader`` pour répondre à cette question."
msgstr ""

#. name
#: m10Q5/task.yaml
msgid "Mission 10: Q* Vecteur"
msgstr ""

#. name, q1, name
#: m10Q5/task.yaml
msgid "loadVector"
msgstr ""

#. name, q1, header
#: m10Q5/task.yaml
msgid "Ecrivez le corps de la méthode loadVector"
msgstr ""

#. context
#: m10Q6/task.yaml
msgid ""
"On vous fournit une classe ``Matrix`` contenant uniquement une méthode "
"``loadMatrix`` prenant en paramètre un ``String`` appelé filename.\n"
"La méthode à les spécifications suivantes:\n"
"\n"
".. code-block:: java\n"
"\n"
"    import java.io.BufferedReader;\n"
"    import java.io.FileReader;\n"
"    import java.io.IOException;\n"
"    import java.io.FileNotFoundException;\n"
"\n"
"    public class Matrix {\n"
"        /**\n"
"         * @pre     filename != null\n"
"         * @post    lit dans le fichier dont le nom est fileName le contenu "
"d'une matrice mxn\n"
"         *          le format du fichier est :\n"
"         *          première ligne : l'entier m\n"
"         *          deuxième ligne : l'entier n\n"
"         *          lignes suivantes : une chaîne du format i,j val\n"
"         *                             où 0<=i<m et 0<=j<n et val est un "
"réel\n"
"         *          En cas d'erreur d'entrée/sortie (exception, fichier non "
"lisible,\n"
"         *          nombre incorrect d'éléments, mauvais format) retourne "
"null\n"
"         */\n"
"        public static double[][] loadMatrix(String filename) {\n"
"            //A compléter\n"
"        }\n"
"    }\n"
"\n"
"\n"
"\n"
"\n"
"On vous demande d'utiliser ``BufferedReader`` pour répondre à cette question."
msgstr ""

#. name
#: m10Q6/task.yaml
msgid "Mission 10: Q* Matrix"
msgstr ""

#. name, q1, name
#: m10Q6/task.yaml
msgid "loadMatrix"
msgstr ""

#. name, q1, header
#: m10Q6/task.yaml
msgid "Ecrivez le corps de la méthode loadMatrix"
msgstr ""

#. context
#: m10_qcm/task.yaml
msgid ""
"=====================\n"
"Mission 10. ArrayList\n"
"=====================\n"
"\n"
"\n"
"Ces questions supposent que vous avez lu les sections suivantes du livre de "
"référence |jn|_\n"
"\n"
"    - |jn8.3|_\n"
"        - |jn8.3.3|_\n"
"        - |jn8.3.4|_\n"
"        - |jn8.3.5|_\n"
"    - |jn10.1|_\n"
"        - |jn10.1.3|_\n"
"        - |jn10.1.4|_\n"
"        - |jn10.1.5|_\n"
"        - |jn10.1.6|_\n"
"        - |jn10.1.7|_\n"
"    - |jn10.2|_\n"
"        - |jn10.2.1|_\n"
"        - |jn10.2.2|_\n"
"    - |jn11.4|_\n"
"        - |jn11.4.1|_\n"
"\n"
".. _jn: http://math.hws.edu/javanotes/\n"
".. |jn| replace:: JavaNotes\n"
"\n"
".. _jn8.3 : http://math.hws.edu/javanotes/c8/s3.html\n"
".. |jn8.3| replace:: `8.3 : Exceptions and try..catch`\n"
"\n"
".. _jn8.3.3 : http://math.hws.edu/javanotes/c8/s3.html#robustness.3.3\n"
".. |jn8.3.3| replace:: `8.3.3 : Throwing Exceptions`\n"
"\n"
".. _jn8.3.4 : http://math.hws.edu/javanotes/c8/s3.html#robustness.3.4\n"
".. |jn8.3.4| replace:: `8.3.4 : Mandatory Exception Handling`\n"
"\n"
".. _jn8.3.5 : http://math.hws.edu/javanotes/c8/s3.html#robustness.3.5\n"
".. |jn8.3.5| replace:: `8.3.5 : Programming with Exceptions`\n"
"\n"
".. _jn10.1 : http://math.hws.edu/javanotes/c10/s1.html\n"
".. |jn10.1| replace:: `10.1 : Generic Programming`\n"
"\n"
".. _jn10.1.3 : http://math.hws.edu/javanotes/c10/s1.html#generics.1.3\n"
".. |jn10.1.3| replace:: `10.1.3 : Generic Programming in Java`\n"
"\n"
".. _jn10.1.4 : http://math.hws.edu/javanotes/c10/s1.html#generics.1.4\n"
".. |jn10.1.4| replace:: `10.1.4 : The Java Collection Framework`\n"
"\n"
".. _jn10.1.5 : http://math.hws.edu/javanotes/c10/s1.html#generics.1.5\n"
".. |jn10.1.5| replace:: `10.1.5 : Iterators and for-each Loops`\n"
"\n"
".. _jn10.1.6 : http://math.hws.edu/javanotes/c10/s1.html#generics.1.6\n"
".. |jn10.1.6| replace:: `10.1.6 : Equality and Comparison`\n"
"\n"
".. _jn10.1.7 : http://math.hws.edu/javanotes/c10/s1.html#generics.1.7\n"
".. |jn10.1.7| replace:: `10.1.7 : Generics and Wrapper Classes`\n"
"\n"
".. _jn10.2 : http://math.hws.edu/javanotes/c10/s2.html\n"
".. |jn10.2| replace:: `10.2 : Lists and Sets`\n"
"\n"
".. _jn10.2.1 : http://math.hws.edu/javanotes/c10/s2.html#generics.2.1\n"
".. |jn10.2.1| replace:: `10.2.1 : ArrayList and LinkedList`\n"
"\n"
".. _jn10.2.2 : http://math.hws.edu/javanotes/c10/s2.html#generics.2.2\n"
".. |jn10.2.2| replace:: `10.2.2 : Sorting`\n"
"\n"
".. _jn11.4 : http://math.hws.edu/javanotes/c11/s4.html\n"
".. |jn11.4| replace:: `11.4 : Networking`\n"
"\n"
".. _jn11.4.1 : http://math.hws.edu/javanotes/c11/s4.html#IO.4.1\n"
".. |jn11.4.1| replace:: `11.4.1 : URLs and URLConnections`\n"
msgstr ""

#. name
#: m10_qcm/task.yaml
msgid "Mission 10: QCM"
msgstr ""

#. name, q1, name
#: m10_qcm/task.yaml
msgid "Instruction throw"
msgstr ""

#. name, q1, header
#: m10_qcm/task.yaml
msgid ""
"\n"
"Quelle est la manière correcte de lancer une exception de type "
"``IllegalArgumentException`` signalant un nombre négatif ?\n"
msgstr ""

#. name, q1, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   throw new IllegalArgumentException(\"nombre negatif\");\n"
msgstr ""

#. name, q1, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   Exception e = new IllegalArgumentException(\"nombre negatif\");\n"
"   throw e;\n"
msgstr ""

#. name, q1, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"L'exception ne doit pas nécessairement être créée dans l'instruction "
"``throw``.\n"
msgstr ""

#. name, q1, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   throw IllegalArgumentException(\"nombre negatif\");\n"
msgstr ""

#. name, q1, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"``IllegalArgumentException`` est un constructeur.\n"
msgstr ""

#. name, q1, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   return new IllegalArgumentException(\"nombre negatif\");\n"
msgstr ""

#. name, q1, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"Il ne s'agit pas de retourner un résultat mais de lancer une exception.\n"
msgstr ""

#. name, q1, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   try {\n"
"       ...\n"
"   } catch (IllegalArgumentException e) {\n"
"       e.setMessage(\"nombre negatif\");\n"
"   }\n"
msgstr ""

#. name, q1, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"Il s'agit de lancer une exception, pas de l'intercepter.\n"
msgstr ""

#. name, q1, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   try {\n"
"       ...\n"
"   } catch (new IllegalArgumentException(\"nombre negatif\")) {\n"
"       System.out.println(e.getMessage());\n"
"   }\n"
msgstr ""

#. name, q1, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   throws new IllegalArgumentException(\"nombre negatif\");\n"
msgstr ""

#. name, q1, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"``throws`` intervient dans les signatures, ce n'est pas la bonne "
"instruction.\n"
msgstr ""

#. name, q2, name
#: m10_qcm/task.yaml
msgid "Propagation d'exceptions"
msgstr ""

#. name, q2, header
#: m10_qcm/task.yaml
msgid ""
"\n"
"Qu'imprime le programme suivant\n"
"\n"
".. code-block:: java\n"
"\n"
"    public static void main(String[] args) {\n"
"        System.out.println(\"Debut de main\");\n"
"        task1();\n"
"        task2();\n"
"        System.out.println(\"Fin de main\");\n"
"    }\n"
"\n"
"    public static void task1() {\n"
"        System.out.println(\"Debut de task1\");\n"
"        try {\n"
"            task3();\n"
"        } catch (Exception e) {\n"
"            System.out.println(\"task1 intercepte \" + e.getMessage());\n"
"        }\n"
"        System.out.println(\"Fin de task1\");\n"
"    }\n"
"\n"
"    public static void task2() {\n"
"        System.out.println(\"Debut de task2\");\n"
"        task3();\n"
"        System.out.println(\"Fin de task2\");\n"
"    }\n"
"\n"
"    public static void task3() {\n"
"        System.out.println(\"Debut de task3\");\n"
"        task4();\n"
"        System.out.println(\"Fin de task3\");\n"
"    }\n"
"\n"
"    public static void task4() {\n"
"        System.out.println(\"Debut de task4\");\n"
"        throw new RuntimeException(\"boum\");\n"
"        System.out.println(\"Fin de task4\");\n"
"    }\n"
"\n"
msgstr ""

#. name, q2, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   Debut de main\n"
"   Debut de task1\n"
"   Debut de task3\n"
"   Debut de task4\n"
"   task1 intercepte boum\n"
"   Fin de task1\n"
"   Debut de task2\n"
"   Debut de task3\n"
"   Debut de task4\n"
"   java.lang.Exception: boum\n"
msgstr ""

#. name, q2, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   Debut de main\n"
"   Debut de task1\n"
"   Debut de task3\n"
"   Debut de task4\n"
"   Fin de task4\n"
"   Fin de task3\n"
"   task1 intercepte boum\n"
"   Fin de task1\n"
"   Debut de task2\n"
"   Debut de task3\n"
"   Debut de task4\n"
"   Fin de task4\n"
"   Fin de task3\n"
"   Fin de task2\n"
"   Fin de main\n"
"   java.lang.Exception: boum\n"
msgstr ""

#. name, q2, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"L'exécution de ``main``, ``task2``, ``task3`` et ``task4`` ne parvient pas à "
"la fin à cause de l'exception lancée dans ``task4``.\n"
msgstr ""

#. name, q2, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   Debut de main\n"
"   Debut de task1\n"
"   Debut de task3\n"
"   Debut de task4\n"
"   Fin de task3\n"
"   task1 intercepte boum\n"
"   Fin de task1\n"
"   Debut de task2\n"
"   Debut de task3\n"
"   Debut de task4\n"
"   Fin de task3\n"
"   java.lang.Exception: boum\n"
msgstr ""

#. name, q2, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"L'exécution de ``task3`` ne parvient pas à la fin, ``task3`` propage "
"l'exception de ``task4``.\n"
msgstr ""

#. name, q2, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   Debut de main\n"
"   Debut de task1\n"
"   Debut de task3\n"
"   Debut de task4\n"
"   task1 intercepte boum\n"
"   Debut de task2\n"
"   Debut de task3\n"
"   Debut de task4\n"
"   java.lang.Exception: boum\n"
msgstr ""

#. name, q2, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"L'exécution de ``task1`` parvient à la fin, l'exception de ``task3`` est "
"interceptée et traitée.\n"
msgstr ""

#. name, q2, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   Debut de main\n"
"   Debut de task1\n"
"   Debut de task3\n"
"   Debut de task4\n"
"   java.lang.Exception: boum\n"
"   task1 intercepte boum\n"
"   Fin de task1\n"
"   Debut de task2\n"
"   Debut de task3\n"
"   Debut de task4\n"
"   java.lang.Exception: boum\n"
msgstr ""

#. name, q2, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"La première exception lancée dans ``task4`` est interceptée dans ``task1``, "
"elle ne s'affiche pas.\n"
msgstr ""

#. name, q2, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   Debut de main\n"
"   Debut de task1\n"
"   Debut de task3\n"
"   Debut de task4\n"
"   task1 intercepte boum\n"
"   Fin de task4\n"
"   Fin de task3\n"
"   Fin de task1\n"
"   Debut de task2\n"
"   Debut de task3\n"
"   Debut de task4\n"
"   java.lang.Exception: boum\n"
"   Fin de task4\n"
"   Fin de task3\n"
"   Fin de task2\n"
"   Fin de main\n"
msgstr ""

#. name, q3, name
#: m10_qcm/task.yaml
msgid "Déclaration throws"
msgstr ""

#. name, q3, header
#: m10_qcm/task.yaml
msgid ""
"\n"
"Quelle est la manière correcte de déclarer que la méthode ``readName`` peut "
"causer une ``IOException`` ?\n"
msgstr ""

#. name, q3, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.io.*;\n"
"   ...\n"
"   public String readName(Reader r) throws IOException {\n"
"       ...\n"
"   }\n"
msgstr ""

#. name, q3, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.io.*;\n"
"   ...\n"
"   public String readName(Reader r) throws new IOException() {\n"
"       ...\n"
"   }\n"
msgstr ""

#. name, q3, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"``throws`` est suivi d'un nom de classe, pas d'une expression.\n"
msgstr ""

#. name, q3, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.io.*;\n"
"   ...\n"
"   public String readName(Reader r) {\n"
"       throws new IOException();\n"
"       ...\n"
"   }\n"
msgstr ""

#. name, q3, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"Il faut déclarer l'exception dans la signature et non la lancer dans le "
"corps de la méthode.\n"
msgstr ""

#. name, q3, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.io.*;\n"
"   ...\n"
"   public String readName(Reader r) throw IOException {\n"
"       ...\n"
"   }\n"
msgstr ""

#. name, q3, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"``throw`` est une instruction, ce n'est pas ce qu'il faut ici.\n"
msgstr ""

#. name, q3, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.io.*;\n"
"   ...\n"
"   // throws IOException\n"
"   public String readName(Reader r) {\n"
"       ...\n"
"   }\n"
msgstr ""

#. name, q3, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"``throws`` doit intervenir dans la signature, pas juste en commentaire.\n"
msgstr ""

#. name, q3, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.io.*;\n"
"   ...\n"
"   public IOException readName(Reader r) {\n"
"       ...\n"
"   }\n"
msgstr ""

#. name, q3, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"``readName`` peut lancer une ``IOException`` et non la retourner comme "
"résultat.\n"
msgstr ""

#. name, q4, name
#: m10_qcm/task.yaml
msgid "Exceptions sous contrôle"
msgstr ""

#. name, q4, header
#: m10_qcm/task.yaml
msgid ""
"\n"
"Considérons le programme suivant\n"
"\n"
".. code-block:: java\n"
"\n"
"    import java.io.*;\n"
"    ...\n"
"\n"
"    public static void main(String[] args) {\n"
"        processFile(args[0]);\n"
"    }\n"
"\n"
"    public static void processFile(String filename) {\n"
"        try {\n"
"            String[] lines = readFile(filename);\n"
"            ...\n"
"        } catch (IOException e) {\n"
"            System.out.println(\"cannot read: \" + e.getMessage());\n"
"        }\n"
"    }\n"
"\n"
"    public static String[] readFile(String filename) {\n"
"        BufferedReader r = new BufferedReader(new FileReader(filename));\n"
"        ...\n"
"        for (String s = r.readLine(); s != null; s = r.readLine()) {\n"
"            ...\n"
"        }\n"
"        r.close();\n"
"        return ...;\n"
"    }\n"
"\n"
"Comment doit-on compléter les signatures des trois méthodes pour avoir "
"toutes les déclarations ``throws`` nécessaires, sans déclarations "
"inutiles ?\n"
msgstr ""

#. name, q4, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public static void main(String[] args)\n"
"   public static void processFile(String filename)\n"
"   public static String[] readFile(String filename) throws IOException\n"
msgstr ""

#. name, q4, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public static void main(String[] args)\n"
"   public static void processFile(String filename) throws IOException\n"
"   public static String[] readFile(String filename) throws IOException\n"
msgstr ""

#. name, q4, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"``processFile`` intercepte ``IOException``, il ne la propage pas.\n"
msgstr ""

#. name, q4, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public static void main(String[] args) throws IOException\n"
"   public static void processFile(String filename) throws IOException\n"
"   public static String[] readFile(String filename) throws IOException\n"
msgstr ""

#. name, q4, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"``processFile`` intercepte ``IOException``, il ne la propage pas et ``main`` "
"non plus.\n"
msgstr ""

#. name, q4, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public static void main(String[] args)\n"
"   public static void processFile(String filename) throws IOException\n"
"   public static String[] readFile(String filename)\n"
msgstr ""

#. name, q4, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"C'est ``readFile`` et non ``processFile`` qui peut causer une "
"``IOException``, à cause de l'utilisation du ``BufferedReader``.\n"
msgstr ""

#. name, q4, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public static void main(String[] args) throws IOException\n"
"   public static void processFile(String filename)\n"
"   public static String[] readFile(String filename) throws IOException\n"
msgstr ""

#. name, q4, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"Puisque ``processFile`` intercepte ``IOException``, il ne la propage pas à "
"``main``.\n"
msgstr ""

#. name, q5, name
#: m10_qcm/task.yaml
msgid "Définition d'exceptions"
msgstr ""

#. name, q5, header
#: m10_qcm/task.yaml
msgid ""
"\n"
"Parmi les définitions suivantes, laquelle définit correctement une exception "
"hors contrôle (unchecked) ?\n"
msgstr ""

#. name, q5, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public class GraveException extends RuntimeException {\n"
"       public GraveException(String msg) {\n"
"           super(msg);\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q5, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public class GraveException extends RuntimeException {\n"
"       private String message;\n"
"       public GraveException(String msg) {\n"
"           this.message = msg;\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q5, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"C'est syntaxiquement correct mais inadéquat; ``RuntimeException`` contient "
"déjà un message.\n"
msgstr ""

#. name, q5, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public class GraveException extends Exception {\n"
"       public GraveException(String msg) {\n"
"           super(msg);\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q5, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"Cette exception n'est pas hors contrôle.\n"
msgstr ""

#. name, q5, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public class GraveException {\n"
"       public GraveException(String msg) {\n"
"           super(msg);\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q5, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"Pour que ce soit une exception il faut définir une sous-classe de "
"``Throwable``.\n"
msgstr ""

#. name, q5, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public class GraveException extends RuntimeException {\n"
"       public GraveException(String msg) {\n"
"           throw new GraveException(msg);\n"
"       }\n"
"   }\n"
msgstr ""

#. name, q5, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"L'utilisation de ``throw`` n'a pas de sens ici.\n"
msgstr ""

#. name, q6, name
#: m10_qcm/task.yaml
msgid "Les collections Java"
msgstr ""

#. name, q6, header
#: m10_qcm/task.yaml
msgid ""
"\n"
"Quel groupe d'affirmations est correct ?\n"
msgstr ""

#. name, q6, text
#: m10_qcm/task.yaml
msgid ""
"``List<T>`` est une interface qui représente une séquence ordonnée "
"d'éléments de type ``T``.  ``ArrayList<T>`` et ``LinkedList<T>`` sont des "
"implémentations de ``List<T>``, basées respectivement sur des tableaux et "
"sur des structures chaînées.\n"
msgstr ""

#. name, q6, text
#: m10_qcm/task.yaml
msgid ""
"``List<T>`` est une classe qui représente une séquence ordonnée d'éléments "
"de type ``T``.  ``ArrayList<T>`` et ``LinkedList<T>`` sont des extensions de "
"``List<T>``, basées respectivement sur des tableaux et sur des structures "
"chaînées.\n"
msgstr ""

#. name, q6, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"``List<T>`` est une interface.\n"
msgstr ""

#. name, q6, text
#: m10_qcm/task.yaml
msgid ""
"``List<T>`` est une interface qui représente un ensemble d'éléments de type "
"``T``.  ``HashList<T>`` et ``LinkedList<T>`` sont des implémentations de "
"``List<T>``, basées respectivement sur des tables de hachage et sur des "
"liens hypertexte.\n"
msgstr ""

#. name, q6, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"``List<T>`` ne représente pas un ensemble mais une séquence ordonnée.\n"
msgstr ""

#. name, q6, text
#: m10_qcm/task.yaml
msgid ""
"``List<T>`` est une classe qui représente une séquence ordonnée d'``Object`` "
"de taille ``T``.  ``ArrayList<T>`` et ``LinkedList<T>`` sont des extensions "
"de ``List<T>``, basées respectivement sur des tableaux et sur des structures "
"chaînées.\n"
msgstr ""

#. name, q6, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"``T`` est le type des éléments et non la taille de la séquence.\n"
msgstr ""

#. name, q6, text
#: m10_qcm/task.yaml
msgid ""
"``List<T>`` est une interface qui représente un ensemble d'éléments de type "
"``T``.  ``HashList<T>`` et ``LinkedList<T>`` sont des implémentations de "
"``List<T>``, basées respectivement sur des tables de hachage et sur des "
"structures chaînées.\n"
msgstr ""

#. name, q6, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"``HashList<T>`` n'existe pas dans les collections Java.\n"
msgstr ""

#. name, q7, name
#: m10_qcm/task.yaml
msgid "ArrayList<T>"
msgstr ""

#. name, q7, header
#: m10_qcm/task.yaml
msgid ""
"\n"
"Parmi les fragments de progamme suivants, lequel utilise correctement la "
"classe ``ArrayList<T>`` ?\n"
msgstr ""

#. name, q7, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.util.*;\n"
"   ...\n"
"   List<String> list = new ArrayList<String>();\n"
"   list.add(\"Hello\");\n"
"   String s1 = \"World\";\n"
"   list.add(s1);\n"
"   int i = list.indexOf(\"Hello\");\n"
"   String s2 = list.get(i);\n"
msgstr ""

#. name, q7, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.util.*;\n"
"   ...\n"
"   List<String> list = new ArrayList<String>[10];\n"
"   list.add(\"Hello\");\n"
"   Object s1 = \"World\";\n"
"   list.add(s1);\n"
"   int i = list.indexOf(\"Hello\");\n"
"   String s2 = (String) list.get(i);\n"
msgstr ""

#. name, q7, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"``list.add(s1)`` provoque une erreur de type et le type-cast à la dernière "
"ligne est incorrect.\n"
msgstr ""

#. name, q7, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.util.*;\n"
"   ...\n"
"   List<String> list = new ArrayList<String>[10];\n"
"   list[0] = \"Hello\";\n"
"   String s1 = \"World\";\n"
"   list[1] = s1;\n"
"   int i = list.indexOf(\"Hello\");\n"
"   String s2 = list[i];\n"
msgstr ""

#. name, q7, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"``ArrayLsit`` n'est pas un tableau ; ``list[i]`` est syntaxiquement "
"incorrect.\n"
msgstr ""

#. name, q7, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.util.*;\n"
"   ...\n"
"   List<T> list = new ArrayList();\n"
"   list.add(\"Hello\");\n"
"   String s1 = \"World\";\n"
"   list.add(s1);\n"
"   int i = list.indexOf(\"Hello\");\n"
"   String s2 = list.get(i);\n"
msgstr ""

#. name, q7, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"Le paramètre de type ``<T>`` doit être un type particulier existant, ici "
"``<String>``.\n"
msgstr ""

#. name, q7, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   import java.util.*;\n"
"   ...\n"
"   List<String> list = new ArrayList<String>[10];\n"
"   add(list, \"Hello\");\n"
"   String s1 = \"World\";\n"
"   add(list, s1);\n"
"   int i = list.indexOf(\"Hello\");\n"
"   String s2 = list.get(i);\n"
msgstr ""

#. name, q7, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"``add`` est une méthode de ``list``.\n"
msgstr ""

#. name, q8, name
#: m10_qcm/task.yaml
msgid "Itérateurs"
msgstr ""

#. name, q8, header
#: m10_qcm/task.yaml
msgid ""
"\n"
"Parmi les fragments suivants, lequel utilise correctement un itérateur ?\n"
msgstr ""

#. name, q8, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   List<Integer> list = makeList();  // crée la liste\n"
"   Iterator<Integer> iter = list.iterator();\n"
"   while (iter.hasNext()) {\n"
"       Integer i = iter.next();\n"
"       System.out.println(i);\n"
"   }\n"
msgstr ""

#. name, q8, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   List<Integer> list = makeList();  // crée la liste\n"
"   while (list.hasNext()) {\n"
"       Integer i = list.next();\n"
"       System.out.println(i);\n"
"   }\n"
msgstr ""

#. name, q8, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"``list`` n'est pas un itérateur.\n"
msgstr ""

#. name, q8, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   List<Integer> list = makeList();  // crée la liste\n"
"   Iterator iter = list.iterator();\n"
"   while (iter.hasNext()) {\n"
"       Integer i = iter.next();\n"
"       System.out.println(i);\n"
"   }\n"
msgstr ""

#. name, q8, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"Erreur de typage, utiliser un type générique pour ``iter``.\n"
msgstr ""

#. name, q8, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   List<Integer> list = makeList();  // crée la liste\n"
"   Iterator<Integer> iter = list.iterator();\n"
"   while (hasNext(iter)) {\n"
"       Integer i = next(iter);\n"
"       System.out.println(i);\n"
"   }\n"
msgstr ""

#. name, q8, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"``hasNext`` et ``next`` sont des méthodes de ``iter``.\n"
msgstr ""

#. name, q8, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   List<Integer> list = makeList();  // crée la liste\n"
"   Iterator<Integer> iter = list.iterator();\n"
"   while (iter.hasNext()) {\n"
"       Integer i = (Integer) iter.next();\n"
"       System.out.println(i);\n"
"   }\n"
msgstr ""

#. name, q8, feedback
#: m10_qcm/task.yaml
msgid ""
"\n"
"Le type-cast est inutile, ``iter.next`` retourne un ``Integer``.\n"
msgstr ""

#. name, q8, text
#: m10_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   List<Integer> list = makeList();  // crée la liste\n"
"   Iterator<Integer> iter = list.iterator();\n"
"   while (iter.next() != null) {\n"
"       Integer i = iter.next();\n"
"       System.out.println(i);\n"
"   }\n"
msgstr ""

#. context
#: m10dem1/task.yaml
msgid ""
"En Java, les exceptions sont un concept clé qui vous permet de gérer le "
"comportement de votre programme dans des cas extraordinaires. Voici la "
"classe ``RevisedRatio`` :\n"
"\n"
".. code-block:: java\n"
"\n"
"    public static class RevisedRatio {\n"
"        /**\n"
"         * @pre n1 et n2 sont des chaînes de caractères != null\n"
"         * @post après conversion de n1 et n2 en entier, retourne n1/n2, "
"peut lancer une NumberFormatException si un des strings n'est pas un nombre\n"
"         */\n"
"        public static int divise(String n1, String n2) {\n"
"            int n = Integer.parseInt(n1);\n"
"            int d = Integer.parseInt(n2);\n"
"            return doDivise(n, d);\n"
"        }\n"
"\n"
"        /**\n"
"         * @pre  n et d sont des entiers\n"
"         * @post retourne n/d si d!=0, sinon throws AritmeticException\n"
"         */\n"
"        public static int doDivise(int n, int d) {\n"
"            return (n/d);\n"
"        }\n"
"\n"
"        /**\n"
"         * @pre  args contient un tableau de String passés en ligne\n"
"         *         de commande\n"
"         * @post si args contient seulement un String, affiche un\n"
"         *         message d'erreur sinon affiche le résultat de la\n"
"         *         division de args[0] par args[i] pour tout\n"
"         *         0 < i < args.length, un résultat par ligne\n"
"         */\n"
"        public static int div(String[] args) {\n"
"            if(args.length < 2) {\n"
"                System.out.println(\"Erreur : la ligne de commande doit "
"être :\");\n"
"                System.out.println(\"java ratio num1 num2 num3... \");\n"
"                System.exit(-1);\n"
"            }\n"
"            else {\n"
"                for(int i=1; i<args.length;i++) {\n"
"                    /*1*/    // À réécrire\n"
"                    System.out.println(args[0] + \"/\" + args[i] +\n"
"                        \" = \" + divise(args[0], args[i]));\n"
"                }\n"
"            }\n"
"            return 0;\n"
"        }\n"
"\n"
"        public static void main(String[] args){\n"
"            if(div(args) != -1){\n"
"                System.out.println(\"Tout s'est bien passé\");\n"
"                System.exit(0);\n"
"            }\n"
"            else{\n"
"                System.out.println(\"Veuillez donner des arguments \"\n"
"                                    +\"corrects la prochaine fois.\");\n"
"                System.exit(-1);\n"
"            }\n"
"        }\n"
"    }\n"
"\n"
"La méthode ``div`` récupère les arguments de la méthode ``main`` qui "
"l'appelle et traite la division de ``args[0]`` par ``args[i]`` pour tout 0 < "
"i < args.length. La méthode affiche la réponse sous la forme \"``args[0]/"
"args[i] = reponse``\". Par exemple, quand on l'appelle avec les arguments ``"
"\"20\"``, ``\"5\"`` et ``\"10\"``, la méthode affiche sur la sortie "
"standard :\n"
"\n"
".. code-block:: java\n"
"\n"
"    20/5 = 4\n"
"    20/10 = 2\n"
"\n"
"Pour le moment, l'appel à cette méthode avec de mauvais arguments pourrait "
"faire crasher le programme en lançant une ``NumberFormatException`` ou une "
"``ArithmeticException``.\n"
"\n"
"Réécrivez entièrement l'intérieur de la boucle ``for`` de manière à ce que "
"lorsqu'une de ces deux exceptions est lancée, la méthode affiche le message "
"d'erreur ``Vous ne pouvez pas diviser par 0.`` pour la division par 0 et le "
"message ``La chaîne de caractères passée à parseInt() ne contient pas que "
"des chiffres.`` pour l'erreur de parsing, sur la sortie d'erreur standard et "
"retourne directement la valeur ``-2``. Sur la sortie d'erreur standard, on "
"doit pouvoir voir par exemple, en cas de NumberFormatException:\n"
"\n"
".. code-block:: console\n"
"\n"
"    La chaîne de caractères passée à parseInt() ne contient pas que des "
"chiffres."
msgstr ""

#. name
#: m10dem1/task.yaml
msgid "Mission 10 : Question de démarrage 1 : Traitement des exceptions"
msgstr ""

#. name, q1, name
#: m10dem1/task.yaml
msgid "L'intérieur de la boucle for"
msgstr ""

#. name, q1, header
#: m10dem1/task.yaml
msgid ""
"Réécrivez entièrement l'intérieur de la boucle for (/\\*1\\*/). Veillez à "
"n'écrire que l'intérieur de la boucle."
msgstr ""

#. context
#: m10dem2/task.yaml
msgid ""
"Écrivez le corps de la méthode ``write``, qui prend en argument un entier "
"``n`` et un nom de fichier ``filename`` et qui écrit les ``n`` premiers "
"entiers strictement positifs dans un fichier dont le nom est contenu dans "
"``filename``, en affichant un seul nombre par ligne. Voici la signature de "
"la méthode ``write`` :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /**\n"
"     *    @pre    n>0, filename != null\n"
"     *    @post    crée le fichier dont le nom est filename et écrit dans\n"
"     *            ce fichier les n premiers entiers strictement positifs,\n"
"     *            un entier par ligne.\n"
"     *            En cas d'erreur d'I/O, retourne -1.\n"
"     *            Retourne 0 si tout s'est bien déroulé.\n"
"     */\n"
"    public static int write(int n, String filename)\n"
"\n"
"Faites bien attention à gérer les erreurs d'I/O."
msgstr ""

#. name
#: m10dem2/task.yaml
msgid "Mission 10 : Question de démarrage 2 : Écriture dans des fichiers"
msgstr ""

#. name, q1, name
#: m10dem2/task.yaml
msgid "La méthode write"
msgstr ""

#. name, q1, header
#: m10dem2/task.yaml
msgid ""
"Écrivez ici le corps de la méthode ``write``. Veillez bien à n'écrire que le "
"corps de la méthode, ne recopiez pas sa signature. Respectez bien les "
"spécifications."
msgstr ""

#. context
#: m10real/task.yaml
msgid ""
"Vous soumettrez votre soumission de la phase de réalisation de la Mission 10 "
"soit ici, soit directement via BlueJ.\n"
"\n"
"Veuillez soumettre une archive **zip** contenant uniquement les fichiers **."
"java** utilisés pour votre mission, ainsi qu'n fichier nommé \"README.TXT\"."
msgstr ""

#. name
#: m10real/task.yaml
msgid "Mission 10: Phase de réalisation: Soumission"
msgstr ""

#. name, q1, name
#: m10real/task.yaml
msgid "Soumission de l'archive zip"
msgstr ""

#. name, q1, header
#: m10real/task.yaml
msgid "Veuillez uploader votre phase de réalisation soit ici, soit via BlueJ"
msgstr ""

#. context
#: m11Q1/task.yaml
msgid ""
"Une pile d'entiers est une structure de données qui permet d'empiler des "
"entiers. Les entiers sont ajoutés à la pile via son sommet. La pile garantit "
"un fonctionnement Last-In First-Out (LIFO, dernier entré, premier sorti).\n"
"On vous donne la classe ``PileInt`` incomplète suivante :\n"
"\n"
".. code-block:: java\n"
"\n"
"  /**\n"
"   * Une pile d'entiers représentée sous la forme d'une structure chaînée\n"
"   *\n"
"   * @author O. Bonaventure\n"
"   * @version Décembre 2016\n"
"   */\n"
"    public class PileInt {\n"
"\n"
"       // une classe interne représentant un noeud de la pile\n"
"        private class Noeud {\n"
"            int element;\n"
"            Noeud suivant;\n"
"\n"
"            public Noeud(int i, Noeud n) {\n"
"                element = i;\n"
"                suivant = n;\n"
"            }\n"
"        }\n"
"\n"
"        private Noeud sommet; // le sommet de la pile\n"
"        private int profondeur; // le nombre d'entiers dans la pile\n"
"\n"
"       /**\n"
"        * @pre -\n"
"        * @post initialise une pile vide\n"
"        */\n"
"        public PileInt() {\n"
"            sommet = null;\n"
"            profondeur = 0;\n"
"        }\n"
"\n"
"        /**\n"
"         * @pre\n"
"         * @post ajoute l'entier i au sommet de la pile\n"
"         */\n"
"        public void push(int i) {\n"
"            // Première question\n"
"        }\n"
"\n"
"        /**\n"
"         * @pre -\n"
"         * @post retourne l'entier au sommet de la pile et le retire de la "
"pile\n"
"         *       lance l'exception IllegalStateException si la pile est "
"vide\n"
"         */\n"
"        public int pop() throws IllegalStateException {\n"
"            // Deuxième question\n"
"        }\n"
"\n"
"        /**\n"
"         * @pre -\n"
"         * @post retourne la profondeur,\n"
"         *      c'est-à-dire le nombre d'éléments dans la pile.\n"
"         *      Retourne 0 pour une pile vide.\n"
"         */\n"
"        public int depth() {\n"
"            return profondeur;\n"
"        }\n"
"    }\n"
"\n"
"Complétez cette classe."
msgstr ""

#. name
#: m11Q1/task.yaml
msgid "Mission 11 : Q* PileInt"
msgstr ""

#. name, q1, name
#: m11Q1/task.yaml
msgid "Push"
msgstr ""

#. name, q1, header
#: m11Q1/task.yaml
msgid "Ecrivez le corps de la méthode push"
msgstr ""

#. name, q2, name
#. name, q1, name
#: m11Q1/task.yaml m11Q2/task.yaml
msgid "Pop"
msgstr ""

#. name, q2, header
#. name, q1, header
#: m11Q1/task.yaml m11Q2/task.yaml
msgid "Ecrivez le corps de la méthode pop"
msgstr ""

#. context
#: m11Q2/task.yaml
msgid ""
"Une pile est une structure de données qui permet d'empiler les éléments. Les "
"objets sont ajoutés à la pile via son sommet. La pile garantit un "
"fonctionnement Last-In First-Out (LIFO, dernier entré, premier sorti)\n"
"On vous donne la classe ``Pile`` incomplète suivante :\n"
"\n"
".. code-block:: java\n"
"\n"
"  /**\n"
"   * Une pile représentée sous la forme d'une structure chaînée\n"
"   *\n"
"   * @author O. Bonaventure\n"
"   * @version Novembre 2016\n"
"   */\n"
"    public class Pile {\n"
"\n"
"        // une classe interne représentant un noeud de la queue\n"
"        private class Noeud {\n"
"            Object element;\n"
"            Noeud suivant;\n"
"\n"
"            public Noeud(Object o, Noeud n) {\n"
"                element = o;\n"
"                suivant = n;\n"
"            }\n"
"       }\n"
"\n"
"       private Noeud sommet; // le sommet de la pile\n"
"\n"
"       /*\n"
"        * @pre -\n"
"        * @post a initialisé une pile vide\n"
"        */\n"
"        public Pile() {\n"
"            sommet = null;\n"
"        }\n"
"\n"
"       /**\n"
"        * @pre o != null\n"
"        * @post ajoute l'objet o au sommet de la pile\n"
"        */\n"
"        public void push(Object o) {\n"
"            // code non fourni\n"
"        }\n"
"\n"
"       /**\n"
"        * @pre -\n"
"        * @post retourne l'élément au sommet de la pile et le supprime\n"
"        *       null si la pile est vide\n"
"        */\n"
"        public Object pop() {\n"
"            // Question 1\n"
"        }\n"
"\n"
"       /**\n"
"        * @pre -\n"
"        * @post retourne la profondeur,\n"
"        *      c'est-à-dire le nombre d'éléments dans la pile.\n"
"        *      0 pour une pile vide.\n"
"        */\n"
"        public int depth() {\n"
"            // Question 2\n"
"        }\n"
"    }\n"
"\n"
"Complétez cette classe."
msgstr ""

#. name
#: m11Q2/task.yaml
msgid "Mission 11 : Q* Pile"
msgstr ""

#. name, q2, name
#: m11Q2/task.yaml
msgid "Depth"
msgstr ""

#. name, q2, header
#: m11Q2/task.yaml
msgid "Ecrivez le corps de la méthode depth"
msgstr ""

#. context
#: m11Q3/task.yaml
msgid ""
"Une queue est une structure de donnée qui dispose d'une entrée et d'une "
"sortie. Les objets sont ajoutés à la queue via son entrée et sont retirés "
"via sa sortie. La queue garantit un fonctionnement First-In First-Out (FIFO, "
"premier entré, premier sorti)\n"
"On vous donne la classe ``FIFOQueue`` incomplète suivante :\n"
"\n"
".. code-block:: java\n"
"\n"
"  /**\n"
"   * Une FIFO queue représentée sous la forme d'une structure chaînée\n"
"   *\n"
"   * @author O. Bonaventure\n"
"   * @version Novembre 2016\n"
"   */\n"
"    public class FIFOQueue {\n"
"\n"
"       // une classe interne représentant un noeud de la queue\n"
"        private class Noeud {\n"
"            Object element;\n"
"            Noeud suivant;\n"
"\n"
"            public Noeud(Object o, Noeud n) {\n"
"                element = o;\n"
"                suivant = n;\n"
"            }\n"
"        }\n"
"\n"
"       private Noeud entree; // correspond à tout moment à l'entrée de la "
"queue\n"
"       private Noeud sortie; // correspond à tout moment à la sortie de la "
"queue\n"
"\n"
"       /*\n"
"        * @pre -\n"
"        * @post a initialisé une queue vide\n"
"        */\n"
"        public FIFOQueue() {\n"
"            entree = null;\n"
"            sortie = null;\n"
"        }\n"
"\n"
"       /**\n"
"        * @pre o != null\n"
"        * @post ajoute l'objet à la queue via le noeud entree\n"
"        */\n"
"        public void ajoute(Object o) {\n"
"            Noeud ajout;\n"
"            ajout = new Noeud(o, entree);\n"
"            entree = ajout;\n"
"            if(sortie == null) {\n"
"                 sortie = ajout;\n"
"            }\n"
"       }\n"
"\n"
"       /**\n"
"        * @pre -\n"
"        * @post retourne le plus ancien objet de la queue via le noeud "
"sortie et\n"
"        *       le retire de la queue\n"
"        *       null si la queue est vide\n"
"        */\n"
"       public Object retire () {\n"
"          // A compléter\n"
"       }\n"
"    }\n"
"\n"
"Complétez cette classe."
msgstr ""

#. name
#: m11Q3/task.yaml
msgid "Mission 11 : Q* FIFOQueue"
msgstr ""

#. name, q1, name
#. name, q2, name
#: m11Q3/task.yaml m11Q4/task.yaml m11Q6/task.yaml
msgid "Retire"
msgstr ""

#. name, q1, header
#. name, q2, header
#: m11Q3/task.yaml m11Q4/task.yaml m11Q6/task.yaml
msgid "Ecrivez le corps de la méthode retire"
msgstr ""

#. context
#: m11Q4/task.yaml
msgid ""
"Une queue est une structure de données qui dispose d'une entrée et d'une "
"sortie. Les objets sont ajoutés à la queue via son entrée et sont retirés "
"via sa sortie. La queue garantit un fonctionnement First-In First-Out (FIFO, "
"premier entré, premier sorti)\n"
"On vous donne la classe ``Queue`` incomplète suivante :\n"
"\n"
".. code-block:: java\n"
"\n"
"  /**\n"
"   * Une queue représentée sous la forme d'une structure chaînée\n"
"   *\n"
"   * @author O. Bonaventure\n"
"   * @version Novembre 2016\n"
"   */\n"
"    public class Queue {\n"
"\n"
"        // une classe interne représentant un noeud de la queue\n"
"        private class Noeud {\n"
"            Object element;\n"
"            Noeud suivant;\n"
"            Noeud precedent;\n"
"\n"
"            public Noeud(Object o, Noeud n, Noeud p) {\n"
"                element = o;\n"
"                suivant = n;\n"
"                precedent = p;\n"
"            }\n"
"         }\n"
"\n"
"        private Noeud entree; // l'entrée de la queue\n"
"        private Noeud sortie; // la sortie de la queue\n"
"\n"
"       /*\n"
"        * @pre -\n"
"        * @post initialise une queue vide\n"
"        */\n"
"        public Queue() {\n"
"            entree = null;\n"
"            sortie = null;\n"
"        }\n"
"\n"
"       /**\n"
"        * @pre o != null\n"
"        * @post ajoute l'objet à la queue\n"
"        */\n"
"        public void ajoute(Object o) {\n"
"            // Question 1\n"
"        }\n"
"\n"
"       /**\n"
"        * @pre -\n"
"        * @post retourne le plus ancien objet de la queue via le noeud "
"sortie et\n"
"        *       le retire de la queue.\n"
"        *       Retourne null si la queue est vide\n"
"        */\n"
"        public Object retire() {\n"
"            // Question 2\n"
"        }\n"
"    }\n"
"\n"
"Complétez cette classe."
msgstr ""

#. name
#: m11Q4/task.yaml
msgid "Mission 11 : Q** Queue"
msgstr ""

#. name, q1, name
#: m11Q4/task.yaml m11Q5/task.yaml
msgid "Ajoute"
msgstr ""

#. name, q1, header
#: m11Q4/task.yaml m11Q5/task.yaml
msgid "Ecrivez le corps de la méthode ajoute"
msgstr ""

#. context
#: m11Q5/task.yaml
msgid ""
"Une queue ordonnée est une structure de données qui dispose d'une référence "
"min et d'une référence max. Les réels sont ajoutés à la queue via son entrée "
"et sont retirés via sa sortie. A tout moment, la queue est telle que "
"l'élément le plus petit est accessible via la référence min et le plus grand "
"via la référence max.\n"
"On vous donne la classe ``OrderedList`` incomplète suivante :\n"
"\n"
".. code-block:: java\n"
"\n"
"  /**\n"
"   * Une liste qui contient des réels dans l'odre croissant\n"
"   *\n"
"   * @author O. Bonaventure\n"
"   * @version Dec. 2016\n"
"   */\n"
"    public class OrderedList {\n"
"\n"
"       // une classe interne représentant un noeud de la queue\n"
"        private static class Noeud {\n"
"            double d;\n"
"            Noeud suivant;\n"
"            Noeud precedent;\n"
"\n"
"            public Noeud(double d, Noeud n, Noeud p) {\n"
"                this.d = d;\n"
"                suivant = n;\n"
"                precedent = p;\n"
"            }\n"
"        }\n"
"\n"
"        private Noeud min; // le plus petit nombre de la liste\n"
"        private Noeud max; // le plus grand nombre de la liste\n"
"\n"
"       /*\n"
"        * @pre -\n"
"        * @post initialise une liste vide\n"
"        */\n"
"        public OrderedList() {\n"
"            min = null;\n"
"            max = null;\n"
"        }\n"
"\n"
"       /**\n"
"        * @pre\n"
"        * @post ajoute le nombre n à la liste ordonnée. Après ajout, la "
"liste est\n"
"        *       ordonnée, le nombre le plus petit est à la référence min et\n"
"        *       le plus grand à la référence max\n"
"        */\n"
"        public void ajoute(double n) {\n"
"            // Question 1\n"
"        }\n"
"\n"
"       /**\n"
"        * @pre -\n"
"        * @post retourne le plus grand élément de la queue et le retire de "
"la queue\n"
"        *       lance un exception IllegalStateException si la queue est "
"vide\n"
"        */\n"
"        public double retireMax() throws IllegalStateException {\n"
"            // Question 2\n"
"        }\n"
"    }\n"
"\n"
"\n"
"\n"
"Complétez cette classe."
msgstr ""

#. name
#: m11Q5/task.yaml
msgid "Mission 11 : Q** OrderedList"
msgstr ""

#. name, q2, name
#: m11Q5/task.yaml
msgid "RetireMax"
msgstr ""

#. name, q2, header
#: m11Q5/task.yaml
msgid "Ecrivez le corps de la méthode retireMax"
msgstr ""

#. context
#: m11Q6/task.yaml
msgid ""
"Une liste est une structure de données permettant de stocker des objets. Les "
"objets sont ajoutés à la liste via sa tete. Elle supporte trois commandes :\n"
"ajout pour ajouter un objet à la liste\n"
"retire pour retirer un élément se trouvant dans la liste\n"
"contient pour voir si un objet se trouve dans la liste\n"
"\n"
"On vous donne la classe ``Liste`` incomplète suivante :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /**\n"
"     * Une liste représentée sous la forme d'une structure chaînée\n"
"     *\n"
"     * @author O. Bonaventure\n"
"     * @version Décembre 2016\n"
"     */\n"
"    public class Liste {\n"
"\n"
"       // une classe interne représentant un noeud de la liste\n"
"        private class Noeud {\n"
"            Object element;\n"
"            Noeud suivant;\n"
"\n"
"            public Noeud(Object o, Noeud n) {\n"
"                element = o;\n"
"                suivant = n;\n"
"            }\n"
"        }\n"
"\n"
"        private Noeud tete; // le début de la liste\n"
"\n"
"       /*\n"
"        * @pre -\n"
"        * @post a initialisé une liste vide\n"
"        */\n"
"        public Liste() {\n"
"            tete = null;\n"
"        }\n"
"\n"
"       /**\n"
"        * @pre o != null\n"
"        * @post ajoute l'objet à la liste\n"
"        */\n"
"        public void ajoute(Object o) {\n"
"            // Code non fourni\n"
"        }\n"
"\n"
"       /*\n"
"        * @pre o != null\n"
"        * @post retourne true si l'objet o se trouve dans la liste, false "
"sinon\n"
"        */\n"
"        public boolean contient(Object o) {\n"
"            // Question 1\n"
"        }\n"
"\n"
"       /**\n"
"        * @pre o != null\n"
"        * @post retire toutes les copies de l'objet o de la liste.\n"
"        *       Retourne le nombre d'objets qui ont été retiré de la liste\n"
"        *       (0 si l'objet o n'était pas présent dans la liste)\n"
"        */\n"
"        public int retire(Object o) {\n"
"            // Question 2\n"
"        }\n"
"    }\n"
"\n"
"Complétez cette classe."
msgstr ""

#. name
#: m11Q6/task.yaml
msgid "Mission 11 : Q** List"
msgstr ""

#. name, q1, name
#: m11Q6/task.yaml
msgid "Contient"
msgstr ""

#. name, q1, header
#: m11Q6/task.yaml
msgid "Ecrivez le corps de la méthode contient"
msgstr ""

#. context
#: m11_qcm/task.yaml
msgid ""
"================================\n"
"Mission 11. Structures chaînées\n"
"================================\n"
"\n"
"\n"
"Ces questions supposent que vous avez lu les sections suivantes du livre de "
"référence |jn|_\n"
"\n"
"    - |jn5.7|_\n"
"        - |jn5.7.2|_\n"
"    - |jn9.1|_\n"
"    - |jn9.2|_\n"
"        - |jn9.2.1|_\n"
"        - |jn9.2.2|_\n"
"        - |jn9.2.3|_\n"
"        - |jn9.2.4|_\n"
"        - |jn9.2.5|_\n"
"    - |jn9.3|_\n"
"        - |jn9.3.1|_\n"
"        - |jn9.3.2|_\n"
"\n"
"Plusieurs questions se basent sur la classe ``StackOfInt`` de la section "
"9.3.1, partiellement reproduite et traduite ici\n"
"\n"
".. code-block:: java\n"
"\n"
"    /**\n"
"     * Une pile d'entiers sous forme de chaîne simplement liée.\n"
"     * Le sommet de la pile est la tête de la chaîne.\n"
"     */\n"
"    public class StackOfInts {\n"
"       /**\n"
"        * Un noeud de la liste.\n"
"        */\n"
"       private static class Node {\n"
"          int item;     // donnée\n"
"          Node next;    // le noeud suivant\n"
"       }\n"
"\n"
"       private Node top;   // le sommet de la pile\n"
"\n"
"       /**\n"
"        * @pre  -\n"
"        * @post Ajoute N au sommet de la pile.\n"
"        */\n"
"       public void push( int N ) {\n"
"          ...\n"
"       }\n"
"\n"
"\n"
"       /**\n"
"        * @pre  -\n"
"        * @post Retire et retourne l'élément au sommet de la pile.\n"
"        *       Lance une IllegalStateException si la pile est vide.\n"
"        */\n"
"       public int pop() {\n"
"          ...\n"
"       }\n"
"\n"
"       /**\n"
"        * @pre  -\n"
"        * @post retourne true si la pile est vide, false sinon.\n"
"        */\n"
"       public boolean isEmpty() {\n"
"          return (top == null);\n"
"       }\n"
"\n"
"    }\n"
"\n"
".. _jn: http://math.hws.edu/javanotes/\n"
".. |jn| replace:: JavaNotes\n"
"\n"
".. _jn5.7 : http://math.hws.edu/javanotes/c5/s7.html\n"
".. |jn5.7| replace:: `5.7 : Interfaces, Nested Classes, and Other Details`\n"
"\n"
".. _jn5.7.2 : http://math.hws.edu/javanotes/c5/s7.html#OOP.7.2\n"
".. |jn5.7.2| replace:: `5.7.2 : Nested Classes`\n"
"\n"
".. _jn9.1 : http://math.hws.edu/javanotes/c9/s1.html\n"
".. |jn9.1| replace:: `9.1 : Recursion`\n"
"\n"
".. _jn9.2 : http://math.hws.edu/javanotes/c9/s2.html\n"
".. |jn9.2| replace:: `9.2 : Linked Data Structures`\n"
"\n"
".. _jn9.2.1 : http://math.hws.edu/javanotes/c9/s2.html#recursion.2.1\n"
".. |jn9.2.1| replace:: `9.2.1 : Recursive Linking`\n"
"\n"
".. _jn9.2.2 : http://math.hws.edu/javanotes/c9/s2.html#recursion.2.2\n"
".. |jn9.2.2| replace:: `9.2.2 : Linked Lists`\n"
"\n"
".. _jn9.2.3 : http://math.hws.edu/javanotes/c9/s2.html#recursion.2.3\n"
".. |jn9.2.3| replace:: `9.2.3 : Basic Linked List Processing`\n"
"\n"
".. _jn9.2.4 : http://math.hws.edu/javanotes/c9/s2.html#recursion.2.4\n"
".. |jn9.2.4| replace:: `9.2.4 : Inserting into a Linked List`\n"
"\n"
".. _jn9.2.5 : http://math.hws.edu/javanotes/c9/s2.html#recursion.2.5\n"
".. |jn9.2.5| replace:: `9.2.5 : Deleting from a Linked List`\n"
"\n"
".. _jn9.3 : http://math.hws.edu/javanotes/c9/s3.html\n"
".. |jn9.3| replace:: `9.3 : Stacks, Queues, and ADTs`\n"
"\n"
".. _jn9.3.1 : http://math.hws.edu/javanotes/c9/s3.html#recursion.3.1\n"
".. |jn9.3.1| replace:: `9.3.1 : Stacks`\n"
"\n"
".. _jn9.3.2 : http://math.hws.edu/javanotes/c9/s3.html#recursion.3.2\n"
".. |jn9.3.2| replace:: `9.3.2 : Queues`\n"
msgstr ""

#. name
#: m11_qcm/task.yaml
msgid "Mission 11: QCM"
msgstr ""

#. name, q1, name
#: m11_qcm/task.yaml
msgid "Classes internes"
msgstr ""

#. name, q1, header
#: m11_qcm/task.yaml
msgid ""
"\n"
"On considère la classe ``Node`` définie dans ``StackOfInts``.  Parmi les "
"groupes d'affirmations suivants, lequel est correct?\n"
msgstr ""

#. name, q1, text
#: m11_qcm/task.yaml
msgid ""
"\n"
"\n"
"- La classe ``Node`` est une *classe interne* de la classe ``StackOfInts``.\n"
"- Chaque instance de ``StackOfInts`` peut créer un nombre quelconque "
"d'instances de ``Node``.\n"
"- Dans la méthode ``push``, on utilise ``new Node()`` pour créer une "
"instance de ``Node``.\n"
"- Dans une autre classe, on ne peut pas créer d'instance de ``Node``.\n"
msgstr ""

#. name, q1, text
#: m11_qcm/task.yaml
msgid ""
"\n"
"\n"
"- La classe ``Node`` est une *classe interne* de la classe ``StackOfInts``.\n"
"- Chaque instance de ``StackOfInts`` peut créer un nombre quelconque "
"d'instances de ``Node``.\n"
"- Dans la méthode ``push``, on utilise ``new StackOfInts.Node()`` pour créer "
"une instance de ``Node``.\n"
"- Dans une autre classe, on utilise ``new StackOfInts.Node()`` pour créer "
"une instance de ``Node``.\n"
msgstr ""

#. name, q1, feedback
#: m11_qcm/task.yaml
msgid ""
"\n"
"Dans la classe ``StackOfInts``, il suffit d'écrire ``new Node()`` pour créer "
"une instance de ``Node()``.\n"
"La classe ``Node`` est déclarée ``private``, elle n'est pas visilbe à "
"l'extérieur de ``StackOfInts``.\n"
msgstr ""

#. name, q1, text
#: m11_qcm/task.yaml
msgid ""
"\n"
"\n"
"- La classe ``Node`` est une *sous-classe* de la classe ``StackOfInts``.\n"
"- Chaque instance de ``StackOfInts`` contient une instance de ``Node``.\n"
"- Dans la méthode ``push``, on utilise ``new Node()`` pour créer une "
"instance de ``Node``.\n"
"- Dans une autre classe, on ne peut pas créer d'instance de ``Node``.\n"
msgstr ""

#. name, q1, feedback
#: m11_qcm/task.yaml
msgid ""
"\n"
"``Node`` n'est pas une sous-classe de ``StackOfInts``.\n"
"Une instance de ``StackOfInts`` ne contient pas d'instances de ``Node`` "
"(mais peut éventuellement en créer).\n"
msgstr ""

#. name, q1, text
#: m11_qcm/task.yaml
msgid ""
"\n"
"\n"
"- La classe ``Node`` est une *classe interne* de la classe ``StackOfInts``.\n"
"- Chaque instance de ``StackOfInts`` contient une instance de ``Node``.\n"
"- Dans la méthode ``push``, on utilise ``new Node()`` pour créer une "
"instance de ``Node``.\n"
"- Dans une autre classe, on utilise ``new StackOfInts.Node()`` pour créer "
"une instance de ``Node``.\n"
msgstr ""

#. name, q1, feedback
#: m11_qcm/task.yaml
msgid ""
"\n"
"Une instance de ``StackOfInts`` ne contient pas d'instances de ``Node`` "
"(mais peut éventuellement en créer).\n"
"La classe ``Node`` est déclarée ``private``, elle n'est pas visilbe à "
"l'extérieur de ``StackOfInts``.\n"
msgstr ""

#. name, q2, name
#: m11_qcm/task.yaml
msgid "Ajouter un noeud dans une chaîne"
msgstr ""

#. name, q2, header
#: m11_qcm/task.yaml
msgid ""
"\n"
"Dans la classe ``StackOfInts``, quelle serait une définition correcte de la "
"méthode ``push`` ?\n"
msgstr ""

#. name, q2, text
#: m11_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"  public void push( int N ) {\n"
"     Node n = new Node();\n"
"     n.item = N;\n"
"     n.next = top;\n"
"     top = n;\n"
"  }\n"
msgstr ""

#. name, q2, text
#: m11_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"  public void push( int N ) {\n"
"     Node oldTop = top;\n"
"     top = new Node();\n"
"     top.item = N;\n"
"     top.next = oldTop;\n"
"  }\n"
msgstr ""

#. name, q2, text
#: m11_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"  public void push( int N ) {\n"
"     Node oldTop = top;\n"
"     top.item = N;\n"
"     top.next = OldTop;\n"
"  }\n"
msgstr ""

#. name, q2, feedback
#: m11_qcm/task.yaml
msgid ""
"\n"
"Ceci remplace la valeur au sommet par N plutôt que d'ajouter N.  Il faut "
"créer un nouveau noeud.\n"
msgstr ""

#. name, q2, text
#: m11_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"  public void push( int N ) {\n"
"     Node n = new Node();\n"
"     n.item = N;\n"
"     n.next = top;\n"
"  }\n"
msgstr ""

#. name, q2, feedback
#: m11_qcm/task.yaml
msgid ""
"\n"
"Il faut modifier ``top``.\n"
msgstr ""

#. name, q2, text
#: m11_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"  public void push( int N ) {\n"
"     Node n = new Node();\n"
"     n = N;\n"
"     n.next = top;\n"
"     top = n;\n"
"  }\n"
msgstr ""

#. name, q2, feedback
#: m11_qcm/task.yaml
msgid ""
"\n"
"``n = N;`` n'est pas correct.\n"
msgstr ""

#. name, q2, text
#: m11_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"  public void push( int N ) {\n"
"     Node n = new Node();\n"
"     top = n;\n"
"     n.item = N;\n"
"     n.next = top;\n"
"  }\n"
msgstr ""

#. name, q2, feedback
#: m11_qcm/task.yaml
msgid ""
"\n"
"L'ordre des opérations est incorrect, on perd le reste de la liste.\n"
msgstr ""

#. name, q2, text
#: m11_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"  public void push( int N ) {\n"
"     Node n;\n"
"     n.item = N;\n"
"     n.next = top;\n"
"     top = n;\n"
"  }\n"
msgstr ""

#. name, q2, feedback
#: m11_qcm/task.yaml
msgid ""
"\n"
"Il faut créer le nouveau noeud.\n"
msgstr ""

#. name, q3, name
#: m11_qcm/task.yaml
msgid "Elements d'une structure chaînée"
msgstr ""

#. name, q3, header
#: m11_qcm/task.yaml
msgid ""
"\n"
"Dans une méthode de la classe ``StackOfInts``, on exécute le code suivant\n"
"\n"
".. code-block:: java\n"
"\n"
"    StackOfInts stack = new StackOfInts();\n"
"    stack.push(10);\n"
"    stack.push(20);\n"
"    stack.push(30);\n"
"    /***/\n"
"\n"
"Parmi les groupes d'affirmation suivantes, lequel est correct au point ``/"
"***/`` ?\n"
msgstr ""

#. name, q3, text
#: m11_qcm/task.yaml
msgid ""
"\n"
"\n"
"- ``stack.top.item`` vaut ``30``.\n"
"- ``stack.top.next.item`` vaut ``20``.\n"
"- ``stack.top.next.next`` est une instance de ``Node``.\n"
"- ``stack.top.next.next.next`` vaut ``null``.\n"
msgstr ""

#. name, q3, text
#: m11_qcm/task.yaml
msgid ""
"\n"
"\n"
"- ``stack.top`` vaut ``30``.\n"
"- ``stack.top.next`` vaut ``20``.\n"
"- ``stack.top.next.next`` est une instance de ``Node``.\n"
"- ``stack.top.next.next.next`` vaut ``null``.\n"
msgstr ""

#. name, q3, feedback
#: m11_qcm/task.yaml
msgid ""
"\n"
"``stack.top`` est un ``Node``, pas un ``int``.\n"
"``stack.top.next`` est un ``Node``, pas un ``int``.\n"
msgstr ""

#. name, q3, text
#: m11_qcm/task.yaml
msgid ""
"\n"
"\n"
"- ``stack.top.item`` vaut ``30``.\n"
"- ``stack.top.next.item`` vaut ``20``.\n"
"- ``stack.top.next.next`` vaut ``10``.\n"
"- ``stack.top.next.next.next.item`` vaut ``null``.\n"
msgstr ""

#. name, q3, feedback
#: m11_qcm/task.yaml
msgid ""
"\n"
"``stack.top.next.next`` est un ``Node``, pas un ``int``.\n"
"``stack.top.next.next.next.item`` provoque une ``NullPointerException``.\n"
msgstr ""

#. name, q3, text
#: m11_qcm/task.yaml
msgid ""
"\n"
"\n"
"- ``stack.top`` vaut ``30``.\n"
"- ``stack.top.next.item`` vaut ``20``.\n"
"- ``stack.top.next.next`` vaut ``10``.\n"
"- ``stack.top.next.next.next`` vaut ``null``.\n"
msgstr ""

#. name, q3, feedback
#: m11_qcm/task.yaml
msgid ""
"\n"
"``stack.top`` est un ``Node``, pas un ``int``.\n"
"``stack.top.next.next`` est un ``Node``, pas un ``int``.\n"
msgstr ""

#. name, q4, name
#: m11_qcm/task.yaml
msgid "Parcours de structure chaînée"
msgstr ""

#. name, q4, header
#: m11_qcm/task.yaml
msgid ""
"\n"
"Dans la classe ``StackOfInts``, quelle serait une implémentation correcte "
"d'une méthode ``sum`` qui calcule la somme des éléments sur la pile ?\n"
msgstr ""

#. name, q4, text
#: m11_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public int sum() {\n"
"       int sum = 0;\n"
"       Node n = top;\n"
"       while (n != null) {\n"
"           sum = sum + n.item;\n"
"           n = n.next;\n"
"       }\n"
"       return sum;\n"
"   }\n"
msgstr ""

#. name, q4, text
#: m11_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public int sum() {\n"
"       int sum = 0;\n"
"       Node n = this;\n"
"       while (n.next != null) {\n"
"           sum = sum + n.item;\n"
"           n = n.next;\n"
"       }\n"
"       return sum;\n"
"   }\n"
msgstr ""

#. name, q4, feedback
#: m11_qcm/task.yaml
msgid ""
"\n"
"``this`` n'est pas un ``Node``.\n"
"Erreur de condition de boucle, on loupe le dernier élément.\n"
msgstr ""

#. name, q4, text
#: m11_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public int sum() {\n"
"       int sum = 0;\n"
"       Node n = top;\n"
"       while (n.hasNext()) {\n"
"           sum = sum + n.item;\n"
"           n = n.next();\n"
"       }\n"
"       return sum;\n"
"   }\n"
msgstr ""

#. name, q4, feedback
#: m11_qcm/task.yaml
msgid ""
"\n"
"``next()`` et ``hasNext()`` ne sont pas définis ici.\n"
msgstr ""

#. name, q4, text
#: m11_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public int sum() {\n"
"       int sum = 0;\n"
"       Node n = this;\n"
"       while (n != null) {\n"
"           sum = sum + n;\n"
"           n = n.next;\n"
"       }\n"
"       return sum;\n"
"   }\n"
msgstr ""

#. name, q4, feedback
#: m11_qcm/task.yaml
msgid ""
"\n"
"``this`` n'est pas un ``Node``.\n"
"``sum + n`` n'est pas correct, ``n`` est un ``Node``.\n"
msgstr ""

#. name, q4, text
#: m11_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"   public int sum() {\n"
"       int sum = 0;\n"
"       Node n = top;\n"
"       while (n.next != null) {\n"
"           sum = sum + n;\n"
"           n = n.next;\n"
"       }\n"
"       return sum;\n"
"   }\n"
msgstr ""

#. name, q4, feedback
#: m11_qcm/task.yaml
msgid ""
"\n"
"Erreur de condition de boucle, on loupe le dernier élément.\n"
"``sum + n`` n'est pas correct, ``n`` est un ``Node``.\n"
msgstr ""

#. name, q5, name
#: m11_qcm/task.yaml
msgid "Manipulation de structures chaînées"
msgstr ""

#. name, q5, header
#: m11_qcm/task.yaml
msgid ""
"\n"
"Dans la classe ``StackOfInts``, quel serait une définition correcte d'une "
"méthode ``swap`` qui échange les deux noeuds au sommet de la pile ?\n"
msgstr ""

#. name, q5, text
#: m11_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"  public int swap() {\n"
"     assert (top != null && top.next != null);\n"
"     Node node1 = top;\n"
"     top = node1.next;\n"
"     node1.next = top.next;\n"
"     top.next = node1;\n"
"  }\n"
msgstr ""

#. name, q5, text
#: m11_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"  public int swap() {\n"
"     assert (top != null && top.next != null);\n"
"     Node node1 = top;\n"
"     top = node1.next;\n"
"     top.next = node1;\n"
"     node1.next = top.next;\n"
"  }\n"
msgstr ""

#. name, q5, feedback
#: m11_qcm/task.yaml
msgid ""
"\n"
"Ordre incorrect, la fin de la chaîne est perdue.\n"
msgstr ""

#. name, q5, text
#: m11_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"  public int swap() {\n"
"     assert (top != null && top.next != null);\n"
"     Node node1 = top;\n"
"     node1.next = node1.next.next;\n"
"     top = node1.next;\n"
"     top.next = node1;\n"
"  }\n"
msgstr ""

#. name, q5, feedback
#: m11_qcm/task.yaml
msgid ""
"\n"
"Ordre incorrect, le deuxième noeud est perdu.\n"
msgstr ""

#. name, q5, text
#: m11_qcm/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"  public int swap() {\n"
"     assert (top != null && top.next != null);\n"
"     top.next = top.next.next;\n"
"     top.next.next = top.next;\n"
"     top = top.next;\n"
"  }\n"
msgstr ""

#. name, q5, feedback
#: m11_qcm/task.yaml
msgid ""
"\n"
"Séquence incorrecte, perd des parties de la chaîne.\n"
msgstr ""

#. name, q6, name
#: m11_qcm/task.yaml
msgid "Structures de données à base de listes"
msgstr ""

#. name, q6, header
#: m11_qcm/task.yaml
msgid ""
"\n"
"Parmi les groupes d'affirmations suivants, lequel est correct ?\n"
msgstr ""

#. name, q6, text
#: m11_qcm/task.yaml
msgid ""
"\n"
"\n"
"- Dans une *pile* (stack), on retire d'abord le dernier élément ajouté.\n"
"- Les caractères tapés par l'utilisateur sur un clavier d'ordinateur sont "
"stockés dans une *file* (queue).\n"
msgstr ""

#. name, q6, text
#: m11_qcm/task.yaml
msgid ""
"\n"
"\n"
"- Dans une *file* (queue), on retire d'abord le premier élément ajouté.\n"
"- Les variables locales de chaque méthode ou routine dans un programme "
"informatique sont stockées sur une *pile* (stack).\n"
msgstr ""

#. name, q6, text
#: m11_qcm/task.yaml
msgid ""
"\n"
"\n"
"- Dans une *pile* (stack), on retire d'abord le dernier élément ajouté.\n"
"- Les variables locales de chaque méthode ou routine dans un programme "
"informatique sont stockées sur une *file* (queue).\n"
msgstr ""

#. name, q6, feedback
#: m11_qcm/task.yaml
msgid ""
"\n"
"Les variables locales de chaque méthode ou routine dans un programme "
"informatique sont stockées sur une pile.\n"
msgstr ""

#. name, q6, text
#: m11_qcm/task.yaml
msgid ""
"\n"
"\n"
"- Dans une *pile* (stack), on retire d'abord le premier élément ajouté.\n"
"- Les caractères tapés par l'utilisateur sur un clavier d'ordinateur sont "
"stockés dans une *file* (queue).\n"
msgstr ""

#. name, q6, feedback
#: m11_qcm/task.yaml
msgid ""
"\n"
"Une pile suit le principe \"dernier entré, premier sorti\".\n"
msgstr ""

#. name, q6, text
#: m11_qcm/task.yaml
msgid ""
"\n"
"\n"
"- Dans une *file* (queue), on retire d'abord le dernier élément ajouté.\n"
"- Les variables locales de chaque méthode ou routine dans un programme "
"informatique sont stockées sur une *pile* (stack).\n"
msgstr ""

#. name, q6, feedback
#: m11_qcm/task.yaml
msgid ""
"\n"
"Une file suit le principe \"premier entré, premier sorti\".\n"
msgstr ""

#. name, q6, text
#: m11_qcm/task.yaml
msgid ""
"\n"
"\n"
"- Dans une *file* (queue), on retire d'abord le premier élément ajouté.\n"
"- Les caractères tapés par l'utilisateur sur un clavier d'ordinateur sont "
"stockés dans une *pile* (stack).\n"
msgstr ""

#. name, q6, feedback
#: m11_qcm/task.yaml
msgid ""
"\n"
"Les caractères tapés par l'utilisateur sur un clavier d'ordinateur sont "
"stockés dans une file.\n"
msgstr ""

#. name, q7, name
#: m11_qcm/task.yaml
msgid "Pile : utilisation"
msgstr ""

#. name, q7, header
#: m11_qcm/task.yaml
msgid ""
"\n"
"Que fait la méthode suivante\n"
"\n"
".. code-block:: java\n"
"\n"
"    public static void m(StackOfInt stack) {\n"
"        int a = stack.pop();\n"
"        int b = stack.pop();\n"
"        stack.push(a+b);\n"
"    }\n"
msgstr ""

#. name, q7, text
#: m11_qcm/task.yaml
msgid ""
"\n"
"\n"
"- Si la pile contient au moins deux éléments, remplace les deux éléments au "
"sommet de la pile par leur somme.  Sinon, lance une "
"``IllegalStateException``.\n"
msgstr ""

#. name, q7, text
#: m11_qcm/task.yaml
msgid ""
"\n"
"\n"
"- Si la pile contient au moins deux éléments, ajoute leur somme au sommet de "
"la pile.  Sinon, lance une ``IllegalStateException``.\n"
msgstr ""

#. name, q7, feedback
#: m11_qcm/task.yaml
msgid ""
"\n"
"Les deux éléments sont d'abord retirés.\n"
msgstr ""

#. name, q7, text
#: m11_qcm/task.yaml
msgid ""
"\n"
"\n"
"- Retire les deux éléments au sommet de la pile et retourne leur somme.  Si "
"la pile contient moins de deux éléments, lance une "
"``IllegalStateException``.\n"
msgstr ""

#. name, q7, feedback
#: m11_qcm/task.yaml
msgid ""
"\n"
"La somme n'est pas retournée.\n"
msgstr ""

#. name, q7, text
#: m11_qcm/task.yaml
msgid ""
"\n"
"\n"
"- Si la pile contient exactement deux éléments, remplace les deux éléments "
"au sommet de la pile par leur somme.  Sinon, lance une "
"``IllegalStateException``.\n"
msgstr ""

#. name, q7, feedback
#: m11_qcm/task.yaml
msgid ""
"\n"
"La pile peut contenir plus de deux éléments sans qu'une exception se "
"produise.\n"
msgstr ""

#. name, q7, text
#: m11_qcm/task.yaml
msgid ""
"\n"
"\n"
"- Si la pile contient au moins deux éléments, retire les deux éléments au "
"sommet de la pile ajoute leur somme au fond de la pile.  Sinon, lance une "
"``IllegalStateException``.\n"
msgstr ""

#. name, q7, feedback
#: m11_qcm/task.yaml
msgid ""
"\n"
"La somme n'est pas ajoutée au fond de la pile.\n"
msgstr ""

#. author
#: m11dem11/task.yaml
msgid ""
"Munyabarenzi Clémentine Zaninka (ressource : Syllabus d'exercices LSINF1101)"
msgstr ""

#. context
#: m11dem11/task.yaml
msgid ""
"Dans la phase de réalisation, vous devez utiliser des méthodes provenant du "
"framework de test **JUnit** afin de tester votre implémentation dans BlueJ. "
"L'objectif de cet exercice est d'utiliser les méthodes de JUnit pour "
"vérifier le bon fonctionnement de la classe ``DList``. ci-après :\n"
"\n"
".. code-block :: java\n"
"\n"
"    class DList{\n"
"        List<Double> l;\n"
"\n"
"        /**\n"
"         * @pre\n"
"         * @post a construit une liste initialement vide\n"
"         */\n"
"        public DList(){\n"
"            l = new LinkedList<Double>();\n"
"        }\n"
"\n"
"        /**\n"
"         * @pre d != null\n"
"         * @post a ajouté le Double d dans la liste\n"
"         */\n"
"        public void add(Double d){\n"
"            assert d != null;\n"
"            l.add(d);\n"
"        }\n"
"        /**\n"
"         * @pre d != null\n"
"         * @post retourne true si d se trouvait dans la liste et false "
"sinon\n"
"         *       a retire de la liste toutes les instances de Double egales "
"a d\n"
"         */\n"
"        public boolean remove(Double d){\n"
"            assert d != null;\n"
"            int i = l.indexOf(d);\n"
"            if(i >= 0){\n"
"                Double d1 = l.remove(i);\n"
"                return true;\n"
"            }\n"
"            else{\n"
"                return false;\n"
"            }\n"
"        }\n"
"\n"
"        /**\n"
"         * @pre d != null\n"
"         * @post retourne true si d se trouve dans la liste et false sinon\n"
"         */\n"
"        public boolean contains(Double d){\n"
"            return l.contains(d);\n"
"        }\n"
"\n"
"        /**\n"
"         * @pre -\n"
"         * @post retourne le nombre de Double se trouvant dans la liste\n"
"         */\n"
"        public int size(){\n"
"            return l.size();\n"
"        }\n"
"    }\n"
"\n"
"Il vous est proposé une classe de test comme exemple dans laquelle les "
"assertions JUnit ne sont que partiellement écrites. Lisez attentivement le "
"code de cette classe afin de remplacer les blocs de commentaires  du type ``/"
"*(numero)???*/`` par le code qui convient. Si cela est fait correctement, "
"JUnit pourra détecter l'erreur contenue dans l'implémentation de la classe "
"``DList``.\n"
"\n"
".. code-block :: java\n"
"\n"
"    public static class DListTest extends junit.framework.TestCase{\n"
"\n"
"        /**\n"
"         * @pre -\n"
"         * @post verifie le bon fonctionnement de la methode contains sur "
"plusieurs\n"
"         *       exemples d'utilisation de la liste de Double: cette méthode "
"vérifie\n"
"         *       que l'appel à la méthode contains réussit quand il le "
"faut.\n"
"         */\n"
"        public void testReussiteContains(){\n"
"            // Creation de la liste\n"
"            DList l = new DList();\n"
"\n"
"            // Ajout de trois Double\n"
"            l.add(new Double(2.3));\n"
"            l.add(new Double(2.4));\n"
"            l.add(new Double(2.4));\n"
"\n"
"            // Verification sur base des elements ajoutes\n"
"            assertEquals(\"La verification de la presence d'un element "
"present une fois dans la liste devrait renvoyer true\", /*(1)???*/, /*(2)???"
"*/);\n"
"            assertEquals(\"La verification de la presence d'un element "
"present deux fois dans la liste devrait renvoyer true\", /*(3)???*/, /*(4)???"
"*/);\n"
"        }\n"
"\n"
"        /**\n"
"         * @pre -\n"
"         * @post verifie le bon fonctionnement de la methode contains sur "
"plusieurs\n"
"         *       exemples d'utilisation de la liste de Double: cette méthode "
"vérifie\n"
"         *       que l'appel à la méthode contains échoue quand il le faut.\n"
"         */\n"
"        public void testEchecContains(){\n"
"            // Creation de la DList\n"
"            DList l = new DList();\n"
"\n"
"            // Ajout de trois Double dans la DList\n"
"             l.add(new Double(2.3));\n"
"             l.add(new Double(2.4));\n"
"             l.add(new Double(2.4));\n"
"\n"
"            // Verification vérification prennant en compte les éléments "
"précédemment ajoutés\n"
"            assertEquals(\"La verification de la presence d'un element "
"absent de la liste devrait renvoyer false\", /*(5)???*/, /*(6)???*/);\n"
"\n"
"            // Verification qu'un element supprimé n'est plus contenu dans "
"la liste\n"
"            l.remove(new Double(2.3));\n"
"            assertEquals(\"La verification de la presence d'un element qui "
"n'est plus present dans la liste devrait renvoyer false\", /*(7)???*/, /"
"*(8)???*/);\n"
"        }\n"
"\n"
msgstr ""

#. name
#: m11dem11/task.yaml
msgid "Mission 11 : Question de Démarrage 1 : JUnit (partie1)"
msgstr ""

#. author
#: m11dem12/task.yaml
msgid ""
"Munyabarenzi Clémentine Zaninka (ressource: syllabus d'exercices SINF1101)"
msgstr ""

#. context
#: m11dem12/task.yaml
msgid ""
"Suite de la question de démarrage 1.\n"
"\n"
"La classe sous test:\n"
"\n"
".. code-block :: java\n"
"\n"
"    class DList\n"
"    {\n"
"        List<Double> l;\n"
"\n"
"        /**\n"
"         * @pre\n"
"         * @post a construit une liste initialement vide\n"
"         */\n"
"        public DList()\n"
"        {\n"
"            l=new LinkedList<Double>();\n"
"        }\n"
"\n"
"        /**\n"
"         * @pre d!=null\n"
"         * @post a ajout le Double d dans la liste\n"
"         */\n"
"        public void add(Double d)\n"
"        {\n"
"            assert d!=null;\n"
"            l.add(d);\n"
"        }\n"
"        /**\n"
"         * @pre d!=null\n"
"         * @post retourne true si d se trouvait dans la liste et false "
"sinon\n"
"         *       a retire de la liste toutes les instances de Double egales\n"
"         *       a d\n"
"         */\n"
"        public boolean remove(Double d)\n"
"        {\n"
"            assert d!=null;\n"
"            int i=l.indexOf(d);\n"
"            if(i>=0)\n"
"            {\n"
"                Double d1=l.remove(i);\n"
"                return true;\n"
"            }\n"
"            else\n"
"            {\n"
"                return false;\n"
"            }\n"
"        }\n"
"\n"
"        /**\n"
"         * @pre d!=null\n"
"         * @post retourne true si d se trouve dans la liste et false sinon\n"
"         */\n"
"        public boolean contains(Double d)\n"
"        {\n"
"            return l.contains(d);\n"
"        }\n"
"\n"
"        /**\n"
"         * @pre -\n"
"         * @post retourne le nombre de Double se trouvant dans la liste\n"
"         */\n"
"        public int size()\n"
"        {\n"
"            return l.size();\n"
"        }\n"
"    }\n"
"\n"
"La partie de la classe test à compléter:\n"
"\n"
".. Code-block :: java\n"
"\n"
"        /**\n"
"         * @pre\n"
"         * @post verification du bon fonctionnement de la methode remove:\n"
"         *          cette méthode vérifie que la méthode remove échoue "
"quand\n"
"         *       il le faut.\n"
"         */\n"
"        public void testReussiteRemove()\n"
"        {\n"
"            // Creation de la liste\n"
"            DList l=new DList();\n"
"\n"
"\n"
"            // ajout de trois elements a la liste\n"
"            l.add(new Double(2.3));\n"
"            l.add(new Double(2.4));\n"
"            l.add(new Double(2.4));\n"
"\n"
"\n"
"            // retrait de ces trois elements\n"
"            assertEquals(\"Le retrait d'un element se trouvant dans la liste"
"\"\n"
"                    + \" devrait renvoyer true\",/*(1)???*/,/*(2)???*/);\n"
"            assertEquals(\"Le retrait d'un element se trouvant deux fois dans"
"\"\n"
"                    + \" la liste devrait renvoyer true\",/*(3)???*/,/*(4)???"
"*/);\n"
"        }\n"
"\n"
"        /**\n"
"         * @pre\n"
"         * @post verification du bon fonctionnement de la methode remove:\n"
"         *          cette méthode vérifie\n"
"         *       que la méthode remove échoue quand il le faut.\n"
"         */\n"
"        public void testEchecRemove(){\n"
"\n"
"            // Creation de la liste\n"
"            DList l=new DList();\n"
"\n"
"            // Retrait d'un element d'une liste vide\n"
"            assertEquals(\"Le retrait d'un element ne se trouvant pas dans"
"\"\n"
"                    + \" la liste devriat renvoyer false\",/*(5)???*/,/"
"*(6)???*/);\n"
"\n"
"            // Ajout de trois elements a la liste\n"
"            l.add(new Double(2.3));\n"
"            /*(7)???*/\n"
"            l.add(new Double(2.4));\n"
"\n"
"            // Retrait de ces trois elements\n"
"            l.remove(new Double(2.3));\n"
"            assertEquals(\"Le retrait d'un element ne se trouvant plus dans"
"\"\n"
"                    + \" la liste devrait renvoyer false\",/*(8)???*/,/"
"*(9)???*/);\n"
"            assertEquals(\"Le retrait d'un element ne se trouvant pas dans "
"\"\n"
"                    + \"la liste devriat renvoyer false\",/*(10)???*/,/"
"*(11)???*/);\n"
"            l.remove(new Double(2.4));\n"
"            assertEquals(\"Le retrait d'un element dont les deux exemplaires"
"\"\n"
"                    + \" ne sont plus dans la liste devrait renvoyer false"
"\",/*(12)???*/,/*(13)???*/);\n"
"        }\n"
"\n"
"    }\n"
msgstr ""

#. name
#: m11dem12/task.yaml
msgid "Mission 11: Question de Démarrage 2 : JUnit (partie 2)"
msgstr ""

#. author
#: m11dem13/task.yaml
msgid ""
"Munyabarenzi Clémentine Zaninka (ressource : syllabus d'exercices SINF1101)"
msgstr ""

#. context
#: m11dem13/task.yaml
msgid ""
"A la suite de l'écriture de la classe ``DListTest`` faite aux questions "
"précédentes, vous avez réussi à découvrir à l'aide de JUnit l'erreur "
"contenue dans la classe testée. Soumettez pour finir une version corrigée de "
"cette classe ``DList``.\n"
"\n"
"**Attention, vous devez soumettre la classe DList entière avec exactement "
"les mêmes attributs et les mêmes méthodes. Seul le corps des méthodes et les "
"valeurs des attributs peuvent être différents.**"
msgstr ""

#. name
#: m11dem13/task.yaml
msgid ""
"Mission 11 : Question de Démarrage 3 : JUnit (partie3) une DList correcte"
msgstr ""

#. name, q1, header
#: m11dem13/task.yaml
msgid ""
"Rappel de la classe ``DList`` à corriger:\n"
"\n"
".. code-block :: java\n"
"\n"
"    class DList\n"
"    {\n"
"        List<Double> l;\n"
"\n"
"        /**\n"
"         * @pre\n"
"         * @post a construit une liste initialement vide\n"
"         */\n"
"        public DList()\n"
"        {\n"
"            l=new LinkedList<Double>();\n"
"        }\n"
"\n"
"        /**\n"
"         * @pre d!=null\n"
"         * @post a ajout le Double d dans la liste\n"
"         */\n"
"        public void add(Double d)\n"
"        {\n"
"            assert d!=null;\n"
"            l.add(d);\n"
"        }\n"
"        /**\n"
"         * @pre d!=null\n"
"         * @post retourne true si d se trouvait dans la liste et false "
"sinon\n"
"         *       a retire de la liste toutes les instances de Double egales\n"
"         *       a d\n"
"         */\n"
"        public boolean remove(Double d)\n"
"        {\n"
"            assert d!=null;\n"
"            int i=l.indexOf(d);\n"
"            if(i>=0)\n"
"            {\n"
"                Double d1=l.remove(i);\n"
"                return true;\n"
"            }\n"
"            else\n"
"            {\n"
"                return false;\n"
"            }\n"
"        }\n"
"\n"
"        /**\n"
"         * @pre d!=null\n"
"         * @post retourne true si d se trouve dans la liste et false sinon\n"
"         */\n"
"        public boolean contains(Double d)\n"
"        {\n"
"            return l.contains(d);\n"
"        }\n"
"\n"
"        /**\n"
"         * @pre -\n"
"         * @post retourne le nombre de Double se trouvant dans la liste\n"
"         */\n"
"        public int size()\n"
"        {\n"
"            return l.size();\n"
"        }\n"
"    }\n"
msgstr ""

#. context
#: m11real/task.yaml
msgid ""
"Vous pouvez soumettre ici ou via BlueJ votre phase de réalisation pour la "
"Mission 11.\n"
"\n"
"Vous attendons une archive **.zip** contenant uniquement les fichiers :\n"
"\n"
"- Classement.java\n"
"- ClassementTemps.java\n"
"- Coureur.java\n"
"- Dlist.java\n"
"- DListTest.java\n"
"- Main.java\n"
"- Resultat.java\n"
"- Temps.java\n"
"- README.txt"
msgstr ""

#. name
#: m11real/task.yaml
msgid "Mission 11: Phase de réalisation: Soumission"
msgstr ""

#. name, q1, name
#: m11real/task.yaml
msgid "Phase de réalisation de la Mission 11"
msgstr ""

#. author
#: m12_examj2011enonce_online/task.yaml
msgid "Charles Pecheur"
msgstr ""

#. context
#: m12_examj2011enonce_online/task.yaml
msgid ""
"--------\n"
"Contexte\n"
"--------\n"
"\n"
"Une *grappe d'ordinateurs* (computer cluster) est un ensemble d'ordinateurs "
"connectés entre eux et organisés de manière à apparaître comme une large "
"ressource de calcul sur laquelle peuvent s'exécuter simultanément de "
"nombreuses tâches, la répartition des tâches entre les différents "
"ordinateurs étant gérée par le système de manière transparente pour "
"l'utilisateur.  On appelle *processus* (process) une tâche individuelle dont "
"un utilisateur peut demander l'exécution sur la grappe.\n"
"\n"
".. image:: m12_examj2011enonce_online/cluster.png\n"
"    :align: center\n"
"    :scale: 50%\n"
"\n"
"Le programme que vous devez compléter permet de représenter la gestion des "
"processus sur une grappe d'ordinateurs.  La grappe est décrite par la classe "
"``Cluster``. Une grappe contient la liste des ordinateurs de la grappe, "
"organisée sous forme de **liste chaînée circulaire** : les noeuds de la "
"liste sont connectés en boucle, de sorte que la liste n'a pas de début ni de "
"fin.  Cette organisation est utilisée pour ajouter les nouveaux processus à "
"chaque ordinateur à tour de rôle, dans la mesure des ressources "
"disponibles.\n"
"\n"
".. image:: m12_examj2011enonce_online/listeCirc.png\n"
"    :align: center\n"
"    :scale: 60%\n"
"\n"
"Le fonctionnement de la liste est documenté dans la classe ``Cluster``.  La "
"tête de liste se décale à chaque ajout de processus pour assurer une "
"répartition plus équitable.  Par exemple, dans la situation illustrée ci-"
"dessus, l'ordinateur 1 est en tête de liste.  Si on désire ajouter un "
"processus, et que ni l'ordinateur 1 ni le 2 ne disposent des ressources "
"suffisantes, le processus sera ajouté à l'ordinateur 3, et l'ordinateur 4 "
"deviendra la nouvelle tête de liste.\n"
"\n"
"Une grappe peut contenir plusieurs types d'ordinateurs, dont les "
"fonctionnalités communes sont décrites dans l'interface ``ComputerIF``.  "
"Deux implémentations de cette interface sont fournies :\n"
"\n"
"-    ``BasicComputer`` qui supporte un seul processus à la fois, et\n"
"-    ``FullComputer`` qui supporte un nombre maximum déterminé de processus, "
"gérés dans un tableau.\n"
"\n"
"Un processus est décrit par la classe ``Process``, que vous devez écrire à "
"la question 3.  Le programme utilise aussi sa propre classe d'exceptions, "
"définie dans ``UnavailableException``.\n"
"\n"
"Rappelons qu'il convient d'utiliser la méthode ``equals`` pour comparer des "
"objets, même si cette méthode n'est pas explicitement re-définie dans les "
"classes correspondantes.\n"
"\n"
"--------------\n"
"Ressources\n"
"--------------\n"
"\n"
"-    `The Java API <http://docs.oracle.com/javase/8/docs/api/>`_\n"
"-    `Introduction to Programming Using Java (JavaNotes) <http://math.hws."
"edu/javanotes/>`_\n"
"\n"
"--------\n"
"Annexes\n"
"--------\n"
"\n"
"Vous trouverez ci-après les sources (incomplètes) du programme auquel se "
"rapportent les questions :\n"
"\n"
"-    ComputerIF.java_\n"
"-    BasicComputer.java_\n"
"-    Process.java_\n"
"-    UnavailableException.java_\n"
"-    FullComputer.java_\n"
"-    Cluster.java_\n"
"\n"
"------------------\n"
"\n"
"ComputerIF.java\n"
"----------------------------\n"
"\n"
".. code-block:: java\n"
"\n"
"    /**\n"
"     * Un ordinateur, sur lequel on peut ajouter et retirer des processus.\n"
"     * L'ordinateur dispose de ressources (nombre de processus, volume de "
"stockage)\n"
"     * éventuellement limitées, et donc peut refuser l'ajout de processus "
"supplémentaires.\n"
"     * Un ordinateur a un nom.\n"
"     *\n"
"     * @author O. Bonaventure, Ch. Pecheur\n"
"     * @version Juin 2011\n"
"     */\n"
"\n"
"    public interface ComputerIF\n"
"    {\n"
"        /**\n"
"         * @pre  p != null, p ne se trouve pas déjà sur cet ordinateur\n"
"         * @post le processus p a été ajouté à cet ordinateur, si les "
"ressources\n"
"         *       nécessaires sont disponibles.  Retourne true si le "
"processus\n"
"         *       a été ajouté, false sinon.\n"
"         */\n"
"        public boolean addProcess(Process p);\n"
"\n"
"        /**\n"
"         * @pre p != null\n"
"         * @post le processus p a été retiré de cet ordinateur, si ce "
"processus\n"
"         *       se trouve sur cet ordinateur.  Retourne true si le "
"processus\n"
"         *       a été supprimé, false sinon.\n"
"         */\n"
"        public boolean removeProcess(Process p);\n"
"\n"
"        /**\n"
"         * @pre -\n"
"         * @post Tous les processus de cet ordinateur ont été retirés.\n"
"         */\n"
"        public void removeAllProcesses();\n"
"\n"
"        /**\n"
"         * @pre -\n"
"         * @post retourne le nom de l'ordinateur.\n"
"         */\n"
"        public String getName();\n"
"\n"
"        /**\n"
"         * @pre -\n"
"         * @post Retourne la liste des processus de cet ordinateur sous "
"forme de texte,\n"
"         *       avec une ligne par processus, chaque ligne comprenant le "
"nom du processus\n"
"         *       et sa taille de stockage, séparés par un espace, et se "
"termine par\n"
"         *       un passage à la ligne.  Par exemple:\n"
"         *\n"
"         *       process1 0\n"
"         *       bigprocess 200\n"
"         *       smallprocess 20\n"
"         */\n"
"        public String getState();\n"
"     }\n"
"\n"
"BasicComputer.java\n"
"----------------------------\n"
"\n"
".. code-block:: java\n"
"\n"
"   /**\n"
"     * Un ordinateur de base, supportant un seul processus et sans capacité "
"de stockage.\n"
"     *\n"
"     * @author O. Bonaventure, Ch. Pecheur\n"
"     * @version Juin 2011\n"
"     */\n"
"    public class BasicComputer implements ComputerIF\n"
"    {\n"
"        private String name; // Nom de l'ordinateur\n"
"        private Process proc; // processus éventuel, null si absent\n"
"\n"
"        /**\n"
"         * @pre name != null\n"
"         * @post Construit un BasicComputer de nom name.\n"
"         */\n"
"        public BasicComputer(String name)\n"
"        {\n"
"            this.name = name;\n"
"        }\n"
"\n"
"        /**\n"
"         * @pre -\n"
"         * @post retourne le nom de l'ordinateur.\n"
"         */\n"
"        public String getName()\n"
"        {\n"
"            return name;\n"
"        }\n"
"\n"
"        /**\n"
"         * @pre  p != null, p ne se trouve pas déjà sur cet ordinateur\n"
"         * @post le processus p a été ajouté à cet ordinateur, si aucun "
"processus\n"
"         *       n'est présent et si p ne demande pas de stockage. Retourne "
"true si\n"
"         *       le processus a été ajouté, false sinon.\n"
"         */\n"
"        public boolean addProcess(Process p)\n"
"        {\n"
"            if (proc == null && p.getRequiredStorage() == 0) {\n"
"                proc = p;\n"
"                return true;\n"
"            } else {\n"
"                return false;\n"
"            }\n"
"        }\n"
"\n"
"        /**\n"
"         * @pre p != null\n"
"         * @post le processus p a été retiré de cet ordinateur, s'il s'agit "
"bien du\n"
"         *       processus présent. Retourne true si le processus a été "
"supprimé,\n"
"         *       false sinon.\n"
"         */\n"
"        public boolean removeProcess(Process p)\n"
"\n"
"             QUESTION 1\n"
"\n"
"\n"
"        /**\n"
"         * @pre -\n"
"         * @post Tous les processus de cet ordinateur ont été retirés. "
"Retire proc\n"
"         *       s'il est actif.\n"
"         */\n"
"        public void removeAllProcesses()\n"
"        {\n"
"            proc = null;\n"
"        }\n"
"\n"
"        /**\n"
"         * @pre -\n"
"         * @post Retourne la liste des processus de cet ordinateur sous "
"forme de texte,\n"
"         *       avec une ligne par processus, chaque ligne comprenant le "
"nom du processus\n"
"         *       et sa taille de stockage, séparés par un espace, et se "
"termine par\n"
"         *       un passage à la ligne.  Par exemple:\n"
"         *\n"
"         *       process1 0\n"
"         *       bigprocess 200\n"
"         *       smallprocess 20\n"
"         */\n"
"        public String getState() {\n"
"            if (proc != null) {\n"
"                return proc.getDescr() + \"\\n\";\n"
"            } else {\n"
"                return \"\";\n"
"            }\n"
"        }\n"
"    }\n"
"\n"
"Process.java\n"
"-----------------------------\n"
"\n"
".. code-block:: java\n"
"\n"
"             QUESTION 3\n"
"\n"
"\n"
"\n"
"UnavailableException.java\n"
"---------------------------------------\n"
"\n"
".. code-block:: java\n"
"\n"
"    /**\n"
"     * Une exception utilisée lorsqu'une opération ne peut être effectuée\n"
"     * par manque de ressources.\n"
"     *\n"
"     * @author O. Bonaventure, Ch. Pecheur\n"
"     * @version Juin 2011\n"
"     */\n"
"    public class UnavailableException extends Exception\n"
"    {\n"
"        public UnavailableException()\n"
"        {\n"
"            super();\n"
"        }\n"
"    }\n"
"\n"
"FullComputer.java\n"
"-----------------------------------\n"
"\n"
".. code-block:: java\n"
"\n"
"    /**\n"
"     * Un ordinateur avec capacité de stockage limitée et nombre de "
"processus limité.\n"
"     *\n"
"     * @author O. Bonaventure, Ch. Pecheur\n"
"     * @version Juin 2011\n"
"     */\n"
"    public class FullComputer extends BasicComputer\n"
"    {\n"
"        /**\n"
"         * Les processus présents sur cet ordinateur.  Les processus sont "
"dans\n"
"         * procs[0] .. procs[count-1], et procs[i] == null pour i >= count.\n"
"         */\n"
"        private Process[] procs;\n"
"        private int count;         // nombre de processus présents\n"
"        private int storage;       // capacité de stockage totale\n"
"        private int availStorage;  // capacit?é de stockage restante\n"
"\n"
"        /**\n"
"         * @pre n > 0, name != null, storage >= 0\n"
"         * @post Construit un FullComputer de nom name, supportant n "
"processus\n"
"         *       et avec une capacité de stockage égale à storage\n"
"         */\n"
"\n"
"             QUESTION 2\n"
"\n"
"        /**\n"
"         * @pre  p != null, p ne se trouve pas déjà sur cet ordinateur\n"
"         * @post le processus p a été ajouté à cet ordinateur, si (1) le "
"nombre de\n"
"         *       processus maximal n'est pas atteint et (2) la capacité de "
"stockage\n"
"         *       nécessaire pour p est disponible. Retourne true si le "
"processus a\n"
"         *       été ajouté, false sinon.\n"
"         */\n"
"        public boolean addProcess(Process p)\n"
"\n"
"             QUESTION 4\n"
"\n"
"\n"
"         RESTE DU CODE NON FOURNI\n"
"\n"
"    }\n"
"\n"
"Cluster.java\n"
"-----------------------------\n"
"\n"
".. code-block:: java\n"
"\n"
"    /**\n"
"     * Une grappe (cluster) d'ordinateurs formant une ressource commune "
"pour\n"
"     * l'exécution de processus.  Les ordinateurs du cluster sont gérés "
"comme\n"
"     * une liste circulaire, de telle manière que les processus soient "
"distribués\n"
"     * à tour de rôle à chaque ordinateur, dans la limite de leurs "
"ressources disponibles.\n"
"     * La tête de la liste correspond prochain ordinateur à recevoir un "
"nouveau processus,\n"
"     * pour autant qu'il ait les ressources nécessaires.\n"
"     *\n"
"     * @author O. Bonaventure, Ch. Pecheur\n"
"     * @version Juin 2011\n"
"     */\n"
"\n"
"    import java.io.*;\n"
"\n"
"    public class Cluster\n"
"    {\n"
"        // classe interne: un noeud de la liste circulaire des ordinateurs "
"du cluster\n"
"        private class ListNode {\n"
"            ListNode next;\n"
"            ComputerIF elem;\n"
"        }\n"
"\n"
"        /**\n"
"         * La tête courante de la liste des ordinateurs. Les noeuds suivants "
"sont\n"
"         * chaînés de manière circulaire: la chaîne finit toujours par "
"revenir à\n"
"         * current.\n"
"         */\n"
"        private ListNode current;\n"
"        private int count; // nombre d'ordinateurs dans le cluster\n"
"\n"
"        /**\n"
"         * Constructeur\n"
"         */\n"
"        public Cluster()\n"
"        {\n"
"            count = 0;\n"
"            current = null;\n"
"        }\n"
"\n"
"        /**\n"
"         * @pre p != null, p ne se trouve pas déjà sur un ordinateur du "
"cluster.\n"
"         * @post Le processus p a été ajouté au premier ordinateur, à partir "
"de la\n"
"         *       tête de la liste, disposant des ressources nécessaires. La "
"nouvelle\n"
"         *       tête de liste est le noeud qui suit celui de l'ordinateur "
"où p a\n"
"         *       été ajouté. Si aucun ordinateur ne dispose de ressources\n"
"         *       suffisantes, la tête de liste est inchangée et une\n"
"         *       UnavailableException est lancée.\n"
"         */\n"
"\n"
"             QUESTION 5\n"
"\n"
"    \f    /**\n"
"         * @pre p != null\n"
"         * @post Le processus p a été retiré du premier ordinateur du "
"cluster\n"
"         *       sur lequel il se trouvait, à partir de la tête de la "
"liste.\n"
"         *       Si p n'est pas trouvé, lance UnavailableException.\n"
"         */\n"
"        public void removeProcess(Process p) throws UnavailableException\n"
"\n"
"             CODE NON FOURNI\n"
"\n"
"\n"
"        /**\n"
"         * @pre -\n"
"         * @post Tous les processus de tous les ordinateurs ont été "
"retirés.\n"
"         */\n"
"        public void removeAllProcesses()\n"
"\n"
"             CODE NON FOURNI\n"
"\n"
"        /**\n"
"         * @pre  comp != null, comp ne fait pas déjà partie du cluster.\n"
"         * @post L'ordinateur comp est ajouté à la liste des ordinateurs.\n"
"         */\n"
"        public void addComputer(ComputerIF comp)\n"
"        {\n"
"            ListNode l = new ListNode();\n"
"            l.elem = comp;\n"
"           if(count == 0)\n"
"            {\n"
"               l.next = l;\n"
"               current = l;\n"
"            }\n"
"            else\n"
"            {\n"
"                l.next = current.next;\n"
"                current.next = l;\n"
"            }\n"
"            count++;\n"
"        }\n"
"\n"
"        /**\n"
"         * @pre comp != null\n"
"         * @post L'ordinateur comp a été retiré du cluster, s'il s'y "
"trouvait. Si\n"
"         *       comp est en tête de liste, la tête de liste passe au noeud "
"suivant,\n"
"         *       sinon elle est inchangée. Retourne true si comp a été "
"retiré, false\n"
"         *       sinon.\n"
"         */\n"
"\n"
"             QUESTION 6\n"
"\n"
"        /**\n"
"         * @pre filename est un nom de fichier\n"
"         * @post Le fichier filename contient l'état du cluster sous forme "
"de texte.\n"
"         *       Pour chaque processus de chaque ordinateur du cluster, le "
"fichier\n"
"         *       contient une ligne composée du nom et de la capacité "
"demandée,\n"
"         *       séparés par un espace. Par exemple :\n"
"         *\n"
"         *       process1 0\n"
"         *       bigprocess 200\n"
"         *       smallprocess 20\n"
"         *\n"
"         *       Le nom des ordinateurs sur lesquels se trouvent les "
"processus n'est\n"
"         *       pas sauvegardé. Arrête le programme si une erreur d'I/O se "
"produit.\n"
"         */\n"
"        public void saveState(String filename)\n"
"\n"
"             CODE NON FOURNI\n"
"\n"
"\n"
"        /**\n"
"         * @pre filename le nom d'un fichier sauvegardé par saveState\n"
"         * @post Retire tous les processus présents dans le cluster, puis "
"ajoute au\n"
"         *       cluster les processus dont les noms et capacités sont "
"donnés dans\n"
"         *       le fichier, selon le format généré par saveState.  Arrête "
"le\n"
"         *       programme si une erreur d'I/O se produit ou si la capacité "
"du\n"
"         *       cluster est insuffisante.\n"
"         */\n"
"        public void loadState(String fileName)\n"
"\n"
"             QUESTION 7\n"
"\n"
"    }\n"
"\n"
"\n"
"\n"
msgstr ""

#. name
#: m12_examj2011enonce_online/task.yaml
msgid "Examen Juin 2011 online : Enoncé"
msgstr ""

#. name, q1, header
#: m12_examj2011enonce_online/task.yaml
msgid "**Ne rien soumettre ici !**"
msgstr ""

#. context
#: m12_examj2011q1_online/task.yaml
msgid ""
"Prenez connaissance de l'énoncé de l'`examen de juin 2011`__.\n"
"\n"
".. _juin2011:  https://inginious.info.ucl.ac.be/course/LSINF1101/"
"m12_examj2011enonce_online\n"
"\n"
"__ juin2011_\n"
"\n"
"Question 1 : Implémentez la méthode ``removeProcess`` de la classe "
"``BasicComputer``, dont la signature est ci-dessous :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /**\n"
"     * @pre p != null\n"
"     * @post le processus p a été retiré de cet ordinateur, s'il\n"
"     *         s'agit bien du processus présent. Retourne true si\n"
"     *         le processus a été supprimé, false sinon.\n"
"     */\n"
"    public boolean removeProcess(Process p)\n"
"    {\n"
"        /*** VOTRE REPONSE ***/\n"
"    }"
msgstr ""

#. name
#: m12_examj2011q1_online/task.yaml
msgid "Examen Juin 2011 online : Question 1"
msgstr ""

#. name, q1, name
#: m12_examj2011q1_online/task.yaml mX12_examj2011q1/task.yaml
msgid "Le corps de la méthode removeProcess"
msgstr ""

#. name, q1, header
#: m12_examj2011q1_online/task.yaml
msgid ""
"Veillez à n'implémenter que le corps de la méthode, ne recopiez pas sa "
"signature."
msgstr ""

#. name, zmontest, name
#: m12_examj2011q1_online/task.yaml m12_examj2011q2_online/task.yaml
#: m12_examj2011q3_online/task.yaml m12_examj2011q4_online/task.yaml
#: m12_examj2011q5_online/task.yaml m12_examj2011q6_online/task.yaml
#: m12_examj2011q7_online/task.yaml
msgid "Fonction de test optionnelle"
msgstr ""

#. name, zmontest, header
#: m12_examj2011q1_online/task.yaml
msgid ""
"Insérez votre code de test optionnel ci-dessous. Vous pouvez utiliser "
"``System.out.println`` dans cette méthode pour débugger votre programme.  "
"Votre code sera exécuté dans une méthode ``montest``:\n"
"\n"
".. code-block:: java\n"
"\n"
"    public static void montest() { /* VOTRE CODE */ }\n"
"\n"
"Attention, toute erreur dans ce code peut empêcher la bonne évaluation de "
"votre réponse.  Vous *devez* effacer ce code de test pour finaliser votre "
"soumission.\n"
"\n"
msgstr ""

#. author
#: m12_examj2011q2_online/task.yaml mX12_examj2011q2/task.yaml
msgid ""
"Munyabarenzi Clémentine Zaninka (ressource : sources examen LFSAB1041 juin "
"2011)"
msgstr ""

#. context
#: m12_examj2011q2_online/task.yaml
msgid ""
"Prenez connaissance de l'énoncé de l'`examen de juin 2011`__.\n"
"\n"
".. _juin2011:  https://inginious.info.ucl.ac.be/course/LSINF1101/"
"m12_examj2011enonce_online\n"
"\n"
"__ juin2011_\n"
"\n"
"Question 2 : Écrivez complètement le constructeur de la classe "
"``FullComputer``. Ce constructeur prend dans l'ordre les arguments "
"suivants : le nom, le nombre de processus à supporter, la capacité de "
"stockage.\n"
"Sa spécification est la suivante :\n"
"\n"
".. code-block:: java\n"
"\n"
"   /**\n"
"    * @pre n > 0, name != null, storage >= 0\n"
"    * @post Construit un FullComputer de nom name, supportant n processus\n"
"    * et avec une capacité de stockage égale à storage\n"
"    */\n"
"\n"
"    /*** VOTRE REPONSE ***/\n"
msgstr ""

#. name
#: m12_examj2011q2_online/task.yaml
msgid "Examen Juin 2011 online : Question 2"
msgstr ""

#. name, q1, name
#: m12_examj2011q2_online/task.yaml mX12_examj2011q2/task.yaml
msgid "Constructeur de la Classe FullComputer"
msgstr ""

#. name, q1, header
#: m12_examj2011q2_online/task.yaml
msgid "Veillez à implémenter la signature et le corps du constructeur."
msgstr ""

#. name, zmontest, header
#: m12_examj2011q2_online/task.yaml m12_examj2011q3_online/task.yaml
#: m12_examj2011q4_online/task.yaml m12_examj2011q5_online/task.yaml
#: m12_examj2011q6_online/task.yaml m12_examj2011q7_online/task.yaml
msgid ""
"Insérez votre code de test optionnel ci-dessous. Vous pouvez utiliser "
"``System.out.println`` dans cette méthode pour débugger votre programme.  "
"Votre code sera exécuté dans une méthode ``montest``:\n"
"\n"
".. code-block:: java\n"
"\n"
"    public static void montest() { /* VOTRE CODE */ }\n"
"\n"
"Attention, toute erreur dans ce code peut empêcher la bonne évaluation de "
"votre réponse.  Vous *devez* effacer ce code de test pour finaliser votre "
"soumission.\n"
msgstr ""

#. context
#: m12_examj2011q3_online/task.yaml
msgid ""
"Prenez connaissance de l'énoncé de l'`examen de juin 2011`__.\n"
"\n"
".. _juin2011:  https://inginious.info.ucl.ac.be/course/LSINF1101/"
"m12_examj2011enonce_online\n"
"\n"
"__ juin2011_\n"
"\n"
"Question 3 : Ecrivez complètement (y compris les spécifications) le corps de "
"la classe ``Process`` qui représente un processus. Chaque processus a un nom "
"(``String``), une capacité de stockage requise (``int``) et un identifiant "
"de processus ou PID (``int``). Les PIDs sont attribus squentiellement à la "
"cration de chaque nouveau processus (1 pour le premier, 2 pour le deuxième, "
"etc.) La classe doit définir :\n"
"\n"
"-    Un constructeur avec le nom et la capacité comme paramètres, dans cet "
"ordre,\n"
"-    Des méthodes ``getName``, ``getRequiredStorage`` et ``getPid`` "
"retournant respectivement le nom, la capacité et le PID,\n"
"-    Une méthode ``toString`` retournant une chaîne de caractères comprenant "
"le nom du processus et la capacité de stockage nécessaire, séparés par un "
"espace,\n"
"-    Toutes les variables et méthodes complémentaires nécessaires à votre "
"implémentation.\n"
"\n"
"Il n'est pas nécessaire de re-définir la méthode ``equals``.\n"
"\n"
".. code-block:: java\n"
"\n"
"   /**\n"
"     * Un processus, avec un nom (String), une capacité de stockage\n"
"     * requise (int) et un identifiant de processus, ou PID (int).\n"
"     * Les PIDs sont attribués séquentiellement à la création de chaque\n"
"     * nouveau processus (1 pour le premier, 2 pour le deuxième, etc.).\n"
"     * Le premier argument du constructeur doit être le nom du processus.\n"
"     */\n"
"    public class Process\n"
"    {\n"
"        /*** VOTRE REPONSE ***/\n"
"    }"
msgstr ""

#. name
#: m12_examj2011q3_online/task.yaml
msgid "Examen Juin 2011 online : Question 3"
msgstr ""

#. name, q1, name
#: m12_examj2011q3_online/task.yaml mX12_examj2011q3/task.yaml
msgid "La classe Process"
msgstr ""

#. name, q1, header
#: m12_examj2011q3_online/task.yaml
msgid ""
"Veillez à n'implémenter que le corps, ne recopiez pas ``public class "
"Process{...}``. Respectez bien le nom et les paramètres demandés des "
"méthodes et constructeurs."
msgstr ""

#. author
#: m12_examj2011q4_online/task.yaml m12_examj2011q6_online/task.yaml
#: mX12_examj2011q4/task.yaml mX12_examj2011q6/task.yaml
msgid ""
"Munyabarenzi Clémentine Zaninka (ressource : sources examen LFSAB1401 juin "
"2011)"
msgstr ""

#. context
#: m12_examj2011q4_online/task.yaml
msgid ""
"Prenez connaissance de l'énoncé de l'`examen de juin 2011`__.\n"
"\n"
".. _juin2011:  https://inginious.info.ucl.ac.be/course/LSINF1101/"
"m12_examj2011enonce_online\n"
"__ juin2011_\n"
"\n"
"Question 4 : Ecrivez le corps de la méthode ``addProcess`` de la classe "
"``FullComputer``. Pensez à utiliser les méthodes de la classe ``Process`` "
"définies à la question 3. :\n"
"\n"
".. code-block:: java\n"
"\n"
"   /**\n"
"    * @pre p != null, p ne se trouve pas déjà sur cet ordinateur\n"
"    * @post le processus p a été ajouté à cet ordinateur, si (1)le\n"
"    *       nombre de processus maximal n'est pas atteint et (2) la capacité "
"de\n"
"    *       stockage nécessaire pour p est disponible. Retourne true si le\n"
"    *       processus a été ajouté, false sinon.\n"
"    */\n"
"       public boolean addProcess(Process p)\n"
"    {\n"
"        /*** VOTRE REPONSE ***/\n"
"    }"
msgstr ""

#. name
#: m12_examj2011q4_online/task.yaml
msgid "Examen juin 2011 online : Question 4"
msgstr ""

#. name, q1, name
#: m12_examj2011q4_online/task.yaml mX12_examj2011q4/task.yaml
msgid "Corps de la méthode addProcess"
msgstr ""

#. name, q1, header
#: m12_examj2011q4_online/task.yaml mX12_examj2011q4/task.yaml
msgid ""
"Veillez à n'implémenter que le corps de la méthode, ne réécrivez pas la "
"signature."
msgstr ""

#. context
#: m12_examj2011q5_online/task.yaml
msgid ""
"Prenez connaissance de l'énoncé de l'`examen de juin 2011`__.\n"
"\n"
".. _juin2011:  https://inginious.info.ucl.ac.be/course/LSINF1101/examj2011q1/"
"jun11.pdf\n"
"\n"
"__ juin2011_\n"
"\n"
"Question 5 : Implémentez la méthode ``addProcess()`` de la classe "
"``Cluster``, selon la spécification donnée.  Aidez-vous de l'exemple "
"présenté dans l'énoncé.  Indice: vous pouvez utiliser la valeur de "
"``count``.\n"
"\n"
".. code-block:: java\n"
"\n"
"    /**\n"
"     * @pre p != null, p ne se trouve pas déjà sur un ordinateur du\n"
"     *        cluster.\n"
"     * @post Le processus p a été ajouté au premier ordinateur, à partir\n"
"     *         de la tête de la liste, disposant des ressources "
"nécessaires.\n"
"     *         La nouvelle tête de liste est le noeud qui suit celui de\n"
"     *         l'ordinateur où p a été ajouté. Si aucun ordinateur ne\n"
"     *         dispose de ressources suffisantes, la tête de liste est\n"
"     *         inchangée et une UnavailableException est lancée.\n"
"     */\n"
"    public void addProcess(Process p) throws UnavailableException {\n"
"        /*** VOTRE REPONSE ***/\n"
"    }"
msgstr ""

#. name
#: m12_examj2011q5_online/task.yaml
msgid "Examen Juin 2011 online : Question 5"
msgstr ""

#. name, q1, name
#: m12_examj2011q5_online/task.yaml
msgid "Le corps de la méthode addProcess"
msgstr ""

#. name, q1, header
#: m12_examj2011q5_online/task.yaml
msgid "Veillez à n'écrire que le corps, ne recopiez pas sa signature. "
msgstr ""

#. context
#: m12_examj2011q6_online/task.yaml
msgid ""
"Prenez connaissance de l'énoncé de l'`examen de juin 2011`__.\n"
"\n"
".. _juin2011:  https://inginious.info.ucl.ac.be/course/LSINF1101/examj2011q1/"
"jun11.pdf\n"
"\n"
"__ juin2011_\n"
"\n"
"Question 6 : Ecrivez complètement la méthode ``removeComputer`` de la classe "
"``Cluster`` selon la spécification donnée. Indice: vous pouvez utiliser la "
"valeur de ``count``.\n"
"\n"
".. code-block:: java\n"
"\n"
"   /**\n"
"    * @pre comp != null\n"
"    * @post L'ordinateur comp a été retiré du cluster, s'il s'y trouvait.\n"
"    *        Si comp est en tête de liste, la tête de liste passe au noeud "
"suivant,\n"
"    *          sinon elle est inchangée.\n"
"    *        Retourne true si comp a été retiré, false sinon.\n"
"    */\n"
"\n"
"    /*** VOTRE REPONSE ***/"
msgstr ""

#. name
#: m12_examj2011q6_online/task.yaml
msgid "Examen juin 2011 online : Question 6"
msgstr ""

#. name, q1, name
#: m12_examj2011q6_online/task.yaml mX12_examj2011q6/task.yaml
msgid "Méthode removeComputer"
msgstr ""

#. name, q1, header
#: m12_examj2011q6_online/task.yaml
msgid "Veillez à donner la signature et le corps de la méthode."
msgstr ""

#. context
#: m12_examj2011q7_online/task.yaml
msgid ""
"Prenez connaissance de l'énoncé de l'`examen de juin 2011`__.\n"
"\n"
".. _juin2011:  https://inginious.info.ucl.ac.be/course/LSINF1101/examj2011q1/"
"jun11.pdf\n"
"\n"
"__ juin2011_\n"
"\n"
"Question 7 : Ecrivez le corps de la méthode ``loadState`` de la classe "
"``Cluster`` selon la spécification donnée. Notez que la pré-condition "
"garantit le format du contenu du fichier; pas besoin donc de traiter les "
"erreurs de format du texte.\n"
"\n"
".. code-block:: java\n"
"\n"
"      /**\n"
"     * @pre     filename le nom d'un fichier sauvegardé par saveState\n"
"     * @post    Retire tous les processus présents dans le cluster, puis\n"
"     *            ajoute au cluster les processus dont les noms et "
"capacités\n"
"     *            sont donnés dans le fichier, selon le format généré par\n"
"     *            saveState.  Arrête le programme si une erreur d'I/O se\n"
"     *            produit ou si la capacité du cluster est insuffisante.\n"
"     */\n"
"    public void loadState(String fileName){\n"
"        /*** VOTRE REPONSE ***/\n"
"    }"
msgstr ""

#. name
#: m12_examj2011q7_online/task.yaml
msgid "Examen Juin 2011 online : Question 7"
msgstr ""

#. name, q1, name
#: m12_examj2011q7_online/task.yaml mX12_examj2011q7/task.yaml
msgid "Le corps de la méthode loadState"
msgstr ""

#. name, q1, header
#: m12_examj2011q7_online/task.yaml
msgid "Veillez à n'implémenter que le corps, ne recopiez pas la signature."
msgstr ""

#. context
#: mX12_examj2011q1/task.yaml
msgid ""
"Prenez connaissance de l'énoncé de l'`examen de juin 2011`__.\n"
"\n"
".. _juin2011:  https://inginious.info.ucl.ac.be/course/LSINF1101/examj2011q1/"
"jun11.pdf\n"
"\n"
"__ juin2011_\n"
"\n"
"Répondez ici à la Question 1 : Implémentez la méthode ``removeProcess`` de "
"la classe ``BasicComputer``, dont la signature est ci-dessous :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /**\n"
"     * @pre p != null\n"
"     * @post le processus p a été retiré de cet ordinateur, s'il\n"
"     *         s'agit bien du processus présent. Retourne true si\n"
"     *         le processus a été supprimé, false sinon.\n"
"     */\n"
"    public boolean removeProcess(Process p)\n"
"    {\n"
"        // À implémenter\n"
"    }\n"
"\n"
"\n"
"**Vu que l'examen est sur papier, il est préférable que vous rédigiez la "
"réponse sur une feuille de papier et que vous la recopiiez ici une fois que "
"vous êtes sûr de vous. INGInious vous permettra de vérifier si votre code "
"est correct mais n'oubliez pas qu'à l'examen, vous n'aurez pas plusieurs "
"essais. Il est donc important de s'entraîner à rédiger du code sur papier "
"pour se mettre en situation d'examen et évaluer votre temps pour répondre."
"**\n"
"\n"
"**Souvenez-vous qu'une réponse correcte sur INGInious ne correspond pas "
"d'office à un 20 à l'examen (la clarté, la simplicité du code, les "
"spécifications sont aussi des critères importants non vérifiés par "
"INGInious).**"
msgstr ""

#. name
#: mX12_examj2011q1/task.yaml
msgid "Examen Juin 2011: Question 1"
msgstr ""

#. name, q1, header
#: mX12_examj2011q1/task.yaml
msgid ""
"Implémentez ici le corps de la méthode removeProcess. Veillez à "
"n'implémenter que le corps de la méthode, ne recopiez pas sa signature. "
"Pensez à respecter scrupuleusement les spécifications."
msgstr ""

#. context
#: mX12_examj2011q2/task.yaml
msgid ""
"Prenez connaissance de l'énoncé de l'`examen de juin 2011`__.\n"
"\n"
".. _juin2011:  https://inginious.info.ucl.ac.be/course/LSINF1101/examj2011q1/"
"jun11.pdf\n"
"\n"
"__ juin2011_\n"
"\n"
"Répondez ici à la Question 2 : Écrivez complètement le constructeur de la "
"classe ``FullComputer``  dont la spécification est la suivante :\n"
"\n"
".. code-block:: java\n"
"\n"
"   /**\n"
"    * @pre n > 0, name != null, storage >= 0\n"
"    * @post Construit un FullComputer de nom name, supportant n processus\n"
"    * et avec une capacité de stockage égale à storage\n"
"    */\n"
"\n"
"    // À implémenter\n"
"\n"
"Ce constructeur prend dans l'ordre les arguments suivants : le nom, le "
"nombre de processus à suporter, la capacité de stockage.\n"
"\n"
"**Comme l'examen est sur papier, il est préférable que vous rédigiez la "
"réponse sur une feuille de papier et que vous la recopiiez ici une fois que "
"vous êtes sûr de vous. INGInious vous permettra de vérifier si votre code "
"est correct mais n'oubliez pas qu'à l'examen, vous n'aurez pas plusieurs "
"essais. Il est donc important de s'entraîner à rédiger du code sur papier "
"pour se mettre en situation d'examen et évaluer votre temps pour répondre."
"**\n"
"\n"
"**Souvenez-vous qu'une réponse correcte sur INGInious ne correspond pas "
"d'office à un 20 à l'examen (la clarté, la simplicité du code, les "
"spécifications sont aussi des critères importants non vérifiés par "
"INGInious).**"
msgstr ""

#. name
#: mX12_examj2011q2/task.yaml
msgid "Examen Juin 2011: Question 2"
msgstr ""

#. context
#: mX12_examj2011q3/task.yaml
msgid ""
"Prenez connaissance de l'énoncé de l'`examen de juin 2011`__.\n"
"\n"
".. _juin2011:  https://inginious.info.ucl.ac.be/course/LSINF1101/examj2011q1/"
"jun11.pdf\n"
"\n"
"__ juin2011_\n"
"\n"
"Répondez ici à la Question 3 : Implémentez la classe ``Process`` ci-"
"dessous :\n"
"\n"
".. code-block:: java\n"
"\n"
"   /**\n"
"     * Un processus, avec un nom (String), une capacité de stockage\n"
"     * requise (int) et un identifiant de processus, ou PID (int).\n"
"     * Les PIDs sont attribués séquentiellement à la création de chaque\n"
"     * nouveau processus (1 pour le premier, 2 pour le deuxième, etc.).\n"
"     * Le premier argument du constructeur doit être le nom du processus.\n"
"     */\n"
"    public class Process\n"
"    {\n"
"        // À implémenter\n"
"    }\n"
"\n"
"N'oubliez pas d'implémenter les méthodes demandées dans la question.\n"
"\n"
"**Comme l'examen est sur papier, il est préférable que vous rédigiez la "
"réponse sur une feuille de papier et que vous la recopiiez ici une fois que "
"vous êtes sûr de vous. INGInious vous permettra de vérifier si votre code "
"est correct mais n'oubliez pas qu'à l'examen, vous n'aurez pas plusieurs "
"essais. Il est donc important de s'entraîner à rédiger du code sur papier "
"pour se mettre en situation d'examen et évaluer votre temps pour répondre."
"**\n"
"\n"
"**Souvenez-vous qu'une réponse correcte sur INGInious ne correspond pas "
"d'office à un 20 à l'examen (la clarté, la simplicité du code, les "
"spécifications sont aussi des critères importants non vérifiés par "
"INGInious).**"
msgstr ""

#. name
#: mX12_examj2011q3/task.yaml
msgid "Examen Juin 2011: Question 3"
msgstr ""

#. name, q1, header
#: mX12_examj2011q3/task.yaml
msgid ""
"Implémentez ici le corps de la classe Process. Veillez à n'implémenter que "
"le corps, ne recopiez pas \"public class Process{...}\". Vérifiez bien la "
"description de la classe et ne vous trompez pas dans le nom des méthodes."
msgstr ""

#. context
#: mX12_examj2011q4/task.yaml
msgid ""
"Prenez connaissance de l'énoncé de l'`examen de juin 2011`__.\n"
"\n"
".. _juin2011:  https://inginious.info.ucl.ac.be/course/LSINF1101/examj2011q1/"
"jun11.pdf\n"
"\n"
"__ juin2011_\n"
"\n"
"Répondez ici à la Question 4 : Ecrivez le corps de la méthode ``addProcess`` "
"de la classe ``FullComputer``. Pensez à utiliser les méthodes de la classe "
"``Process`` définies à la question 3. :\n"
"\n"
".. code-block:: java\n"
"\n"
"   /**\n"
"    * @pre p != null, p ne se trouve pas déjà sur cet ordinateur\n"
"    * @post le processus p a été ajouté à cet ordinateur, si (1)le\n"
"    * nombre de processus maximal n'est pas atteint et (2) la capacité de\n"
"    * stockage nécessaire pour p est disponible. Retourne true si le\n"
"    * processus a été ajouté, false sinon.\n"
"    *\n"
"    */\n"
"    public boolean addProcess(Process p)\n"
"\n"
"    // À implémenter\n"
"\n"
"\n"
"**Comme l'examen est sur papier, il est préférable que vous rédigiez la "
"réponse sur une feuille de papier et que vous la recopiiez ici une fois que "
"vous êtes sûr de vous. INGInious vous permettra de vérifier si votre code "
"est correct mais n'oubliez pas qu'à l'examen, vous n'aurez pas plusieurs "
"essais. Il est donc important de s'entraîner à rédiger du code sur papier "
"pour se mettre en situation d'examen et évaluer votre temps pour répondre."
"**\n"
"\n"
"**Souvenez-vous qu'une réponse correcte sur INGInious ne correspond pas "
"d'office à un 20 à l'examen (la clarté, la simplicité du code, les "
"spécifications sont aussi des critères importants non vérifiés par "
"INGInious).**"
msgstr ""

#. name
#: mX12_examj2011q4/task.yaml
msgid "Examen juin 2011: Question 4"
msgstr ""

#. context
#: mX12_examj2011q5/task.yaml
msgid ""
"Prenez connaissance de l'énoncé de l'`examen de juin 2011`__.\n"
"\n"
".. _juin2011:  https://inginious.info.ucl.ac.be/course/LSINF1101/examj2011q1/"
"jun11.pdf\n"
"\n"
"__ juin2011_\n"
"\n"
"Répondez ici à la Question 5 : Implémentez la méthode ``addProcess()`` de la "
"classe ``Cluster``.\n"
"\n"
"Voici sa signature :\n"
"\n"
".. code-block:: java\n"
"\n"
"    /**\n"
"     * @pre p != null, p ne se trouve pas déjà sur un ordinateur du\n"
"     *        cluster.\n"
"     * @post Le processus p a été ajouté au premier ordinateur, à partir\n"
"     *         de la tête de la liste, disposant des ressources "
"nécessaires.\n"
"     *         La nouvelle tête de liste est le noeud qui suit celui de\n"
"     *         l'ordinateur où p a été ajouté. Si aucun ordinateur ne\n"
"     *         dispose de ressources suffisantes, la tête de liste est\n"
"     *         inchangée et une UnavailableException est lancée.\n"
"     */\n"
"    public void addProcess(Process p) throws UnavailableException{\n"
"        // À implémenter\n"
"    }\n"
"\n"
"**Comme l'examen est sur papier, il est préférable que vous rédigiez la "
"réponse sur une feuille de papier et que vous la recopiiez ici une fois que "
"vous êtes sûr de vous. INGInious vous permettra de vérifier si votre code "
"est correct mais n'oubliez pas qu'à l'examen, vous n'aurez pas plusieurs "
"essais. Il est donc important de s'entraîner à rédiger du code sur papier "
"pour se mettre en situation d'examen et évaluer votre temps pour répondre."
"**\n"
"\n"
"**Souvenez-vous qu'une réponse correcte sur INGInious ne correspond pas "
"d'office à un 20 à l'examen (la clarté, la simplicité du code, les "
"spécifications sont aussi des critères importants non vérifiés par "
"INGInious).**"
msgstr ""

#. name
#: mX12_examj2011q5/task.yaml
msgid "Examen Juin 2011: Question 5"
msgstr ""

#. name, q1, name
#: mX12_examj2011q5/task.yaml
msgid "Le corps de la méthode addProcess()"
msgstr ""

#. name, q1, header
#: mX12_examj2011q5/task.yaml
msgid ""
"Écrivez ici le corps de la méthode addProcess de la classe Cluster. Veillez "
"à n'écrire que le corps, ne recopiez pas sa signature. Vérifiez bien les "
"spécifications."
msgstr ""

#. context
#: mX12_examj2011q6/task.yaml
msgid ""
"Prenez connaissance de l'énoncé de l'`examen de juin 2011`__.\n"
"\n"
".. _juin2011:  https://inginious.info.ucl.ac.be/course/LSINF1101/examj2011q1/"
"jun11.pdf\n"
"\n"
"__ juin2011_\n"
"\n"
"Répondez ici à la Question 6 : Ecrivez complètement la méthode "
"``removeComputer`` de la classe ``Cluster`` dont la spécification et la "
"signature sont ci-desosus. Indice: vous pouvez utiliser la valeur de "
"``count``.\n"
"\n"
".. code-block:: java\n"
"\n"
"   /**\n"
"    * @pr e comp != null\n"
"    * @po st L'ordinateur comp a été retiré du cluster, s'il s'y\n"
"    * trouvait. Si comp est en tête de liste, la tête de liste passe au\n"
"    * noeud suivant, sinon elle est inchangée. Retourne true si comp a\n"
"    * été retiré, false sinon.\n"
"    */\n"
"\n"
"    // À implémenter\n"
"\n"
"\n"
"**Comme l'examen est sur papier, il est préférable que vous rédigiez la "
"réponse sur une feuille de papier et que vous la recopiiez ici une fois que "
"vous êtes sûr de vous. INGInious vous permettra de vérifier si votre code "
"est correct mais n'oubliez pas qu'à l'examen, vous n'aurez pas plusieurs "
"essais. Il est donc important de s'entraîner à rédiger du code sur papier "
"pour se mettre en situation d'examen et évaluer votre temps pour répondre."
"**\n"
"\n"
"**Souvenez-vous qu'une réponse correcte sur INGInious ne correspond pas "
"d'office à un 20 à l'examen (la clarté, la simplicité du code, les "
"spécifications sont aussi des critères importants non vérifiés par "
"INGInious).**"
msgstr ""

#. name
#: mX12_examj2011q6/task.yaml
msgid "Examen juin 2011: Question 6"
msgstr ""

#. name, q1, header
#: mX12_examj2011q6/task.yaml
msgid "Veillez à ne pas oublier d'écrire la signature de la méthode."
msgstr ""

#. context
#: mX12_examj2011q7/task.yaml
msgid ""
"Prenez connaissance de l'énoncé de l'`examen de juin 2011`__.\n"
"\n"
".. _juin2011:  https://inginious.info.ucl.ac.be/course/LSINF1101/examj2011q1/"
"jun11.pdf\n"
"\n"
"__ juin2011_\n"
"\n"
"Répondez ici à la Question 7 : Implémentez la méthode ``loadState()`` de la "
"classe ``Cluster``.\n"
"\n"
"Voici sa signature :\n"
"\n"
".. code-block:: java\n"
"\n"
"      /**\n"
"     * @pre     filename le nom d'un fichier sauvegardé par saveState\n"
"     * @post    Retire tous les processus présents dans le cluster, puis\n"
"     *            ajoute au cluster les processus dont les noms et "
"capacités\n"
"     *            sont donnés dans le fichier, selon le format généré par\n"
"     *            saveState.  Arrête le programme si une erreur d'I/O se\n"
"     *            produit ou si la capacité du cluster est insuffisante.\n"
"     *            Les processus sont répartis équitablement entre les\n"
"     *            différents ordinateurs du cluster.\n"
"     */\n"
"    public void loadState(String fileName){\n"
"        // À implémenter\n"
"    }\n"
"\n"
"**Comme l'examen est sur papier, il est préférable que vous rédigiez la "
"réponse sur une feuille de papier et que vous la recopiiez ici une fois que "
"vous êtes sûr de vous. INGInious vous permettra de vérifier si votre code "
"est correct mais n'oubliez pas qu'à l'examen, vous n'aurez pas plusieurs "
"essais. Il est donc important de s'entraîner à rédiger du code sur papier "
"pour se mettre en situation d'examen et évaluer votre temps pour répondre."
"**\n"
"\n"
"**Souvenez-vous qu'une réponse correcte sur INGInious ne correspond pas "
"d'office à un 20 à l'examen (la clarté, la simplicité du code, les "
"spécifications sont aussi des critères importants non vérifiés par "
"INGInious).**"
msgstr ""

#. name
#: mX12_examj2011q7/task.yaml
msgid "Examen Juin 2011: Question 7"
msgstr ""

#. name, q1, header
#: mX12_examj2011q7/task.yaml
msgid ""
"Implémentez ici le corps de la méthode loadState. Veillez à n'implémenter "
"que le corps, ne recopiez pas la signature. Vérifiez bien les spécifications."
msgstr ""

#. context
#: mX1Q19/task.yaml
msgid ""
"Créer un programme permettant de calculer des fonctions mathématiques. Vous "
"ne pouvez pas utiliser les fonctions mathématiques natives de Java. "
msgstr ""

#. name
#: mX1Q19/task.yaml
msgid "Mission 1 : Question supplémentaire : Fonctions mathématiques"
msgstr ""

#. name, q1, name
#: mX1Q19/task.yaml
msgid "Fonction abs - donne la valeur absolue d'un nombre entier"
msgstr ""

#. name, q1, header
#: mX1Q19/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    double number; // le nombre à évaluer\n"
"    double abs_number; // la valeur absolue du nombre"
msgstr ""

#. name, q2, name
#: mX1Q19/task.yaml
msgid "Fonction ceil - retourne l'entier supérieur d'un nombre"
msgstr ""

#. name, q2, header
#: mX1Q19/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    double number; // le nombre à évaluer\n"
"    int ceil_number; // l'entier supérieur du nombre"
msgstr ""

#. name, q3, name
#: mX1Q19/task.yaml
msgid "Fonction round - retourne la valeur arrondie d'un nombre"
msgstr ""

#. name, q3, header
#: mX1Q19/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    double number; // le nombre à évaluer\n"
"    int round_number; // l'entier arrondi du nombre"
msgstr ""

#. name, q4, name
#: mX1Q19/task.yaml
msgid "Fonction floor - retourne l'entier inférieur d'un nombre"
msgstr ""

#. name, q4, header
#: mX1Q19/task.yaml
msgid ""
".. code-block:: java\n"
"\n"
"    double number; // le nombre à évaluer\n"
"    int floor_number; // l'entier inférieur du nombre"
msgstr ""

#. context
#: mX2Q2/task.yaml
msgid ""
"Utilisez une boucle pour réaliser une division euclidienne! le diviseur et "
"dividende vous sont donnés, vous devez trouver le quotient et le reste.\n"
"\n"
" .. code-block:: java\n"
"\n"
"    int diviseur;\n"
"    int dividende;\n"
"\n"
"    int reste = 0;\n"
"    int quotient = 0;"
msgstr ""

#. name
#: mX2Q2/task.yaml
msgid "NON Mission 2 : Question supplémentaire : Division euclidienne"
msgstr ""

#. author
#: mX2ec2/task.yaml
msgid "Clémentine Munyabarenzi (ressource : syllabus d'exercices LSINF1101)"
msgstr ""

#. context
#: mX2ec2/task.yaml
msgid ""
"Ecrivez un programme qui permet de donner, lorsqu'elles sont réelles, les "
"solutions de l'`équation du second degré <https://fr.wikipedia.org/wiki/"
"Équation_du_second_degré>`_\n"
"\n"
".. math ::\n"
"\n"
"   ax^2+bx+c=0\n"
"\n"
"Pour cela, écrivez un programme qui demande à l'utilisateur de taper les "
"valeurs de *a*, *b* et *c* et ensuite écrit sur sa sortie standard les "
"racines si celles-ci sont réelles. Pensez aux différents cas possibles en "
"fonction des différentes valeurs respectives de *a*, *b* et *c*.\n"
"\n"
"Pour rappel, vous pouvez calculer la racine carrée du réel ``x`` en "
"utilisant ``Math.sqrt(x)``.\n"
"\n"
"Votre réponse devra compléter le code ci-dessous:\n"
"\n"
".. code-block :: java\n"
"\n"
"        System.out.print(\"Entrez la valeur du coefficient a :\");\n"
"        double a=TextIO.getlnDouble();\n"
"\n"
"        System.out.print(\"Entrez la valeur du coefficient b :\");\n"
"        double b=TextIO.getlnDouble();\n"
"\n"
"        System.out.print(\"Entrez la valeur du coefficient c :\");\n"
"        double c=TextIO.getlnDouble();\n"
msgstr ""

#. name
#: mX2ec2/task.yaml
msgid "NON Mission 2 : Exercice complémentaire 2 : Equations du second degré"
msgstr ""

#. name, q1, header
#: mX2ec2/task.yaml
msgid ""
"Une réponse affichée *doit* ressembler à ceci:\n"
"\n"
".. code-block :: java\n"
"\n"
"    0.606048584047038\n"
"    5.283827730287069"
msgstr ""

#. context
#: mX3Q8/task.yaml
msgid ""
"Ecrivez la méthode permettant de calculer le nombre de racine d'une équation "
"du second degré\n"
"On passe a,b et c en paramètre de votre méthode.\n"
"La méthode s'appelle eqsecdeg1 pour la première partie et eqsecdeg2 pour la "
"seconde."
msgstr ""

#. name
#: mX3Q8/task.yaml
msgid "NON Mission 3 : Fonctions équation du second degré"
msgstr ""

#. name, q1, name
#: mX3Q8/task.yaml mX3Q9/task.yaml
msgid "Version 1, afficher le résultat"
msgstr ""

#. name, q2, name
#: mX3Q8/task.yaml
msgid "Version 2, retourné le résultat"
msgstr ""

#. context
#: mX3Q9/task.yaml
msgid ""
"Ecrivez la méthode permettant de calculer la valeur d'une équation du second "
"degré\n"
"On passe a,b et c en paramètre de votre méthode.\n"
"La méthode s'appelle eqsecdegsol1 pour la première partie et eqsecdegsol2 "
"pour la seconde On vous donne accès à eqsecdeg2 permettant de connaître le "
"nombre de solutions . Pour la deuxième version s'il y a plus qu'une "
"solution, vous renvoyez -1"
msgstr ""

#. name
#: mX3Q9/task.yaml
msgid "NON Mission 3 : Fonctions solution d'une équation du second degré"
msgstr ""

#. name, q2, name
#: mX3Q9/task.yaml
msgid "Version 2, retourne le résultat"
msgstr ""

#. context
#: rev_qcm/task.yaml
msgid ""
"========\n"
"Revision\n"
"========\n"
msgstr ""

#. name
#: rev_qcm/task.yaml
msgid "Révisions : QCM"
msgstr ""

#. name, q1, header
#: rev_qcm/task.yaml
msgid ""
"\n"
"Les méthodes implémentées dans la  librairie standard Java sont souvent très "
"utile pour faciliter l'écriture de méthodes plus compliquées. Considérons "
"l'implémentation d'une méthode permettant de calculer le minimum entre trois "
"réels passés en argument. Une telle méthode peut s'écrire en utilisant une "
"suite d'instructions conditionnelles, mais il est aussi possible de "
"réutiliser la méthode ``Math.min`` qui retourne le minimum entre ses deux "
"arguments. Laquelle des méthodes ci-dessous est un calcul correct du minimum "
"entre trois nombres réels ?\n"
msgstr ""

#. name, q1, text
#: rev_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static double min3(double a, double b, double c) {\n"
"      double m1=Math.min(a,b);\n"
"      return Math.min(m1,c);\n"
"   }\n"
msgstr ""

#. name, q1, text
#: rev_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static double min3(double a, double b, double c) {\n"
"      double m=Math.min(b,c);\n"
"      return Math.min(a,m);\n"
"   }\n"
msgstr ""

#. name, q1, text
#: rev_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static double min3(double a, double b, double c) {\n"
"      double m1=Math.min(a,b);\n"
"      double min3=Math.min(m1,c);\n"
"   }\n"
msgstr ""

#. name, q1, feedback
#: rev_qcm/task.yaml
msgid ""
"\n"
"Cette méthode ne se compile pas. Elle est déclarée comme retournant un "
"``double``, mais elle ne retourne rien du tout.\n"
msgstr ""

#. name, q1, text
#: rev_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static double min3(double a, double b, double c) {\n"
"      double m1=Math.min(c,b);\n"
"      double min3=Math.min(m1,a);\n"
"      System.out.println(min3);\n"
"   }\n"
msgstr ""

#. name, q1, feedback
#: rev_qcm/task.yaml
msgid ""
"\n"
"Cette méthode ne se compile pas. Elle est déclarée comme retournant un "
"``double``, mais elle ne retourne rien du tout. Elle affiche le minimum à "
"l'écran, mais ce n'est pas ce qui est demandé. Ne confondez pas une méthode "
"qui affiche un résultat et une méthode qui retourne un résultat.\n"
msgstr ""

#. name, q1, text
#: rev_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static double min3(double a, double b, double c) {\n"
"      Math.min(b,c);\n"
"      Math.min(a,m);\n"
"   }\n"
msgstr ""

#. name, q1, feedback
#: rev_qcm/task.yaml
msgid ""
"\n"
"Cette méthode ne se compile pas pour plusieurs raisons. Tout d'abord, la "
"méthode ``Math.min`` est une méthode qui retourne, lorsqu'elle est utilisée "
"avec deux arguments de type ``double``, un ``double``. Or cette méthode "
"utilise ``Math.min`` comme si il s'agissait d'une méthode de type ``void``. "
"Ensuite, la méthode ``min3`` est déclarée comme retournant un ``double`` "
"mais ne comprend aucune instruction ``return``.\n"
msgstr ""

#. name, q2, name
#: rev_qcm/task.yaml
msgid "Diviseurs entiers"
msgstr ""

#. name, q2, header
#: rev_qcm/task.yaml
msgid ""
"\n"
"Parmi les méthodes ci-dessous, laquelle est-elle une implémentation correcte "
"d'une méthode qui retourne le nombre de diviseurs entiers de l'entier "
"(strictement positif) passé en argument ?\n"
msgstr ""

#. name, q2, text
#: rev_qcm/task.yaml
#, python-format
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static int ndiv(int a) {\n"
"      int n=0;\n"
"      for(int i=1;i<=a;i++)\n"
"      {\n"
"         int reste=a%i;\n"
"     if(reste==0) {\n"
"        n++;\n"
"     }\n"
"      }\n"
"      return n;\n"
"   }\n"
msgstr ""

#. name, q2, text
#: rev_qcm/task.yaml
#, python-format
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static int ndiv(int a) {\n"
"      int n=2;\n"
"      for(int i=a-1;i>1;i--)\n"
"      {\n"
"         int r=a%i;\n"
"     if(reste==0) {\n"
"        n=n+1;\n"
"     }\n"
"      }\n"
"      return n;\n"
"   }\n"
msgstr ""

#. name, q2, text
#: rev_qcm/task.yaml
#, python-format
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static int ndiv(int a) {\n"
"      int n=0;\n"
"      for(int i=1;i<=n;i++)\n"
"      {\n"
"         int reste=n%i;\n"
"     if(reste==0) {\n"
"        n++;\n"
"     }\n"
"      }\n"
"      return n;\n"
"   }\n"
msgstr ""

#. name, q2, feedback
#: rev_qcm/task.yaml
msgid ""
"\n"
"Cette méthode retourne toujours la valeur ``0``. Voyez-vous pourquoi ?\n"
msgstr ""

#. name, q2, text
#: rev_qcm/task.yaml
#, python-format
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static int ndiv(int a) {\n"
"      int n=0;\n"
"      for(int i=1;i<=a;i++)\n"
"      {\n"
"         int reste=n%i;\n"
"     if(reste==0) {\n"
"        return n;\n"
"     }\n"
"      }\n"
"      return n;\n"
"   }\n"
msgstr ""

#. name, q2, feedback
#: rev_qcm/task.yaml
msgid ""
"\n"
"Cette méthode ne retourne pas le nombre de diviseurs. Elle retourne le "
"premier diviseurs, c'est-à-dire ``1``.\n"
msgstr ""

#. name, q2, text
#: rev_qcm/task.yaml
#, python-format
msgid ""
"\n"
".. code-block:: java\n"
"\n"
"   public static int ndiv(int a) {\n"
"      int n=2;\n"
"      for(int i=a;i>0;i--)\n"
"      {\n"
"         int r=a%i;\n"
"     if(reste==0) {\n"
"        n=n+1;\n"
"     }\n"
"      }\n"
"      return n;\n"
"   }\n"
msgstr ""

#. name, q2, feedback
#: rev_qcm/task.yaml
msgid ""
"\n"
"Cette méthode ne retourne pas exactement le nombre de diviseurs entiers. "
"Vérifiez les limites de la boucle ``for``.\n"
msgstr ""

#. name, q4, name
#: rev_qcm/task.yaml
msgid "Méthode count"
msgstr ""

#. name, q4, header
#: rev_qcm/task.yaml
msgid ""
"\n"
"Implémentez une méthode ``count`` que permet de compter le nombre de fois "
"qu'un caractère passé en argument est présent dans une chaîne de données "
"donnée. La spécification de cette méthode est\n"
"\n"
".. code-block:: java\n"
"\n"
" /*\n"
"  * @pre -\n"
"  * @post retourne le nombre d'occurences du caractère c dans la chaîne s\n"
"  */\n"
" public static int count(String s, char c) {\n"
"\n"
"Un seul des corps de méthode ci-dessous est une implémentation correcte. "
"Lequel ?\n"
msgstr ""

#. name, q4, text
#: rev_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
" int count=0;\n"
" for(int i=0; i< s.length(); i=i+1) {\n"
"   if(s.charAt(i)==c) {\n"
"      count=count+1;\n"
"   }\n"
" }\n"
" return count;\n"
msgstr ""

#. name, q4, text
#: rev_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
" int count=0;\n"
" for(int i=s.length()-1; i>=0; i=i-1) {\n"
"   if(s.charAt(i)==c) {\n"
"      count=count+1;\n"
"   }\n"
" }\n"
" return count;\n"
msgstr ""

#. name, q4, text
#: rev_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
" int count=s.length();\n"
" for(int i=0; i< s.length(); i=i+1) {\n"
"   if(s.charAt(i)!=c) {\n"
"      count=count-1;\n"
"   }\n"
" }\n"
" return count;\n"
msgstr ""

#. name, q4, feedback
#: rev_qcm/task.yaml
msgid ""
"\n"
"Cette solution fonctionne, mais elle n'est pas très naturelle. Il est "
"préférable de d'abord initialiser la variable ``count`` à 0 et d'ensuite "
"l'incrémenter pour chaque occurence du caractère ``c`` plutôt que de faire "
"l'inverse.\n"
msgstr ""

#. name, q4, text
#: rev_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
" for(int i=0; i< s.length(); i=i+1) {\n"
"   int count=0;\n"
"   if(s.charAt(i)==c) {\n"
"      count=count+1;\n"
"   }\n"
" }\n"
" return count;\n"
msgstr ""

#. name, q4, feedback
#: rev_qcm/task.yaml
msgid ""
"\n"
"Cette solution ne fonctionne pas et ``javac`` refusera de la compiler. La "
"variable ``count`` est déclarée uniquement dans le bloc de la boucle "
"``for``. Elle ne peut donc pas être utilisée en dehors de cette boucle.\n"
msgstr ""

#. name, q4, text
#: rev_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
" int count=0;\n"
" for(int i=0; i<= s.length(); i=i+1) {\n"
"   if(s.charAt(i)==c) {\n"
"      count=count+1;\n"
"   }\n"
" }\n"
" return count;\n"
msgstr ""

#. name, q4, feedback
#: rev_qcm/task.yaml
msgid ""
"\n"
"Cette solution ne fonctionne pas. Lors de son exécution, elle va tenter de "
"lire le caractère à l'indice ``s.length()`` de la chaîne de caractère ``s``. "
"Cela va provoquer une exception ``java.lang."
"StringIndexOutOfBoundsException``.\n"
msgstr ""

#. name, q4, text
#: rev_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
" int count=0;\n"
" for(int i=1; i< s.length(); i=i+1) {\n"
"   if(s.charAt(i)==c) {\n"
"      count=count+1;\n"
"   }\n"
" }\n"
" return count;\n"
msgstr ""

#. name, q4, feedback
#: rev_qcm/task.yaml
msgid ""
"\n"
"Cette solution ne fonctionne pas. Elle ne teste pas le premier caractère de "
"la chaîne de caractères.\n"
msgstr ""

#. name, q4, text
#: rev_qcm/task.yaml
msgid ""
"\n"
".. code-block:: java\n"
"\n"
" int count=0;\n"
" for(int i=s.length(); i>=0; i=i-1) {\n"
"   if(s.charAt(i)==c) {\n"
"      count=count+1;\n"
"   }\n"
" }\n"
" return count;\n"
msgstr ""

#~ msgid "{0} : raté"
#~ msgstr "{0}: perdido"

#~ msgid "Bravo, votre code est correct !"
#~ msgstr "Felicitaciones, su código es correcto!"
