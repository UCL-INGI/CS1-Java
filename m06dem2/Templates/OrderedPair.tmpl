package StudentCode;

public class OrderedPair {

	private boolean ordered;  	/* vrai si les deux entiers sont ordonnÈs */
									/* p.getA() <= p.getB() */
	private Pair p;

	/**
	 * @pre -
	 * @post crée un paire ordonnée (0,0) 
	 */
	public OrderedPair() {
		p=new Pair(0, 0); 
		ordered=true;
	}

	/**
	 * @pre -
	 * @post donne au premier élément de la paire la valeur nA 
	 */
	public void setA(int nA) {
@			@q1@@
	}
		
	/**
	 * @pre -
	 * @post donne au second élément de la paire la valeur nB
	 */    
	public void setB(int nB) {
@			@q2@@
	}

	/**
	 * @pre  -
	 * @post donne à la variable ordered la valeur nOrdered
	 */
	public void setOrdered(boolean nOrdered) {
		this.ordered = nOrdered;
	}

	/**
	 * @pre -
	 * @post retourne vrai si la paire est ordonnée, faux sinon 
	 */
	public boolean getOrdered() {
		return ordered;
	}

	/**
	 * @pre -
	 * @post retourne le premier élément de la paire 
	 */
	public int getA() {
		return p.getA();
	}

	/**
	 * @pre -
	 * @post retourne le second élément de la paire 
	 */    
	public int getB() {
		return p.getB();
	}
	
	private static class Pair{
		private int a;	// le premier élément de la paire
		private int b;	// le second élément de la paire
		
		/**
		 * 	@pre 	-
		 * 	@post	crée une paire avec a et b non-initialisés
		 */
		 public Pair(){
			 
		 }
		 
		/**
		 * @pre	-
		 * @post	crée une paire composée de x et y
		 */
		 public Pair(int x, int y){
			a = x;
			b = y;
		 }
		 
		/**
		 * @pre	-
		 * @post	donne au premier élément de la paire la valeur nA
		 */
		 public void setA(int nA){
			a = nA;
		 }
		
		/**
		 * @pre	-
		 * @post	donne au second élément de la paire la valeur nB
		 */
		 public void setB(int nB){
			b = nB;
		 }
		 
		/**
		 * @pre 	-
		 * @post	retourne le premier élément de la paire
		 */
		 public int getA(){
			return a;
		 }
		 
		/**
		 * @pre	-
		 * @post	retourne le second élément de la paire
		 */
		 public int getB(){
			return b;
		 }
			
			
		/**
		 * @pre		-
		 * @post	retourne une nouvelle instance de Pair dont les deux
		 * 			éléments sont les opposés de ceux de cette paire-ci 
		 */	
		 public Pair opposite(){
			 return new Pair(-getA(), -getB());
		 }
		 
		 public boolean equals(Object o){
			 if(o instanceof Pair){
				 return (((Pair) o).getA() == a) && (((Pair) o).getB() == b);
			 }
			 return false;
		 }
	}
}
