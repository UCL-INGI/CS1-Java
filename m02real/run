#!/usr/bin/python3
# -*- coding: utf-8 -*-
# A modifier : 
# La liste expectedFiles, les fichiers attendus dans l'archive zip.

from os import listdir, system
import zipfile
import subprocess
import inginiousUtils
from inginious import feedback
import shlex


def add_indentation_level(to_indent):
    return '    ' + '    '.join(to_indent.splitlines(keepends=True))


def compile_files():
    """
    :param args: the javac command with the javac args, whithout the files to compile
    :return: (outother, output), the stderr of the compilation of student/Exercice.java and student/ExerciceStu.java
    """
    javac = "javac -encoding UTF8 -cp .:/usr/share/java/junit.jar:/usr/share/java/hamcrest-core.jar"
    args = shlex.split(javac)
    outother = ""
    output = ""
    with open('log.out', 'w+', encoding="utf-8") as f:
        subprocess.call(javac + ' student/*.java', universal_newlines=True, stderr=f, shell=True)
        f.seek(0)
        outother = f.read()
    return outother

# Verify the file content
system('getinput "q1" > basicSubmission.zip')

# totalPoints = 0
# maxPoints = 5

output = ".. role:: bash(code)\n\t:language: bash\n\n"

title1 = "Testing content of archive"
output += inginiousUtils.get_rst_title(title1) + "\n\n"

expectedFiles = ['Equation.java', 'EquationSimple.java', 'TextIO.java', 'README.TXT']

unzipOutput = inginiousUtils.extract_zip_content('basicSubmission.zip', expectedFiles)

if unzipOutput:
    output += unzipOutput
    output += "\n**Archive Content: 0/1**"
    system('archive -a build.manifest')
    feedback.set_global_result('failed')
    feedback.set_global_feedback(output)
    exit(0)
else:
    system('sh custom.sh')
    output_compile = compile_files()
    if output_compile == "":
        output += "Your archive has the correct content.\n"
        output += "\n**Archive content: 1/1**"
        feedback.set_global_result('success')
        feedback.set_global_feedback(output)
    else:
        output += "There are some compilation errors with your program :\n::\n\n"
        output += add_indentation_level(output_compile)
        feedback.set_global_result('failed')
        feedback.set_global_feedback(output)
    exit(0)
