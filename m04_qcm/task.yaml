author: Olivier BONAVENTURE
context: "================================================\nMission 4. Manipulation\
  \ de chaînes de caractères\n================================================\n\n\
  \nCes questions supposent que vous avez lu les sections suivantes du livre de référence\
  \ |jn|_\n\n - |jn2.3|_\n\n   - |jn2.3.1|_\n   - |jn2.3.2|_\n   - |jn2.3.3|_ n'est\
  \ pas vu dans le cadre de ce cours\n\n - |jn4.7|_\n\n   - |jn4.7.1|_\n   - |jn4.7.2|_\n\
  \   - |jn4.7.3|_\n\n\nLes sections vues précédemment restent bien entendu d'actualité.\n\
  \n.. _jn: http://math.hws.edu/javanotes/\n.. |jn| replace:: JavaNotes\n\n.. _jn2.3:\
  \ http://math.hws.edu/javanotes/c2/s3.html\n.. |jn2.3| replace:: `2.3 : Strings,\
  \ Objects, Enums, and Subroutines`\n\n.. _jn2.3.1: http://math.hws.edu/javanotes/c2/s3.html#basics.3.1\n\
  .. |jn2.3.1| replace:: `2.3.1 : Built-in Subroutines and Functions`\n\n.. _jn2.3.2:\
  \ http://math.hws.edu/javanotes/c2/s3.html#basics.3.2\n.. |jn2.3.2| replace:: `2.3.2\
  \ : Operations on Strings`\n\n.. _jn2.3.3: http://math.hws.edu/javanotes/c2/s3.html#basics.3.3\n\
  .. |jn2.3.3| replace:: `2.3.3 : Introduction to Enums`\n\n.. _jn4.7 : http://math.hws.edu/javanotes/c4/s7.html\n\
  .. |jn4.7| replace:: `4.7 : The Truth About Declarations`\n\n.. _jn4.7.1 : http://math.hws.edu/javanotes/c4/s7.html#subroutines.7.1\n\
  .. |jn4.7.1| replace:: `4.7.1 : Initialization in Declarations`\n\n.. _jn4.7.2 :\
  \ http://math.hws.edu/javanotes/c4/s7.html#subroutines.7.2\n.. |jn4.7.2| replace::\
  \ `4.7.2 : Named Constants`\n\n.. _jn4.7.3 : http://math.hws.edu/javanotes/c4/s7.html#subroutines.7.3\n\
  .. |jn4.7.3| replace:: `4.7.3 : Naming and Scope Rules`\n"
environment: mcq
limits: {memory: '100', output: '2', time: '30'}
name: 'Mission 4: QCM'
network_grading: false
order: 64
problems:
  q1:
    choices:
    - {text: "\n.. code-block:: java\n\n  System.out.print(a); // ligne a\n  System.out.print(r);\
        \ // ligne c\n  System.out.print(b); // ligne e\n  System.out.print(j); //\
        \ ligne f\n", valid: true}
    - {text: "\n.. code-block:: java\n\n  System.out.print(j); // ligne a\n  System.out.print(y);\
        \ // ligne c\n  System.out.print(b); // ligne e\n  System.out.print(a); //\
        \ ligne f\n", valid: true}
    - {feedback: '

        La variable ``i`` n''est utilisable qu''à l''intérieur de la boucle ``for``.
        Elle ne peut pas être utilisée en dehors de cette boucle.

        ', text: "\n.. code-block:: java\n\n  System.out.print(a); // ligne a\n  System.out.print(y);\
        \ // ligne c\n  System.out.print(b); // ligne e\n  System.out.print(i); //\
        \ ligne f\n"}
    - {feedback: '

        La variable ``i`` n''est utilisable qu''à l''intérieur de la boucle ``for``.
        Elle ne peut pas être utilisée en dehors de cette boucle.

        ', text: "\n.. code-block:: java\n\n  System.out.print(i); // ligne a\n  System.out.print(y);\
        \ // ligne c\n  System.out.print(b); // ligne e\n  System.out.print(i); //\
        \ ligne f\n"}
    - {feedback: '

        La variable ``y`` n''est utilisable qu''après sa déclaration dans le bloc
        ``for``. En dehors de ce bloc, elle ne peut pas être utilisée.

        ', text: "\n.. code-block:: java\n\n  System.out.print(a); // ligne a\n  System.out.print(i);\
        \ // ligne c\n  System.out.print(r); // ligne e\n  System.out.print(y); //\
        \ ligne f\n"}
    header: "\n\nEn Java, une déclaration de variable a comme portée la zone qui sépare\
      \ la déclaration de la variable de la fin du bloc dans lequel elle apparaît.\
      \ Une règle de bonne pratique est de déclarer chaque variable au début du bloc\
      \ de la méthode dans laquelle elle est utilisée ou dans un bloc d'une boucle\
      \ par exemple. Considérons la méthode définie comme suit\n\n.. code-block::\
      \ java\n\n    public static void showScope (int a, double r)\n    {\n      int\
      \ j=0;\n      ... // ligne a\n      for (int i = 0; ... ) {\n      double y=0.0;\n\
      \      ... // ligne c\n      if(i>0) {\n         boolean b=false;\n        \
      \ ... // ligne e\n      }\n      }\n      ... // ligne f\n\n    }\n\n\nLes propositions\
      \ ci-dessous sont relatives à des instructions placées à certains lignes identifiées\
      \ ci-dessus. Laquelle de ces propositions est-elle correcte ?\n"
    limit: 3
    name: Portée des variables
    type: multiple-choice
  q10:
    choices:
    - {text: "\n.. code-block:: java\n\n  {\n   for(int i=0;i<s.length();i=i+1) {\n\
        \     if(s.charAt(i)==c) {\n        return true;\n     }\n   }\n   return\
        \ false;\n  }\n", valid: true}
    - {text: "\n.. code-block:: java\n\n  {\n   for(int j=s.length()-1;j>=0;j=j-1)\
        \ {\n     if(s.charAt(j)!=c) {\n        return true;\n     }\n   }\n   return\
        \ false;\n  }\n"}
    - {feedback: '

        Cette méthode retourne ``false`` dès qu''un caractère diffère du caractère
        passé en argument, mais elle ne teste pas toute la chaîne de caractères.

        ', text: "\n.. code-block:: java\n\n  {\n   for(int i=0;i<s.length();i=i+1)\
        \ {\n     if(s.charAt(i)!=c) {\n        return false;\n     }\n   }\n   return\
        \ true;\n  }\n"}
    - {feedback: '

        Cette méthode commence par essayer d''accéder au caractère à l''indice ``s.length()``,
        mais celui-ci n''existe pas puisque les indices des caractères d''une chaînes
        démarrent à ``0``.

        ', text: "\n.. code-block:: java\n\n  {\n   for(int j=s.length();j>=0;j=j-1)\
        \ {\n     if(s.charAt(j)==c) {\n        return true;\n     }\n   }\n   return\
        \ false;\n  }\n"}
    - {feedback: '

        Cette méthode ne teste pas le caractère se trouvant à l''indice ``0`` de la
        chaîne de caractères ``s``. Elle ne fonctionne donc pas dans tous les cas.

        ', text: "\n.. code-block:: java\n\n  {\n   for(int j=s.length()-1;j>0;j=j-1)\
        \ {\n     if(s.charAt(j)==c) {\n        return true;\n     }\n   }\n   return\
        \ false;\n  }\n"}
    - {feedback: '

        Cette méthode essaye de tester le caractère à l''indice ``s.length()`` de
        la chaîne de caractères, mais ce caractère n''existe pas. Cela provoquera
        une erreur à l''exécution.

        ', text: "\n.. code-block:: java\n\n  {\n   for(int i=0;i<=s.length();i=i+1)\
        \ {\n     if(s.charAt(i)==c) {\n        return true;\n     }\n   }\n   return\
        \ false;\n  }\n"}
    - {feedback: '

        Cette méthode teste uniquement la valeur du premier caractère. Voyez-vous
        pourquoi ?

        ', text: "\n.. code-block:: java\n\n  {\n   for(int i=0;i<s.length();i=i+1)\
        \ {\n     if(s.charAt(i)==c) {\n        return true;\n     }\n     else {\n\
        \        return false;\n     }\n   }\n\n  }\n"}
    header: "\n\nLaquelle des implémentations de la méthode ``contains`` dont la spécification\
      \ et la signature sont reprises ci-dessous est-elle valide ?\n\n.. code-block::\
      \ java\n\n /*\n  * @pre s non vide\n  * @post retourne true si le caractère\
      \ c est présent dans la chaîne s et false sinon\n  */\n\n public static boolean\
      \ contains(String s, char c)\n"
    limit: 3
    name: Méthode contains
    type: multiple-choice
  q2:
    choices:
    - {feedback: '

        Dans cette méthode, ``b`` vaut ``1`` et donc le bloc ``else`` est exécuté
        et la valeur de ``i`` est incrémentée.

        ', text: "\n.. code-block:: java\n\n  public static void main(String[] args)\
        \ {\n\n    int i=2011;\n    int b=1;\n    if(b==0) {\n       i=b;\n    }\n\
        \    else {\n       i++;\n    }\n    System.out.println(i);\n\n  }\n", valid: true}
    - {feedback: 'Notez que la variable ``i`` déclarée dans la méthode ``f`` est différente
        de la variable ``i`` déclarée dans la méthode ``main``.

        ', text: "\n.. code-block:: java\n\n  public static int f(int b) {\n    for(int\
        \ i=1;i<10;i=i+1) {\n     b=b+i;\n    }\n\n    return b;\n  }\n\n  public\
        \ static void main(String[] args) {\n\n    int i=2012;\n    int b=1;\n   \
        \ b=f(i);\n    System.out.println(i);\n\n  }\n", valid: true}
    - {feedback: '

        ``javac`` refuse de compiler ce code car on cherche à déclarer deux fois la
        variable ``i`` ce qui est interdit dans la même méthode.

        ', text: "\n.. code-block:: java\n\n  public static void main(String[] args)\
        \ {\n\n    int i=2012;\n    int b=1;\n    if(b==0) {\n       int i=1;\n  \
        \  }\n    else {\n        i=1234;\n    }\n    System.out.println(i);\n\n \
        \ }\n"}
    - {feedback: '

        Cette méthode ``main`` modifie la valeur de la variable ``i`` dans la boucle
        ``for``. La valeur affichée est ``10``.

        ', text: "\n.. code-block:: java\n\n  public static void main(String[] args)\
        \ {\n\n    int i=2012;\n    int b=1;\n    for(i=1; i<10; i=i+1) {\n      \
        \ b=b+i;\n    }\n    System.out.println(i);\n\n  }\n"}
    - {feedback: '

        Cette méthode ``main`` met à jour la variable i dans le bloc ``while``. C''est
        donc 2013 qui est affiché.

        ', text: "\n.. code-block:: java\n\n  public static void main(String[] args)\
        \ {\n\n    int i=2012;\n    int b=1;\n    while(b!=0) {\n      i=i+1;\n  \
        \    b=b-1;\n    }\n    System.out.println(i);\n\n  }\n"}
    - {feedback: '

        Cette méthode ``main`` met à jour la variable i dans le bloc ``if``. C''est
        donc 2013 qui est affiché.

        ', text: "\n.. code-block:: java\n\n  public static void main(String[] args)\
        \ {\n\n    int i=2012;\n    int b=1;\n    if(b!=0) {\n      i=i+1;\n     \
        \ b=b-1;\n    }\n    else {\n      i=2012;\n    }\n\n    System.out.println(i);\n\
        \n  }\n"}
    header: '

      Parmi les définitions de méthodes ci-dessous, quelle est celle qui affichera
      correctement ``2012`` à l''écran ?

      '
    limit: 3
    name: Portée des variables
    type: multiple-choice
  q3:
    choices:
    - {text: "\n.. code-block:: java\n\n  affiche('0',-4);\n  affiche(\"abc\",3.23);\n\
        \  affiche(0,0);\n  affiche(\"3.12\",false);\n", valid: true}
    - {text: "\n.. code-block:: java\n\n  affiche('c',0);\n  affiche(\"3.12\",3.23);\n\
        \  affiche(-1,1);\n  affiche(\"abc\",false);\n", valid: true}
    - {feedback: '

        La dernière ligne appelle une méthode qui prend comme arguments deux ``String``
        et non un ``String`` et un ``boolean``

        ', text: "\n.. code-block:: java\n\n  affiche('c',-2);\n  affiche(\"abc\"\
        ,3.23);\n  affiche(2,8);\n  affiche(\"abc\",\"true\");\n"}
    - {feedback: '

        La deuxième ligne appelle une méthode qui prend comme arguments deux ``double``
        et non un ``String`` et un ``double``.

        ', text: "\n.. code-block:: java\n\n  affiche('8',-2);\n  affiche(3.12,3.231);\n\
        \  affiche(3,-12);\n  affiche(\"3.1\",false);\n"}
    - {feedback: '

        La première ligne appelle une méthode qui prend comme arguments un ``String``
        et un ``int`` et non un caractère et un ``int``.

        ', text: "\n.. code-block:: java\n\n  affiche(\"8\",-2);\n  affiche(\"3.12\"\
        ,3.231);\n  affiche(6,-2);\n  affiche(\"true\",false);\n"}
    - {feedback: '

        La troisième ligne appelle une méthode qui prend comme arguments un ``int``
        et un ``String`` et non deux ``int``.

        ', text: "\n.. code-block:: java\n\n  affiche('7',0);\n  affiche(\"3.12\"\
        ,3.231);\n  affiche(6,\"-2\");\n  affiche(\"false\",true);\n"}
    header: "\n\nEn Java, il est possible de définir plusieurs méthodes qui ont le\
      \ même nom pour autant qu'elles diffèrent par le nombre ou le type de leurs\
      \ arguments. La méthode ``System.out.print`` par exemple est une méthode qui\
      \ existe avec comme argument un entier, un caractères, une chaîne de caractères,\
      \ un booléen. Considérons les déclarations de méthodes ci-dessous\n\n.. code-block::\
      \ java\n\n\n public static void affiche(char c, int i) {\n  System.out.println(\"\
      char, int\");\n }\n\n public static void affiche(int i, int j) {\n  System.out.println(\"\
      int, int\");\n }\n\n public static void affiche(String s, double j) {\n  System.out.println(\"\
      String, double\");\n }\n\n public static void affiche(String s, boolean b) {\n\
      \  System.out.println(\"String, boolean\");\n }\n\nLaquelle des séquences d'invocation\
      \ suivantes affiche à l'écran\n\n.. code-block:: java\n\n  char, int\n  String,\
      \ double\n  int, int\n  String, boolean\n"
    limit: 3
    name: Surcharge de méthodes
    type: multiple-choice
  q4:
    choices:
    - {feedback: '

        En Java, ``(int) p`` permet de convertir le contenu de la variable ``p`` en
        une valeur entière.

        ', text: "\n.. code-block:: java\n\n    System.out.println((int) p);\n", valid: true}
    - {feedback: '

        La méthode ``Math.round`` retourne la valeur arrondie. Dans ce cas, le résultat
        est ``4``. Voir http://docs.oracle.com/javase/7/docs/api/java/lang/Math.html#round(double)

        ', text: "\n.. code-block:: java\n\n   System.out.println(Math.round(p));\n"}
    - {feedback: '

        Cette instruction affiche la valeur de ``p``, c''est-à-dire ``3.84``.

        ', text: "\n.. code-block:: java\n\n   System.out.println(p);\n"}
    - {feedback: '

        La méthode  ``Math.ceil`` retourne un ``double`` et non un entier. L''instruction
        affiche ``4.0`` à l''écran. Voir http://docs.oracle.com/javase/7/docs/api/java/lang/Math.html#ceil(double)

        ', text: "\n.. code-block:: java\n\n   System.out.println(Math.ceil(p));\n"}
    - {feedback: '

        La méthode ``Math.floor`` retourne un ``double`` et non un entier. L''instruction
        affiche ``3.0`` à l''écran. Voir http://docs.oracle.com/javase/7/docs/api/java/lang/Math.html#floor(double)

        ', text: "\n.. code-block:: java\n\n   System.out.println(Math.floor(p));\n\
        \n\n"}
    header: "\nEn Java, il existe différentes solutions pour convertir un nombre réel\
      \ en un nombre entier. Considérons la variable ``p`` déclarée comme suit\n\n\
      .. code-block:: java\n\n\n    double p=3.84;\n\nLaquelle des instructions ci-dessous\
      \ affiche-t-elle ``3`` à l'écran ?\n"
    limit: 3
    name: Conversion de types
    type: multiple-choice
  q5:
    choices:
    - {feedback: "\nDans cette expression, le dénominateur est une somme de nombres\
        \ entiers, c'est donc lui-même un entier. Le numérateur est un entier également.\
        \ Donc, l'opération de division est une division *entière*. Le résultat de\
        \ cette division entière est ``2`` qui est automatiquement converti par Java\
        \ en la valeur réelle ``2.0``.  Pour Java, cette assignation équivaut en fait\
        \ à .. code-block:: java\n\n f=(double) (125/(40+10));\n", text: "\n.. code-block::\
        \ java\n\n  f=125/(40+10);\n", valid: true}
    - {feedback: "\nDans cette assignation, Java effectue une conversion de type implicite.\
        \ Le dénominateur devient automatiquement de type ``double`` et le calcul\
        \ est une division de réels.  Pour Java, cette assignation équivaut en fait\
        \ à .. code-block:: java\n\n f=((double) 125) / ((double) 40+10.0));\n", text: "\n\
        .. code-block:: java\n\n  f=125/(40+10.0);\n"}
    - {feedback: '

        Dans cette assignation, le dénominateur est obligatoirement un ``double``.
        La division est donc une division entre nombres réels.

        ', text: "\n.. code-block:: java\n\n   f=125/(double) (40+10);\n"}
    - {feedback: '

        Dans cette assignation, le numérateur et le dénominateur sont de type ``double``.
        La division est donc une division entre nombres réels.

        ', text: "\n.. code-block:: java\n\n   f=125.0 / (40.0+10.0);\n"}
    header: "\nComme décrit dans la section |jn2.5.6|_ du livre de référence, il est\
      \ possible en Java de réaliser des conversions entre les nombres réels et les\
      \ nombres entiers. Certaines de ces conversions sont explicites, d'autres sont\
      \ implicites. Considérons le fragment de code ci-dessous\n\n.. code-block::\
      \ java\n\n double f;\n f=...; // ligne 1\n System.out.println(f);\n\nLorsqu'il\
      \ est exécuté, il affiche la valeur ``2.0`` à l'écran. Parmi les assignations\
      \ ci-dessous, quelle est celle qui a placé la valeur ``2.0`` dans la variable\
      \ ``f`` ?\n\n\n.. _jn2.5.6: http://math.hws.edu/javanotes/c2/s5.html#basics.5.6\n\
      .. |jn2.5.6| replace:: `2.5.6 : Assignment Operators and Type-Casts`\n"
    limit: 3
    name: Conversion de types
    type: multiple-choice
  q6:
    choices:
    - {feedback: '

        Voir http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#charAt(int)
        pour la documentation de la méthode ``charAt``.

        ', text: "\n.. code-block:: java\n\n  char c=s1.charAt(5);\n  if(c=='f') {\n\
        \     System.out.println(\"OK\");\n  }\n", valid: true}
    - {feedback: '

        Voir http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#charAt(int)
        pour la documentation de la méthode ``charAt``.

        ', text: "\n.. code-block:: java\n\n  char c=s1.charAt(0);\n  if(c=='a') {\n\
        \     System.out.println(\"OK\");\n  }\n", valid: true}
    - {feedback: '

        Voir http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#charAt(int)
        pour la documentation de la méthode ``charAt``.

        ', text: "\n.. code-block:: java\n\n  char c=s1.charAt(s1.length()-1);\n \
        \ if(c=='z') {\n     System.out.println(\"OK\");\n  }\n", valid: true}
    - {feedback: '

        En Java, les caractères d''un chaîne de caractères sont numérotés à partir
        de l''indice ``0``. L''indice ``4`` de la chaîne de caractères ``s1`` correspond
        donc au caractère ``e``. Voir http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#charAt(int)
        pour la documentation de la méthode ``charAt``.

        ', text: "\n.. code-block:: java\n\n  char c=s1.charAt(4);\n  if(c=='f') {\n\
        \     System.out.println(\"OK\");\n  }\n"}
    - {feedback: '

        En Java, les caractères d''un chaîne de caractères sont numérotés à partir
        de l''indice ``0``. L''indice ``6`` de la chaîne de caractères ``s1`` correspond
        donc au caractère ``g``. Voir http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#charAt(int)
        pour la documentation de la méthode ``charAt``.

        ', text: "\n.. code-block:: java\n\n  char c=s1.charAt(6);\n  if(c=='f') {\n\
        \     System.out.println(\"OK\");\n  }\n"}
    - {feedback: '

        En Java, les caractères d''un chaîne de caractères sont numérotés à partir
        de l''indice ``0``. L''indice ``1`` de la chaîne de caractères ``s1`` correspond
        donc au caractère ``b``. Voir http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#charAt(int)
        pour la documentation de la méthode ``charAt``.

        ', text: "\n.. code-block:: java\n\n  char c=s1.charAt(1);\n  if(c=='a') {\n\
        \     System.out.println(\"OK\");\n  }\n"}
    - {feedback: '

        En Java, les caractères d''un chaîne de caractères sont numérotés à partir
        de l''indice ``0``. ``s1.length()`` est le nombre de caractères dans la chaîne
        ``s1``.  Le dernier caractère de cette chaîne a donc l''indice ``s1.length()-1``.
        Il n''y a pas de caractère à la position ``s1.length()``. Voir http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#charAt(int)
        pour la documentation de la méthode ``charAt``.

        ', text: "\n.. code-block:: java\n\n  char c=s1.charAt(s1.length());\n  if(c=='z')\
        \ {\n     System.out.println(\"OK\");\n  }\n"}
    header: "\nConsidérons le code Java ci-dessous qui déclare et initialise des chaînes\
      \ de caractères.\n\n.. code-block:: java\n\n String s1=\"abcdefghijklmnopqrstuvwxyz\"\
      ;\n\nLaquelle des séquences d'instructions ci-dessous affiche-t-elle ``OK``\
      \ à l'écran ?\n"
    limit: 3
    name: Chaînes de caractères
    type: multiple-choice
  q7:
    choices:
    - {text: "\n.. code-block:: java\n\n  String s1=\"OOOO\";\n  String s2=\"KKKK\"\
        ;\n  String s3=s1+s2;\n  System.out.println(s3.substring(3,5));\n", valid: true}
    - {text: "\n.. code-block:: java\n\n  String s1=\"KOKOKO\";\n  String s3=s1+s1;\n\
        \  System.out.println(s3.substring(5,7));\n", valid: true}
    - {feedback: '

        La chaîne de caractère ``s1`` ne contient que ``OOOO``. Il n''existe pas de
        caractère à l''indice ``4`` dans cette chaîne.

        ', text: "\n.. code-block:: java\n\n  String s1=\"OOOO\";\n  String s2=\"\
        KKKK\";\n  String s3=s1+s2;\n  System.out.println(s1.substring(4,2));\n"}
    - {feedback: '

        La chaîne ``s3`` contient ``OKOKOOKOKO``. La chaîne de caractères extraite
        est donc ``OO``.

        ', text: "\n.. code-block:: java\n\n  String s1=\"OKOKO\";\n  String s2=\"\
        OKOKO\";\n  String s3=s1+s2;\n  System.out.println(s3.substring(4,2));\n"}
    header: '

      Dans la classe ``String``, la méthode ``substring`` est une méthode efficace
      pour extraire une sous-chaîne d''une chaîne de caractères. En vous basant sur
      la description de ``substring`` dans le livre et dans la documentation Java
      http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/String.html, lequel des
      fragments de code ci-dessous affiche-t-il la chaîne ``OK`` à l''écran ?

      '
    limit: 3
    name: Extraction de chaînes de caractères
    type: multiple-choice
  q8:
    choices:
    - {text: "\n.. code-block:: java\n\n  if(s3.indexOf(s2)>=0) {\n     System.out.println(\"\
        OK\");\n  }\n", valid: true}
    - {text: "\n.. code-block:: java\n\n  if(s3.indexOf(s1)>=0) {\n     System.out.println(\"\
        OK\");\n  }\n", valid: true}
    - {feedback: '

        Dans ce code, la méthode ``indexOf`` est appliquée à la chaîne de caractères
        ``s1`` et prend comme argument la chaîne de caractères ``s2``. Elle détermine
        donc si la chaîne ``s2`` est une sous-chaîne de ``s1``. Comme ce n''est pas
        le cas, elle retourne donc ``-1``.

        ', text: "\n.. code-block:: java\n\n  if(s1.indexOf(s2)>=0) {\n     System.out.println(\"\
        OK\");\n  }\n"}
    - {feedback: '

        Dans ce code, la méthode ``indexOf`` est appliquée à la chaîne de caractères
        ``s2`` et prend comme argument la chaîne de caractères ``s3``. Elle détermine
        donc si la chaîne ``s3`` est une sous-chaîne de ``s2``. Comme ce n''est pas
        le cas, elle retourne donc ``-1``.

        ', text: "\n.. code-block:: java\n\n  if(s2.indexOf(s3)>=0) {\n     System.out.println(\"\
        OK\");\n  }\n"}
    - {feedback: '

        Dans ce code, la méthode ``indexOf`` est appliquée à la chaîne de caractères
        ``s2`` et prend comme argument la chaîne de caractères ``s3``. Elle détermine
        donc si la chaîne ``s3`` est une sous-chaîne de ``s2``. Comme ce n''est pas
        le cas, elle retourne donc ``-1``.

        ', text: "\n.. code-block:: java\n\n  if(s2.indexOf(s3)>=0) {\n     System.out.println(\"\
        OK\");\n  }\n"}
    header: "\nEn Java, la méthode ``indexOf`` peut être utilisée pour déterminer\
      \ si une chaîne de caractères est comprise dans une autre chaîne de caractères.\
      \ Considérons les déclarations suivantes\n\n.. code-block:: java\n\n String\
      \ s1=\"abcdef\";\n String s2=\"mnopq\";\n String s3=\"abcdefijklmnopqrstuvwxyz\"\
      ;\n\nLaquelle des séquences d'instructions ci-dessous affiche ``OK`` à l'écran\
      \ ?\n"
    limit: 3
    name: Méthode indexOf
    type: multiple-choice
  q9:
    choices:
    - {text: '``s1.equalsIgnoreCase(s2)`` est un booléen, ``s1.charAt(2)`` est un
        caractère et ``s3.indexOf(s2)`` est un entier

        ', valid: true}
    - {text: '``s1.equalsIgnoreCase(s2)`` est un booléen, ``s2.length()`` est un entier
        et ``s1.substring(1,2)`` est une chaîne de caractères

        ', valid: true}
    - {feedback: '

        La méthode ``length`` retourne la longueur de la chaîne de caractère sur laquelle
        elle s''applique. Cette valeur est un entier.

        ', text: '``s2.equalsIgnoreCase(s3)`` est un booléen, ``s3.length()`` est
        un caractère et ``s2.indexOf(s3)`` est un entier

        '}
    - {feedback: '

        La méthode ``indexOf`` retourne un entier et non un caractère.

        ', text: '``s2.equalsIgnoreCase(s2)`` est un booléen, ``s3.indexOf(s2)`` est
        un caractère et ``s2.substring(1,2)`` une chaîne de caractères

        '}
    - {feedback: '

        La méthode ``equalsIgnoreCase`` retourne un booléen, elle n''affiche rien.

        ', text: '``s1.equalsIgnoreCase(s2)`` affiche ``true`` ou ``false``, ``s3.indexOf(s2)``
        est entier et ``s2.substring(1,2)`` une chaîne de caractères

        '}
    header: "\nLa classe ``String`` contient de nombreuses méthodes utiles de manipulation\
      \ des chaînes de caractères. Certains retournent un booléen, d'autres retournent\
      \ un caractère, d'autres encore retourne un ``String``. En considérant les déclarations\
      \ ci-dessous, quelle est la suite d'affirmations ci-dessous qui est vraie ?\n\
      \n.. code-block:: java\n\n String s1=\"abcdef\";\n String s2=\"mnopq\";\n String\
      \ s3=\"abcdefijklmnopqrstuvwxyz\";\n"
    limit: 3
    name: Méthodes de la classe String
    type: multiple-choice
stored_submissions: 0
weight: 1.0
